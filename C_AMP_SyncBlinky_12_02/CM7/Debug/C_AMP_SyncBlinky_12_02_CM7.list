
C_AMP_SyncBlinky_12_02_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006558  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006828  08006828  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006830  08006830  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006848  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080068a8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b0  240000d0  08006908  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000780  08006908  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001850f  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000029e7  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001038  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c84  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a4a5  00000000  00000000  0003ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001562a  00000000  00000000  00077199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017fa58  00000000  00000000  0008c7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000044e0  00000000  00000000  0020c21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a4  00000000  00000000  002106fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080067d8 	.word	0x080067d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080067d8 	.word	0x080067d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <main+0xd0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fa55 	bl	8000bd8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc8b 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f851 	bl	80007d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <main+0xd0>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <main+0xd0>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <main+0xd0>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fc41 	bl	8001fdc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fc57 	bl	8002010 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <main+0xd0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fa27 	bl	8000bd8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f96d 	bl	8000a68 <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f8a1 	bl	80008d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f8eb 	bl	800096c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f935 	bl	8000a04 <MX_USB_OTG_FS_PCD_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_HSEM_Take(HSEM_ID_1, 0);
 800079a:	2100      	movs	r1, #0
 800079c:	2001      	movs	r0, #1
 800079e:	f001 fbfb 	bl	8001f98 <HAL_HSEM_Take>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2101      	movs	r1, #1
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <main+0xd4>)
 80007a8:	f001 fbdc 	bl	8001f64 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80007ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b0:	f000 fcdc 	bl	800116c <HAL_Delay>
	  HAL_HSEM_Release(HSEM_ID_1,0);
 80007b4:	2100      	movs	r1, #0
 80007b6:	2001      	movs	r0, #1
 80007b8:	f001 fc2a 	bl	8002010 <HAL_HSEM_Release>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <main+0xd4>)
 80007c2:	f001 fbcf 	bl	8001f64 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80007c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ca:	f000 fccf 	bl	800116c <HAL_Delay>
	  HAL_HSEM_Take(HSEM_ID_1, 0);
 80007ce:	e7e4      	b.n	800079a <main+0x9a>
 80007d0:	58024400 	.word	0x58024400
 80007d4:	58020400 	.word	0x58020400

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	224c      	movs	r2, #76	; 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 ffca 	bl	8006780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 ffc4 	bl	8006780 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f001 fd65 	bl	80022c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <SystemClock_Config+0xf4>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <SystemClock_Config+0xf4>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <SystemClock_Config+0xf4>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <SystemClock_Config+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <SystemClock_Config+0xf8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <SystemClock_Config+0xf8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000834:	bf00      	nop
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <SystemClock_Config+0xf8>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800085a:	2312      	movs	r3, #18
 800085c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086a:	230c      	movs	r3, #12
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800086e:	2302      	movs	r3, #2
 8000870:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000872:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000876:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd8d 	bl	800239c <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000888:	f000 f9a6 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	233f      	movs	r3, #63	; 0x3f
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f9cc 	bl	8002c50 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008be:	f000 f98b 	bl	8000bd8 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3770      	adds	r7, #112	; 0x70
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800

080008d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_ETH_Init+0x80>)
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MX_ETH_Init+0x84>)
 80008dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ETH_Init+0x88>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_ETH_Init+0x88>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ETH_Init+0x88>)
 80008ec:	22e1      	movs	r2, #225	; 0xe1
 80008ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_ETH_Init+0x88>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ETH_Init+0x88>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_ETH_Init+0x88>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ETH_Init+0x80>)
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_ETH_Init+0x88>)
 8000906:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_ETH_Init+0x80>)
 800090a:	2201      	movs	r2, #1
 800090c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_ETH_Init+0x80>)
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_ETH_Init+0x8c>)
 8000912:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_ETH_Init+0x80>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_ETH_Init+0x90>)
 8000918:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_ETH_Init+0x80>)
 800091c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000920:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_ETH_Init+0x80>)
 8000924:	f000 fd4a 	bl	80013bc <HAL_ETH_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800092e:	f000 f953 	bl	8000bd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000932:	2238      	movs	r2, #56	; 0x38
 8000934:	2100      	movs	r1, #0
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_ETH_Init+0x94>)
 8000938:	f005 ff22 	bl	8006780 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_ETH_Init+0x94>)
 800093e:	2221      	movs	r2, #33	; 0x21
 8000940:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_ETH_Init+0x94>)
 8000944:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000948:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_ETH_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000124 	.word	0x24000124
 8000958:	40028000 	.word	0x40028000
 800095c:	24000774 	.word	0x24000774
 8000960:	24000070 	.word	0x24000070
 8000964:	24000010 	.word	0x24000010
 8000968:	240000ec 	.word	0x240000ec

0800096c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART3_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009b6:	f004 fb03 	bl	8004fc0 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f90a 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009c8:	f005 fb05 	bl	8005fd6 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f901 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009da:	f005 fb3a 	bl	8006052 <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f8f8 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009ea:	f005 fabb 	bl	8005f64 <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f8f0 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	240001d4 	.word	0x240001d4
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a10:	2209      	movs	r2, #9
 8000a12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	f001 faf4 	bl	8002038 <HAL_PCD_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a56:	f000 f8bf 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000268 	.word	0x24000268
 8000a64:	40080000 	.word	0x40080000

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a4f      	ldr	r2, [pc, #316]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9c:	4b49      	ldr	r3, [pc, #292]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a48      	ldr	r2, [pc, #288]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a40      	ldr	r2, [pc, #256]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a39      	ldr	r2, [pc, #228]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_GPIO_Init+0x15c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b38:	4823      	ldr	r0, [pc, #140]	; (8000bc8 <MX_GPIO_Init+0x160>)
 8000b3a:	f001 fa13 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b44:	4821      	ldr	r0, [pc, #132]	; (8000bcc <MX_GPIO_Init+0x164>)
 8000b46:	f001 fa0d 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <MX_GPIO_Init+0x168>)
 8000b60:	f001 f850 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b64:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <MX_GPIO_Init+0x160>)
 8000b7e:	f001 f841 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_GPIO_Init+0x164>)
 8000b9c:	f001 f832 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_GPIO_Init+0x16c>)
 8000bb6:	f001 f825 	bl	8001c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	58020c00 	.word	0x58020c00
 8000bd0:	58020800 	.word	0x58020800
 8000bd4:	58021800 	.word	0x58021800

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MspInit+0x30>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x30>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	58024400 	.word	0x58024400

08000c18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a59      	ldr	r2, [pc, #356]	; (8000d9c <HAL_ETH_MspInit+0x184>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f040 80ab 	bne.w	8000d92 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c3c:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c42:	4a57      	ldr	r2, [pc, #348]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c4c:	4b54      	ldr	r3, [pc, #336]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c56:	623b      	str	r3, [r7, #32]
 8000c58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c5a:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c60:	4a4f      	ldr	r2, [pc, #316]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c6a:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c78:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7e:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c88:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	4a39      	ldr	r2, [pc, #228]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d0e:	2332      	movs	r3, #50	; 0x32
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	481e      	ldr	r0, [pc, #120]	; (8000da4 <HAL_ETH_MspInit+0x18c>)
 8000d2a:	f000 ff6b 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d2e:	2386      	movs	r3, #134	; 0x86
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4817      	ldr	r0, [pc, #92]	; (8000da8 <HAL_ETH_MspInit+0x190>)
 8000d4a:	f000 ff5b 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d60:	230b      	movs	r3, #11
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4810      	ldr	r0, [pc, #64]	; (8000dac <HAL_ETH_MspInit+0x194>)
 8000d6c:	f000 ff4a 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d82:	230b      	movs	r3, #11
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <HAL_ETH_MspInit+0x198>)
 8000d8e:	f000 ff39 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40028000 	.word	0x40028000
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58020800 	.word	0x58020800
 8000da8:	58020000 	.word	0x58020000
 8000dac:	58020400 	.word	0x58020400
 8000db0:	58021800 	.word	0x58021800

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ba      	sub	sp, #232	; 0xe8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	22c0      	movs	r2, #192	; 0xc0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fcd3 	bl	8006780 <memset>
  if(huart->Instance==USART3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_UART_MspInit+0xc8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d146      	bne.n	8000e72 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de4:	f04f 0202 	mov.w	r2, #2
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fab4 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e06:	f7ff fee7 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e60:	2307      	movs	r3, #7
 8000e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_UART_MspInit+0xd0>)
 8000e6e:	f000 fec9 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	37e8      	adds	r7, #232	; 0xe8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	58024400 	.word	0x58024400
 8000e84:	58020c00 	.word	0x58020c00

08000e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ba      	sub	sp, #232	; 0xe8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	22c0      	movs	r2, #192	; 0xc0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 fc69 	bl	8006780 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a38      	ldr	r2, [pc, #224]	; (8000f94 <HAL_PCD_MspInit+0x10c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d169      	bne.n	8000f8c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000eb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ed8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000edc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000ede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fa39 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000efc:	f7ff fe6c 	bl	8000bd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f00:	f001 fa3c 	bl	800237c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f22:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <HAL_PCD_MspInit+0x114>)
 8000f4a:	f000 fe5b 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f66:	4619      	mov	r1, r3
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HAL_PCD_MspInit+0x114>)
 8000f6a:	f000 fe4b 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_PCD_MspInit+0x110>)
 8000f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	37e8      	adds	r7, #232	; 0xe8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40080000 	.word	0x40080000
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020000 	.word	0x58020000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f89e 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff8:	f7ff faec 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001022:	f005 fbb5 	bl	8006790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fb6b 	bl	8000700 <main>
  bx  lr
 800102a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001030:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001034:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001038:	08006838 	.word	0x08006838
  ldr r2, =_sbss
 800103c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001040:	24000780 	.word	0x24000780

08001044 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC3_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f982 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001054:	f001 ffb2 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8001058:	4602      	mov	r2, r0
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_Init+0x68>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	4913      	ldr	r1, [pc, #76]	; (80010b4 <HAL_Init+0x6c>)
 8001066:	5ccb      	ldrb	r3, [r1, r3]
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_Init+0x68>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_Init+0x6c>)
 800107c:	5cd3      	ldrb	r3, [r2, r3]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_Init+0x70>)
 800108a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_Init+0x74>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f814 	bl	80010c0 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e002      	b.n	80010a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a2:	f7ff fd9f 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58024400 	.word	0x58024400
 80010b4:	080067f0 	.word	0x080067f0
 80010b8:	24000004 	.word	0x24000004
 80010bc:	24000000 	.word	0x24000000

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_InitTick+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e021      	b.n	8001118 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_InitTick+0x64>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_InitTick+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f959 	bl	80013a2 <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00e      	b.n	8001118 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d80a      	bhi.n	8001116 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001100:	2200      	movs	r2, #0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f000 f931 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_InitTick+0x68>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2400000c 	.word	0x2400000c
 8001124:	24000000 	.word	0x24000000
 8001128:	24000008 	.word	0x24000008

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	2400000c 	.word	0x2400000c
 8001150:	2400077c 	.word	0x2400077c

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2400077c 	.word	0x2400077c

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2400000c 	.word	0x2400000c

080011b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetREVID+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	0c1b      	lsrs	r3, r3, #16
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	5c001000 	.word	0x5c001000

080011cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	58000400 	.word	0x58000400

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <__NVIC_SetPriorityGrouping+0x40>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	4313      	orrs	r3, r2
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x40>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	05fa0000 	.word	0x05fa0000

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff47 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff5e 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff90 	bl	80012ac <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5f 	bl	8001258 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb2 	bl	8001314 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0cf      	b.n	800156e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d106      	bne.n	80013e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2223      	movs	r2, #35	; 0x23
 80013dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fc19 	bl	8000c18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_ETH_Init+0x1bc>)
 80013e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ec:	4a62      	ldr	r2, [pc, #392]	; (8001578 <HAL_ETH_Init+0x1bc>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_ETH_Init+0x1bc>)
 80013f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7a1b      	ldrb	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fedd 	bl	80011cc <HAL_SYSCFG_ETHInterfaceSelect>
 8001412:	e003      	b.n	800141c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001414:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001418:	f7ff fed8 	bl	80011cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_ETH_Init+0x1c0>)
 800141e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001436:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001438:	f7ff fe8c 	bl	8001154 <HAL_GetTick>
 800143c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800143e:	e011      	b.n	8001464 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001440:	f7ff fe88 	bl	8001154 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800144e:	d909      	bls.n	8001464 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2204      	movs	r2, #4
 8001454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	22e0      	movs	r2, #224	; 0xe0
 800145c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e084      	b.n	800156e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1e4      	bne.n	8001440 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f886 	bl	8001588 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800147c:	f001 ff18 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8001480:	4603      	mov	r3, r0
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <HAL_ETH_Init+0x1c4>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	0c9a      	lsrs	r2, r3, #18
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3a01      	subs	r2, #1
 8001490:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fa71 	bl	800197c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80014a6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	22e0      	movs	r2, #224	; 0xe0
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e049      	b.n	800156e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_ETH_Init+0x1c8>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6952      	ldr	r2, [r2, #20]
 80014ee:	0051      	lsls	r1, r2, #1
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	430b      	orrs	r3, r1
 80014f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014fa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fad9 	bl	8001ab6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fb1f 	bl	8001b48 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	3305      	adds	r3, #5
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	021a      	lsls	r2, r3, #8
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	3303      	adds	r3, #3
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	061a      	lsls	r2, r3, #24
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	3302      	adds	r3, #2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	3301      	adds	r3, #1
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001548:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001556:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001558:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2210      	movs	r2, #16
 8001568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	58024400 	.word	0x58024400
 800157c:	58000400 	.word	0x58000400
 8001580:	431bde83 	.word	0x431bde83
 8001584:	ffff8001 	.word	0xffff8001

08001588 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001598:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015a2:	f001 fe85 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80015a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d908      	bls.n	80015c2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d804      	bhi.n	80015c2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e027      	b.n	8001612 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d908      	bls.n	80015dc <HAL_ETH_SetMDIOClockRange+0x54>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d204      	bcs.n	80015dc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e01a      	b.n	8001612 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d303      	bcc.n	80015ec <HAL_ETH_SetMDIOClockRange+0x64>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d911      	bls.n	8001610 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d908      	bls.n	8001606 <HAL_ETH_SetMDIOClockRange+0x7e>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_ETH_SetMDIOClockRange+0xac>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d804      	bhi.n	8001606 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e005      	b.n	8001612 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e000      	b.n	8001612 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001610:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	01312cff 	.word	0x01312cff
 8001628:	02160ebf 	.word	0x02160ebf
 800162c:	03938700 	.word	0x03938700
 8001630:	05f5e0ff 	.word	0x05f5e0ff
 8001634:	08f0d17f 	.word	0x08f0d17f

08001638 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800164a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001652:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	7b1b      	ldrb	r3, [r3, #12]
 8001658:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800165a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7b5b      	ldrb	r3, [r3, #13]
 8001660:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7b9b      	ldrb	r3, [r3, #14]
 8001668:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800166a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	7bdb      	ldrb	r3, [r3, #15]
 8001670:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001672:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	7c12      	ldrb	r2, [r2, #16]
 8001678:	2a00      	cmp	r2, #0
 800167a:	d102      	bne.n	8001682 <ETH_SetMACConfig+0x4a>
 800167c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001680:	e000      	b.n	8001684 <ETH_SetMACConfig+0x4c>
 8001682:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001684:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	7c52      	ldrb	r2, [r2, #17]
 800168a:	2a00      	cmp	r2, #0
 800168c:	d102      	bne.n	8001694 <ETH_SetMACConfig+0x5c>
 800168e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001692:	e000      	b.n	8001696 <ETH_SetMACConfig+0x5e>
 8001694:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	7c9b      	ldrb	r3, [r3, #18]
 800169c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800169e:	431a      	orrs	r2, r3
               macconf->Speed |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80016a4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80016aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	7f1b      	ldrb	r3, [r3, #28]
 80016b0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80016b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	7f5b      	ldrb	r3, [r3, #29]
 80016b8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	7f92      	ldrb	r2, [r2, #30]
 80016c0:	2a00      	cmp	r2, #0
 80016c2:	d102      	bne.n	80016ca <ETH_SetMACConfig+0x92>
 80016c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c8:	e000      	b.n	80016cc <ETH_SetMACConfig+0x94>
 80016ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	7fdb      	ldrb	r3, [r3, #31]
 80016d2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d102      	bne.n	80016e6 <ETH_SetMACConfig+0xae>
 80016e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e4:	e000      	b.n	80016e8 <ETH_SetMACConfig+0xb0>
 80016e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016e8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016f6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016f8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b56      	ldr	r3, [pc, #344]	; (8001864 <ETH_SetMACConfig+0x22c>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	430b      	orrs	r3, r1
 8001714:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001722:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001724:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800172c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800172e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001736:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001738:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001740:	2a00      	cmp	r2, #0
 8001742:	d102      	bne.n	800174a <ETH_SetMACConfig+0x112>
 8001744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001748:	e000      	b.n	800174c <ETH_SetMACConfig+0x114>
 800174a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800174c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <ETH_SetMACConfig+0x230>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	430b      	orrs	r3, r1
 8001768:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001770:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001776:	4313      	orrs	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4b3a      	ldr	r3, [pc, #232]	; (800186c <ETH_SetMACConfig+0x234>)
 8001782:	4013      	ands	r3, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	68f9      	ldr	r1, [r7, #12]
 800178a:	430b      	orrs	r3, r1
 800178c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001794:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800179a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d101      	bne.n	80017aa <ETH_SetMACConfig+0x172>
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	e000      	b.n	80017ac <ETH_SetMACConfig+0x174>
 80017aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017ac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80017c2:	4013      	ands	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	68f9      	ldr	r1, [r7, #12]
 80017ca:	430b      	orrs	r3, r1
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	f023 0103 	bic.w	r1, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001802:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800181e:	2a00      	cmp	r2, #0
 8001820:	d101      	bne.n	8001826 <ETH_SetMACConfig+0x1ee>
 8001822:	2240      	movs	r2, #64	; 0x40
 8001824:	e000      	b.n	8001828 <ETH_SetMACConfig+0x1f0>
 8001826:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001828:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001830:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800183a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001848:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	430a      	orrs	r2, r1
 8001854:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	00048083 	.word	0x00048083
 8001868:	c0f88000 	.word	0xc0f88000
 800186c:	fffffef0 	.word	0xfffffef0

08001870 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <ETH_SetDMAConfig+0xf8>)
 8001886:	4013      	ands	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	6811      	ldr	r1, [r2, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	430b      	orrs	r3, r1
 8001892:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001896:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	7b1b      	ldrb	r3, [r3, #12]
 80018a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4b2c      	ldr	r3, [pc, #176]	; (800196c <ETH_SetDMAConfig+0xfc>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018c8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7b5b      	ldrb	r3, [r3, #13]
 80018ce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <ETH_SetDMAConfig+0x100>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	430b      	orrs	r3, r1
 80018f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	7d1b      	ldrb	r3, [r3, #20]
 8001900:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001902:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	7f5b      	ldrb	r3, [r3, #29]
 8001908:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <ETH_SetDMAConfig+0x104>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	430b      	orrs	r3, r1
 8001926:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800192a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	7f1b      	ldrb	r3, [r3, #28]
 8001932:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001944:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <ETH_SetDMAConfig+0x108>)
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	430b      	orrs	r3, r1
 8001954:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001958:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	ffff87fd 	.word	0xffff87fd
 800196c:	ffff2ffe 	.word	0xffff2ffe
 8001970:	fffec000 	.word	0xfffec000
 8001974:	ffc0efef 	.word	0xffc0efef
 8001978:	7fc0ffff 	.word	0x7fc0ffff

0800197c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0a4      	sub	sp, #144	; 0x90
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800198a:	2300      	movs	r3, #0
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80019d4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80019d8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019f6:	2300      	movs	r3, #0
 80019f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019fe:	2300      	movs	r3, #0
 8001a00:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a14:	2320      	movs	r3, #32
 8001a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a30:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a56:	2300      	movs	r3, #0
 8001a58:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fde6 	bl	8001638 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a70:	2301      	movs	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a9c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fee1 	bl	8001870 <ETH_SetDMAConfig>
}
 8001aae:	bf00      	nop
 8001ab0:	3790      	adds	r7, #144	; 0x90
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e01d      	b.n	8001b00 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68d9      	ldr	r1, [r3, #12]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	3206      	adds	r2, #6
 8001af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d9de      	bls.n	8001ac4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b14:	461a      	mov	r2, r3
 8001b16:	2303      	movs	r3, #3
 8001b18:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b28:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e023      	b.n	8001b9e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	440b      	add	r3, r1
 8001b66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	3212      	adds	r2, #18
 8001b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d9d8      	bls.n	8001b56 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_GPIO_Init+0x234>)
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c16:	e194      	b.n	8001f42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8186 	beq.w	8001f3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x44>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d017      	beq.n	8001ce6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d123      	bne.n	8001d3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	69b9      	ldr	r1, [r7, #24]
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0203 	and.w	r2, r3, #3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80e0 	beq.w	8001f3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d82:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_GPIO_Init+0x23c>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_GPIO_Init+0x240>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d052      	beq.n	8001e6c <HAL_GPIO_Init+0x268>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_GPIO_Init+0x244>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_GPIO_Init+0x22e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_GPIO_Init+0x248>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d02b      	beq.n	8001e2e <HAL_GPIO_Init+0x22a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_GPIO_Init+0x24c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_GPIO_Init+0x250>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_GPIO_Init+0x254>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_GPIO_Init+0x258>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_GPIO_Init+0x25c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x260>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_GPIO_Init+0x264>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001e0e:	2309      	movs	r3, #9
 8001e10:	e02d      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e12:	230a      	movs	r3, #10
 8001e14:	e02b      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e029      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e027      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e025      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e023      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e021      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e01f      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e01d      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e01b      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e36:	bf00      	nop
 8001e38:	58000080 	.word	0x58000080
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58000400 	.word	0x58000400
 8001e44:	58020000 	.word	0x58020000
 8001e48:	58020400 	.word	0x58020400
 8001e4c:	58020800 	.word	0x58020800
 8001e50:	58020c00 	.word	0x58020c00
 8001e54:	58021000 	.word	0x58021000
 8001e58:	58021400 	.word	0x58021400
 8001e5c:	58021800 	.word	0x58021800
 8001e60:	58021c00 	.word	0x58021c00
 8001e64:	58022000 	.word	0x58022000
 8001e68:	58022400 	.word	0x58022400
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	4093      	lsls	r3, r2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7e:	4938      	ldr	r1, [pc, #224]	; (8001f60 <HAL_GPIO_Init+0x35c>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f ae63 	bne.w	8001c18 <HAL_GPIO_Init+0x14>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58000400 	.word	0x58000400

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8001fa2:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <HAL_HSEM_Take+0x3c>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_HSEM_Take+0x40>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8001fb0:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_HSEM_Take+0x3c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_HSEM_Take+0x40>)
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d101      	bne.n	8001fc6 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	58026400 	.word	0x58026400
 8001fd8:	80000300 	.word	0x80000300

08001fdc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001fe4:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_HSEM_FastTake+0x2c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3320      	adds	r3, #32
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_HSEM_FastTake+0x30>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	58026400 	.word	0x58026400
 800200c:	80000300 	.word	0x80000300

08002010 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800201a:	4906      	ldr	r1, [pc, #24]	; (8002034 <HAL_HSEM_Release+0x24>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	58026400 	.word	0x58026400

08002038 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	b08f      	sub	sp, #60	; 0x3c
 800203c:	af0a      	add	r7, sp, #40	; 0x28
 800203e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e116      	b.n	8002278 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe ff0f 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f8dd 	bl	8006248 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	687e      	ldr	r6, [r7, #4]
 8002096:	466d      	mov	r5, sp
 8002098:	f106 0410 	add.w	r4, r6, #16
 800209c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ac:	1d33      	adds	r3, r6, #4
 80020ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b0:	6838      	ldr	r0, [r7, #0]
 80020b2:	f004 f85b 	bl	800616c <USB_CoreInit>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0d7      	b.n	8002278 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 f8cb 	bl	800626a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e04a      	b.n	8002170 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	333d      	adds	r3, #61	; 0x3d
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	333c      	adds	r3, #60	; 0x3c
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	b298      	uxth	r0, r3
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3356      	adds	r3, #86	; 0x56
 8002116:	4602      	mov	r2, r0
 8002118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3340      	adds	r3, #64	; 0x40
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3344      	adds	r3, #68	; 0x44
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3348      	adds	r3, #72	; 0x48
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	334c      	adds	r3, #76	; 0x4c
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	3301      	adds	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	d3af      	bcc.n	80020da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e044      	b.n	800220a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	3301      	adds	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	d3b5      	bcc.n	8002180 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	687e      	ldr	r6, [r7, #4]
 800221c:	466d      	mov	r5, sp
 800221e:	f106 0410 	add.w	r4, r6, #16
 8002222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800222e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002232:	1d33      	adds	r3, r6, #4
 8002234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002236:	6838      	ldr	r0, [r7, #0]
 8002238:	f004 f864 	bl	8006304 <USB_DevInit>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2202      	movs	r2, #2
 8002246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e014      	b.n	8002278 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f80a 	bl	8002280 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fa22 	bl	80066ba <USB_DevDisconnect>

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	10000003 	.word	0x10000003

080022c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	2b06      	cmp	r3, #6
 80022da:	d00a      	beq.n	80022f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e040      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e03e      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80022fa:	491f      	ldr	r1, [pc, #124]	; (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002302:	f7fe ff27 	bl	8001154 <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002308:	e009      	b.n	800231e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800230a:	f7fe ff23 	bl	8001154 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002318:	d901      	bls.n	800231e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e028      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232a:	d1ee      	bne.n	800230a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b1e      	cmp	r3, #30
 8002330:	d008      	beq.n	8002344 <HAL_PWREx_ConfigSupply+0x7c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b2e      	cmp	r3, #46	; 0x2e
 8002336:	d005      	beq.n	8002344 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b1d      	cmp	r3, #29
 800233c:	d002      	beq.n	8002344 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b2d      	cmp	r3, #45	; 0x2d
 8002342:	d114      	bne.n	800236e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002344:	f7fe ff06 	bl	8001154 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800234a:	e009      	b.n	8002360 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800234c:	f7fe ff02 	bl	8001154 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800235a:	d901      	bls.n	8002360 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d1ee      	bne.n	800234c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58024800 	.word	0x58024800

0800237c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	58024800 	.word	0x58024800

0800239c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f000 bc48 	b.w	8002c40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8088 	beq.w	80024ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4b99      	ldr	r3, [pc, #612]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023c8:	4b96      	ldr	r3, [pc, #600]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d007      	beq.n	80023e4 <HAL_RCC_OscConfig+0x48>
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	2b18      	cmp	r3, #24
 80023d8:	d111      	bne.n	80023fe <HAL_RCC_OscConfig+0x62>
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d06d      	beq.n	80024cc <HAL_RCC_OscConfig+0x130>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d169      	bne.n	80024cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f000 bc21 	b.w	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x7a>
 8002408:	4b86      	ldr	r3, [pc, #536]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a85      	ldr	r2, [pc, #532]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e02e      	b.n	8002474 <HAL_RCC_OscConfig+0xd8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x9c>
 800241e:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a80      	ldr	r2, [pc, #512]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7d      	ldr	r2, [pc, #500]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xd8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0xc0>
 8002442:	4b78      	ldr	r3, [pc, #480]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b75      	ldr	r3, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xd8>
 800245c:	4b71      	ldr	r3, [pc, #452]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a70      	ldr	r2, [pc, #448]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b6e      	ldr	r3, [pc, #440]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6d      	ldr	r2, [pc, #436]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fe6a 	bl	8001154 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fe66 	bl	8001154 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e3d4      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xe8>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fe56 	bl	8001154 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fe52 	bl	8001154 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e3c0      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024be:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x110>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80ca 	beq.w	8002670 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024dc:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e6:	4b4f      	ldr	r3, [pc, #316]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_RCC_OscConfig+0x166>
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2b18      	cmp	r3, #24
 80024f6:	d156      	bne.n	80025a6 <HAL_RCC_OscConfig+0x20a>
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d151      	bne.n	80025a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002502:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x17e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e392      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251a:	4b42      	ldr	r3, [pc, #264]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0219 	bic.w	r2, r3, #25
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	493f      	ldr	r1, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fe12 	bl	8001154 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe fe0e 	bl	8001154 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e37c      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	f7fe fe2f 	bl	80011b4 <HAL_GetREVID>
 8002556:	4603      	mov	r3, r0
 8002558:	f241 0203 	movw	r2, #4099	; 0x1003
 800255c:	4293      	cmp	r3, r2
 800255e:	d817      	bhi.n	8002590 <HAL_RCC_OscConfig+0x1f4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d108      	bne.n	800257a <HAL_RCC_OscConfig+0x1de>
 8002568:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002576:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	e07a      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	4926      	ldr	r1, [pc, #152]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258e:	e06f      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	e064      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d047      	beq.n	800263e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0219 	bic.w	r2, r3, #25
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	491a      	ldr	r1, [pc, #104]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fdc8 	bl	8001154 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7fe fdc4 	bl	8001154 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e332      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	f7fe fde5 	bl	80011b4 <HAL_GetREVID>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d819      	bhi.n	8002628 <HAL_RCC_OscConfig+0x28c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d108      	bne.n	800260e <HAL_RCC_OscConfig+0x272>
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	6053      	str	r3, [r2, #4]
 800260c:	e030      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	031b      	lsls	r3, r3, #12
 800261c:	4901      	ldr	r1, [pc, #4]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
 8002622:	e025      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
 8002624:	58024400 	.word	0x58024400
 8002628:	4b9a      	ldr	r3, [pc, #616]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4997      	ldr	r1, [pc, #604]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
 800263c:	e018      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	4b95      	ldr	r3, [pc, #596]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a94      	ldr	r2, [pc, #592]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fd83 	bl	8001154 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fd7f 	bl	8001154 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e2ed      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002664:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a9 	beq.w	80027d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267e:	4b85      	ldr	r3, [pc, #532]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002686:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002688:	4b82      	ldr	r3, [pc, #520]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d007      	beq.n	80026a4 <HAL_RCC_OscConfig+0x308>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b18      	cmp	r3, #24
 8002698:	d13a      	bne.n	8002710 <HAL_RCC_OscConfig+0x374>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d135      	bne.n	8002710 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a4:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_OscConfig+0x320>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e2c1      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026bc:	f7fe fd7a 	bl	80011b4 <HAL_GetREVID>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d817      	bhi.n	80026fa <HAL_RCC_OscConfig+0x35e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x348>
 80026d2:	4b70      	ldr	r3, [pc, #448]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026da:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e2:	e075      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e4:	4b6b      	ldr	r3, [pc, #428]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	069b      	lsls	r3, r3, #26
 80026f2:	4968      	ldr	r1, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f8:	e06a      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	4962      	ldr	r1, [pc, #392]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270e:	e05f      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d042      	beq.n	800279e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fd16 	bl	8001154 <HAL_GetTick>
 8002728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800272c:	f7fe fd12 	bl	8001154 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e280      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274a:	f7fe fd33 	bl	80011b4 <HAL_GetREVID>
 800274e:	4603      	mov	r3, r0
 8002750:	f241 0203 	movw	r2, #4099	; 0x1003
 8002754:	4293      	cmp	r3, r2
 8002756:	d817      	bhi.n	8002788 <HAL_RCC_OscConfig+0x3ec>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	2b20      	cmp	r3, #32
 800275e:	d108      	bne.n	8002772 <HAL_RCC_OscConfig+0x3d6>
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002768:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800276e:	6053      	str	r3, [r2, #4]
 8002770:	e02e      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
 8002772:	4b48      	ldr	r3, [pc, #288]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	069b      	lsls	r3, r3, #26
 8002780:	4944      	ldr	r1, [pc, #272]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
 8002786:	e023      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
 8002788:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	493f      	ldr	r1, [pc, #252]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
 800279c:	e018      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7fe fcd3 	bl	8001154 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027b2:	f7fe fccf 	bl	8001154 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e23d      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d036      	beq.n	800284a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d019      	beq.n	8002818 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fcb0 	bl	8001154 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe fcac 	bl	8001154 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e21a      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x45c>
 8002816:	e018      	b.n	800284a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fc96 	bl	8001154 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe fc92 	bl	8001154 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e200      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d039      	beq.n	80028ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01c      	beq.n	8002898 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002868:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800286a:	f7fe fc73 	bl	8001154 <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002872:	f7fe fc6f 	bl	8001154 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e1dd      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x4d6>
 8002890:	e01b      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
 8002892:	bf00      	nop
 8002894:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002898:	4b9b      	ldr	r3, [pc, #620]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a9a      	ldr	r2, [pc, #616]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800289e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fc56 	bl	8001154 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ac:	f7fe fc52 	bl	8001154 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1c0      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028be:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8081 	beq.w	80029da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x770>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a8b      	ldr	r2, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x770>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fc36 	bl	8001154 <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7fe fc32 	bl	8001154 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1a0      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fe:	4b83      	ldr	r3, [pc, #524]	; (8002b0c <HAL_RCC_OscConfig+0x770>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x584>
 8002912:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	4a7c      	ldr	r2, [pc, #496]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6713      	str	r3, [r2, #112]	; 0x70
 800291e:	e02d      	b.n	800297c <HAL_RCC_OscConfig+0x5e0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10c      	bne.n	8002942 <HAL_RCC_OscConfig+0x5a6>
 8002928:	4b77      	ldr	r3, [pc, #476]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a76      	ldr	r2, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	4b74      	ldr	r3, [pc, #464]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a73      	ldr	r2, [pc, #460]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x5e0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c8>
 800294a:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
 8002956:	4b6c      	ldr	r3, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a6b      	ldr	r2, [pc, #428]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6713      	str	r3, [r2, #112]	; 0x70
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0x5e0>
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	4b65      	ldr	r3, [pc, #404]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a64      	ldr	r2, [pc, #400]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe fbe6 	bl	8001154 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe fbe2 	bl	8001154 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e14e      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a2:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ee      	beq.n	800298c <HAL_RCC_OscConfig+0x5f0>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fbd0 	bl	8001154 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fbcc 	bl	8001154 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e138      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ce:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ee      	bne.n	80029b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 812d 	beq.w	8002c3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029e4:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ec:	2b18      	cmp	r3, #24
 80029ee:	f000 80bd 	beq.w	8002b6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f040 809e 	bne.w	8002b38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fba4 	bl	8001154 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fba0 	bl	8001154 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e10e      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a32:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_RCC_OscConfig+0x774>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4931      	ldr	r1, [pc, #196]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	628b      	str	r3, [r1, #40]	; 0x28
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	3b01      	subs	r3, #1
 8002a58:	025b      	lsls	r3, r3, #9
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	3b01      	subs	r3, #1
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a78:	4923      	ldr	r1, [pc, #140]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_OscConfig+0x778>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a96:	00d2      	lsls	r2, r2, #3
 8002a98:	491b      	ldr	r1, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f023 020c 	bic.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4917      	ldr	r1, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	f023 0202 	bic.w	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	4912      	ldr	r1, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fb29 	bl	8001154 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b04:	e011      	b.n	8002b2a <HAL_RCC_OscConfig+0x78e>
 8002b06:	bf00      	nop
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	58024800 	.word	0x58024800
 8002b10:	fffffc0c 	.word	0xfffffc0c
 8002b14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fb1c 	bl	8001154 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e08a      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x77c>
 8002b36:	e082      	b.n	8002c3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fb06 	bl	8001154 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fb02 	bl	8001154 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e070      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x7b0>
 8002b6a:	e068      	b.n	8002c3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b72:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d031      	beq.n	8002be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0203 	and.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d12a      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d122      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d11a      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0a5b      	lsrs	r3, r3, #9
 8002bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d111      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0e1b      	lsrs	r3, r3, #24
 8002bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e02b      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bf2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d01f      	beq.n	8002c3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c0a:	f7fe faa3 	bl	8001154 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c10:	bf00      	nop
 8002c12:	f7fe fa9f 	bl	8001154 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d0f9      	beq.n	8002c12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x8b0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c2a:	00d2      	lsls	r2, r2, #3
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3730      	adds	r7, #48	; 0x30
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	ffff0007 	.word	0xffff0007

08002c50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e19c      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d910      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 020f 	bic.w	r2, r3, #15
 8002c7a:	4985      	ldr	r1, [pc, #532]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b83      	ldr	r3, [pc, #524]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e184      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	4b7b      	ldr	r3, [pc, #492]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d908      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb0:	4b78      	ldr	r3, [pc, #480]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4975      	ldr	r1, [pc, #468]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d908      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	496a      	ldr	r1, [pc, #424]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d908      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d0c:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	495e      	ldr	r1, [pc, #376]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d908      	bls.n	8002d4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d3a:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4953      	ldr	r1, [pc, #332]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d908      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f023 020f 	bic.w	r2, r3, #15
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4947      	ldr	r1, [pc, #284]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d055      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4940      	ldr	r1, [pc, #256]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da0:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d121      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0f6      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d115      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0ea      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0de      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0d6      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f023 0207 	bic.w	r2, r3, #7
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4925      	ldr	r1, [pc, #148]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e02:	f7fe f9a7 	bl	8001154 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0a:	f7fe f9a3 	bl	8001154 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0be      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d1eb      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d208      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	490e      	ldr	r1, [pc, #56]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d214      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 020f 	bic.w	r2, r3, #15
 8002e76:	4906      	ldr	r1, [pc, #24]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e086      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
 8002e90:	52002000 	.word	0x52002000
 8002e94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d208      	bcs.n	8002ec6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4939      	ldr	r1, [pc, #228]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d208      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	492e      	ldr	r1, [pc, #184]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d208      	bcs.n	8002f22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4922      	ldr	r1, [pc, #136]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d208      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4917      	ldr	r1, [pc, #92]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f50:	f000 f834 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	4912      	ldr	r1, [pc, #72]	; (8002fac <HAL_RCC_ClockConfig+0x35c>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <HAL_RCC_ClockConfig+0x35c>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x360>)
 8002f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_RCC_ClockConfig+0x364>)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x368>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe f894 	bl	80010c0 <HAL_InitTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	080067f0 	.word	0x080067f0
 8002fb0:	24000004 	.word	0x24000004
 8002fb4:	24000000 	.word	0x24000000
 8002fb8:	24000008 	.word	0x24000008

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc2:	4bb3      	ldr	r3, [pc, #716]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fca:	2b18      	cmp	r3, #24
 8002fcc:	f200 8155 	bhi.w	800327a <HAL_RCC_GetSysClockFreq+0x2be>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	0800303d 	.word	0x0800303d
 8002fdc:	0800327b 	.word	0x0800327b
 8002fe0:	0800327b 	.word	0x0800327b
 8002fe4:	0800327b 	.word	0x0800327b
 8002fe8:	0800327b 	.word	0x0800327b
 8002fec:	0800327b 	.word	0x0800327b
 8002ff0:	0800327b 	.word	0x0800327b
 8002ff4:	0800327b 	.word	0x0800327b
 8002ff8:	08003063 	.word	0x08003063
 8002ffc:	0800327b 	.word	0x0800327b
 8003000:	0800327b 	.word	0x0800327b
 8003004:	0800327b 	.word	0x0800327b
 8003008:	0800327b 	.word	0x0800327b
 800300c:	0800327b 	.word	0x0800327b
 8003010:	0800327b 	.word	0x0800327b
 8003014:	0800327b 	.word	0x0800327b
 8003018:	08003069 	.word	0x08003069
 800301c:	0800327b 	.word	0x0800327b
 8003020:	0800327b 	.word	0x0800327b
 8003024:	0800327b 	.word	0x0800327b
 8003028:	0800327b 	.word	0x0800327b
 800302c:	0800327b 	.word	0x0800327b
 8003030:	0800327b 	.word	0x0800327b
 8003034:	0800327b 	.word	0x0800327b
 8003038:	0800306f 	.word	0x0800306f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800303c:	4b94      	ldr	r3, [pc, #592]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003048:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	4a90      	ldr	r2, [pc, #576]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800305a:	e111      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800305c:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800305e:	61bb      	str	r3, [r7, #24]
      break;
 8003060:	e10e      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003062:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003064:	61bb      	str	r3, [r7, #24]
      break;
 8003066:	e10b      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003068:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800306a:	61bb      	str	r3, [r7, #24]
      break;
 800306c:	e108      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003078:	4b85      	ldr	r3, [pc, #532]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003082:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003084:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800308e:	4b80      	ldr	r3, [pc, #512]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	08db      	lsrs	r3, r3, #3
 8003094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80e1 	beq.w	8003274 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f000 8083 	beq.w	80031c0 <HAL_RCC_GetSysClockFreq+0x204>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	f200 80a1 	bhi.w	8003204 <HAL_RCC_GetSysClockFreq+0x248>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x114>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d056      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ce:	e099      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d0:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02d      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030dc:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	4a6b      	ldr	r2, [pc, #428]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003116:	ed97 6a02 	vldr	s12, [r7, #8]
 800311a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800311e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800312a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003136:	e087      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315a:	ed97 6a02 	vldr	s12, [r7, #8]
 800315e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800316a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800316e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800317a:	e065      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003186:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800318a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318e:	4b40      	ldr	r3, [pc, #256]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319e:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031be:	e043      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003202:	e021      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003226:	ed97 6a02 	vldr	s12, [r7, #8]
 800322a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800322e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800323a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003246:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	0a5b      	lsrs	r3, r3, #9
 800324e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003252:	3301      	adds	r3, #1
 8003254:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003260:	edd7 6a07 	vldr	s13, [r7, #28]
 8003264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800326c:	ee17 3a90 	vmov	r3, s15
 8003270:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003272:	e005      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
      break;
 8003278:	e002      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800327c:	61bb      	str	r3, [r7, #24]
      break;
 800327e:	bf00      	nop
  }

  return sysclockfreq;
 8003280:	69bb      	ldr	r3, [r7, #24]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	58024400 	.word	0x58024400
 8003294:	03d09000 	.word	0x03d09000
 8003298:	003d0900 	.word	0x003d0900
 800329c:	007a1200 	.word	0x007a1200
 80032a0:	46000000 	.word	0x46000000
 80032a4:	4c742400 	.word	0x4c742400
 80032a8:	4a742400 	.word	0x4a742400
 80032ac:	4af42400 	.word	0x4af42400

080032b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032b6:	f7ff fe81 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_GetHCLKFreq+0x50>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490f      	ldr	r1, [pc, #60]	; (8003304 <HAL_RCC_GetHCLKFreq+0x54>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_RCC_GetHCLKFreq+0x50>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_GetHCLKFreq+0x54>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_RCC_GetHCLKFreq+0x58>)
 80032ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ee:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_RCC_GetHCLKFreq+0x5c>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <HAL_RCC_GetHCLKFreq+0x58>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58024400 	.word	0x58024400
 8003304:	080067f0 	.word	0x080067f0
 8003308:	24000004 	.word	0x24000004
 800330c:	24000000 	.word	0x24000000

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003314:	f7ff ffcc 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4904      	ldr	r1, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	58024400 	.word	0x58024400
 8003338:	080067f0 	.word	0x080067f0

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003340:	f7ff ffb6 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	58024400 	.word	0x58024400
 8003364:	080067f0 	.word	0x080067f0

08003368 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800336c:	b0ca      	sub	sp, #296	; 0x128
 800336e:	af00      	add	r7, sp, #0
 8003370:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003374:	2300      	movs	r3, #0
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800337a:	2300      	movs	r3, #0
 800337c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800338c:	2500      	movs	r5, #0
 800338e:	ea54 0305 	orrs.w	r3, r4, r5
 8003392:	d049      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800339e:	d02f      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033a4:	d828      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033aa:	d01a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b0:	d822      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ba:	d007      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033bc:	e01c      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033be:	4bb8      	ldr	r3, [pc, #736]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4ab7      	ldr	r2, [pc, #732]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ca:	e01a      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d0:	3308      	adds	r3, #8
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 fc8f 	bl	8004cf8 <RCCEx_PLL2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033e0:	e00f      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	3328      	adds	r3, #40	; 0x28
 80033e8:	2102      	movs	r1, #2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f001 fd36 	bl	8004e5c <RCCEx_PLL3_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033f6:	e004      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033fe:	e000      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800340a:	4ba5      	ldr	r3, [pc, #660]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003418:	4aa1      	ldr	r2, [pc, #644]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341a:	430b      	orrs	r3, r1
 800341c:	6513      	str	r3, [r2, #80]	; 0x50
 800341e:	e003      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003424:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003434:	f04f 0900 	mov.w	r9, #0
 8003438:	ea58 0309 	orrs.w	r3, r8, r9
 800343c:	d047      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	2b04      	cmp	r3, #4
 8003446:	d82a      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003465 	.word	0x08003465
 8003454:	08003473 	.word	0x08003473
 8003458:	08003489 	.word	0x08003489
 800345c:	080034a7 	.word	0x080034a7
 8003460:	080034a7 	.word	0x080034a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b8e      	ldr	r3, [pc, #568]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4a8d      	ldr	r2, [pc, #564]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003470:	e01a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003476:	3308      	adds	r3, #8
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fc3c 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003486:	e00f      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348c:	3328      	adds	r3, #40	; 0x28
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fce3 	bl	8004e5c <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349c:	e004      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4b7b      	ldr	r3, [pc, #492]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f023 0107 	bic.w	r1, r3, #7
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6513      	str	r3, [r2, #80]	; 0x50
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80034da:	f04f 0b00 	mov.w	fp, #0
 80034de:	ea5a 030b 	orrs.w	r3, sl, fp
 80034e2:	d04c      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d030      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d829      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034f6:	2bc0      	cmp	r3, #192	; 0xc0
 80034f8:	d02d      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034fa:	2bc0      	cmp	r3, #192	; 0xc0
 80034fc:	d825      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d018      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d821      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d007      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800350e:	e01c      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003510:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	4a62      	ldr	r2, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800351c:	e01c      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003522:	3308      	adds	r3, #8
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fbe6 	bl	8004cf8 <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003538:	3328      	adds	r3, #40	; 0x28
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fc8d 	bl	8004e5c <RCCEx_PLL3_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003548:	e006      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003550:	e002      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	4a4c      	ldr	r2, [pc, #304]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003570:	430b      	orrs	r3, r1
 8003572:	6513      	str	r3, [r2, #80]	; 0x50
 8003574:	e003      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800357a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800358a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800358e:	2300      	movs	r3, #0
 8003590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003594:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003598:	460b      	mov	r3, r1
 800359a:	4313      	orrs	r3, r2
 800359c:	d053      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035aa:	d035      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b0:	d82e      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035b6:	d031      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035bc:	d828      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d01a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c8:	d822      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d2:	d007      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035d4:	e01c      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e2:	e01c      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e8:	3308      	adds	r3, #8
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fb83 	bl	8004cf8 <RCCEx_PLL2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035f8:	e011      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fe:	3328      	adds	r3, #40	; 0x28
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fc2a 	bl	8004e5c <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800360e:	e006      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003616:	e002      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800361c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003636:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6593      	str	r3, [r2, #88]	; 0x58
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003652:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800365c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d056      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800366e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003672:	d038      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003678:	d831      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800367a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800367e:	d034      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003684:	d82b      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368a:	d01d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800368c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003690:	d825      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800369c:	e01f      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800369e:	bf00      	nop
 80036a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4ba2      	ldr	r3, [pc, #648]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4aa1      	ldr	r2, [pc, #644]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b0:	e01c      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b6:	3308      	adds	r3, #8
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fb1c 	bl	8004cf8 <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036c6:	e011      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036cc:	3328      	adds	r3, #40	; 0x28
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fbc3 	bl	8004e5c <RCCEx_PLL3_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036f4:	4b8e      	ldr	r3, [pc, #568]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003700:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003704:	4a8a      	ldr	r2, [pc, #552]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003706:	430b      	orrs	r3, r1
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	e003      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800372a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800372e:	460b      	mov	r3, r1
 8003730:	4313      	orrs	r3, r2
 8003732:	d03a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	2b30      	cmp	r3, #48	; 0x30
 800373c:	d01f      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d819      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003742:	2b20      	cmp	r3, #32
 8003744:	d00c      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003746:	2b20      	cmp	r3, #32
 8003748:	d815      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d019      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800374e:	2b10      	cmp	r3, #16
 8003750:	d111      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003752:	4b77      	ldr	r3, [pc, #476]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800375e:	e011      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003764:	3308      	adds	r3, #8
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f001 fac5 	bl	8004cf8 <RCCEx_PLL2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800377c:	e002      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800379c:	430b      	orrs	r3, r1
 800379e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80037b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80037c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d051      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d4:	d035      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037da:	d82e      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037e0:	d031      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037e6:	d828      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ec:	d01a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f2:	d822      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d007      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037fe:	e01c      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800380c:	e01c      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003812:	3308      	adds	r3, #8
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fa6e 	bl	8004cf8 <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003822:	e011      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	3328      	adds	r3, #40	; 0x28
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fb15 	bl	8004e5c <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003838:	e006      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003840:	e002      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	4a34      	ldr	r2, [pc, #208]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003860:	430b      	orrs	r3, r1
 8003862:	6513      	str	r3, [r2, #80]	; 0x50
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800387a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003884:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d056      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003898:	d033      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800389a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389e:	d82c      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a4:	d02f      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038aa:	d826      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b0:	d02b      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b6:	d820      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038bc:	d012      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c2:	d81a      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d115      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d2:	3308      	adds	r3, #8
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fa0e 	bl	8004cf8 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038e2:	e015      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	3328      	adds	r3, #40	; 0x28
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fab5 	bl	8004e5c <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038f8:	e00a      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003900:	e006      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003902:	bf00      	nop
 8003904:	e004      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800390e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003926:	4a02      	ldr	r2, [pc, #8]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6513      	str	r3, [r2, #80]	; 0x50
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003952:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d055      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003968:	d033      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800396a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396e:	d82c      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d02f      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d826      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800397c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003980:	d02b      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003986:	d820      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398c:	d012      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800398e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003992:	d81a      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d022      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399c:	d115      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a2:	3308      	adds	r3, #8
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 f9a6 	bl	8004cf8 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039b2:	e015      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b8:	3328      	adds	r3, #40	; 0x28
 80039ba:	2101      	movs	r1, #1
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fa4d 	bl	8004e5c <RCCEx_PLL3_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039c8:	e00a      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039d2:	bf00      	nop
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039e8:	4ba3      	ldr	r3, [pc, #652]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039f8:	4a9f      	ldr	r2, [pc, #636]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6593      	str	r3, [r2, #88]	; 0x58
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d037      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a32:	d00e      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a38:	d816      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a42:	d111      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b8c      	ldr	r3, [pc, #560]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a8b      	ldr	r2, [pc, #556]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	3308      	adds	r3, #8
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f94c 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a7b      	ldr	r2, [pc, #492]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003aae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d039      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d81c      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003b05 	.word	0x08003b05
 8003acc:	08003ad9 	.word	0x08003ad9
 8003ad0:	08003ae7 	.word	0x08003ae7
 8003ad4:	08003b05 	.word	0x08003b05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a66      	ldr	r2, [pc, #408]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ae4:	e00f      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aea:	3308      	adds	r3, #8
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f902 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003afa:	e004      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b0e:	4b5a      	ldr	r3, [pc, #360]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	f023 0103 	bic.w	r1, r3, #3
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	4a56      	ldr	r2, [pc, #344]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b22:	e003      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f000 809f 	beq.w	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4a      	ldr	r2, [pc, #296]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fafb 	bl	8001154 <HAL_GetTick>
 8003b5e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b62:	e00b      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b64:	f7fd faf6 	bl	8001154 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d903      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7a:	e005      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ed      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d179      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b90:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b9c:	4053      	eors	r3, r2
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba6:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb2:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a30      	ldr	r2, [pc, #192]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bca:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d118      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd fab8 	bl	8001154 <HAL_GetTick>
 8003be4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be8:	e00d      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fd fab3 	bl	8001154 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bf4:	1ad2      	subs	r2, r2, r3
 8003bf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d903      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003c04:	e005      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0eb      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d129      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2a:	d10e      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c3c:	091a      	lsrs	r2, r3, #4
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6113      	str	r3, [r2, #16]
 8003c48:	e005      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c54:	6113      	str	r3, [r2, #16]
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	e00e      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003c76:	e009      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	58024800 	.word	0x58024800
 8003c80:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f002 0301 	and.w	r3, r2, #1
 8003c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ca2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f000 8089 	beq.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb4:	2b28      	cmp	r3, #40	; 0x28
 8003cb6:	d86b      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003d99 	.word	0x08003d99
 8003cc4:	08003d91 	.word	0x08003d91
 8003cc8:	08003d91 	.word	0x08003d91
 8003ccc:	08003d91 	.word	0x08003d91
 8003cd0:	08003d91 	.word	0x08003d91
 8003cd4:	08003d91 	.word	0x08003d91
 8003cd8:	08003d91 	.word	0x08003d91
 8003cdc:	08003d91 	.word	0x08003d91
 8003ce0:	08003d65 	.word	0x08003d65
 8003ce4:	08003d91 	.word	0x08003d91
 8003ce8:	08003d91 	.word	0x08003d91
 8003cec:	08003d91 	.word	0x08003d91
 8003cf0:	08003d91 	.word	0x08003d91
 8003cf4:	08003d91 	.word	0x08003d91
 8003cf8:	08003d91 	.word	0x08003d91
 8003cfc:	08003d91 	.word	0x08003d91
 8003d00:	08003d7b 	.word	0x08003d7b
 8003d04:	08003d91 	.word	0x08003d91
 8003d08:	08003d91 	.word	0x08003d91
 8003d0c:	08003d91 	.word	0x08003d91
 8003d10:	08003d91 	.word	0x08003d91
 8003d14:	08003d91 	.word	0x08003d91
 8003d18:	08003d91 	.word	0x08003d91
 8003d1c:	08003d91 	.word	0x08003d91
 8003d20:	08003d99 	.word	0x08003d99
 8003d24:	08003d91 	.word	0x08003d91
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d91 	.word	0x08003d91
 8003d30:	08003d91 	.word	0x08003d91
 8003d34:	08003d91 	.word	0x08003d91
 8003d38:	08003d91 	.word	0x08003d91
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d99 	.word	0x08003d99
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d91 	.word	0x08003d91
 8003d4c:	08003d91 	.word	0x08003d91
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003d91 	.word	0x08003d91
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003d99 	.word	0x08003d99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d68:	3308      	adds	r3, #8
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 ffc3 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d78:	e00f      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7e:	3328      	adds	r3, #40	; 0x28
 8003d80:	2101      	movs	r1, #1
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f86a 	bl	8004e5c <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d8e:	e004      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003da2:	4bbf      	ldr	r3, [pc, #764]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db0:	4abb      	ldr	r2, [pc, #748]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6553      	str	r3, [r2, #84]	; 0x54
 8003db6:	e003      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f002 0302 	and.w	r3, r2, #2
 8003dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003dd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	d041      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d824      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e3d 	.word	0x08003e3d
 8003df4:	08003e09 	.word	0x08003e09
 8003df8:	08003e1f 	.word	0x08003e1f
 8003dfc:	08003e3d 	.word	0x08003e3d
 8003e00:	08003e3d 	.word	0x08003e3d
 8003e04:	08003e3d 	.word	0x08003e3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 ff71 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	3328      	adds	r3, #40	; 0x28
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 f818 	bl	8004e5c <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e46:	4b96      	ldr	r3, [pc, #600]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f023 0107 	bic.w	r1, r3, #7
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e54:	4a92      	ldr	r2, [pc, #584]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6553      	str	r3, [r2, #84]	; 0x54
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f002 0304 	and.w	r3, r2, #4
 8003e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d044      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d825      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ee5 	.word	0x08003ee5
 8003e9c:	08003eb1 	.word	0x08003eb1
 8003ea0:	08003ec7 	.word	0x08003ec7
 8003ea4:	08003ee5 	.word	0x08003ee5
 8003ea8:	08003ee5 	.word	0x08003ee5
 8003eac:	08003ee5 	.word	0x08003ee5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 ff1d 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e00f      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	3328      	adds	r3, #40	; 0x28
 8003ecc:	2101      	movs	r1, #1
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 ffc4 	bl	8004e5c <RCCEx_PLL3_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eda:	e004      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eee:	4b6c      	ldr	r3, [pc, #432]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f023 0107 	bic.w	r1, r3, #7
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	4a68      	ldr	r2, [pc, #416]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f002 0320 	and.w	r3, r2, #32
 8003f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d055      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3a:	d033      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f40:	d82c      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d02f      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d826      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f52:	d02b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f58:	d820      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f5e:	d012      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f64:	d81a      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d022      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f74:	3308      	adds	r3, #8
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 febd 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f84:	e015      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	3328      	adds	r3, #40	; 0x28
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ff64 	bl	8004e5c <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fa2:	e006      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fba:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6553      	str	r3, [r2, #84]	; 0x54
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ff0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d058      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004002:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004006:	d033      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004008:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800400c:	d82c      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004012:	d02f      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d826      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800401a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401e:	d02b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004024:	d820      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402a:	d012      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d81a      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d022      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d115      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004040:	3308      	adds	r3, #8
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fe57 	bl	8004cf8 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004050:	e015      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	3328      	adds	r3, #40	; 0x28
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fefe 	bl	8004e5c <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004066:	e00a      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800406e:	e006      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004070:	bf00      	nop
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004096:	4a02      	ldr	r2, [pc, #8]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6593      	str	r3, [r2, #88]	; 0x58
 800409c:	e006      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800409e:	bf00      	nop
 80040a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80040b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040c6:	460b      	mov	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	d055      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040d8:	d033      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040de:	d82c      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d02f      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d826      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f0:	d02b      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80040f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f6:	d820      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fc:	d012      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80040fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004102:	d81a      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d022      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410c:	d115      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	3308      	adds	r3, #8
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fdee 	bl	8004cf8 <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004122:	e015      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004128:	3328      	adds	r3, #40	; 0x28
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fe95 	bl	8004e5c <RCCEx_PLL3_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004138:	e00a      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004142:	bf00      	nop
 8004144:	e004      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800414e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004158:	4ba1      	ldr	r3, [pc, #644]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004168:	4a9d      	ldr	r2, [pc, #628]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416a:	430b      	orrs	r3, r1
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
 800416e:	e003      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f002 0308 	and.w	r3, r2, #8
 8004184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800418e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004192:	460b      	mov	r3, r1
 8004194:	4313      	orrs	r3, r2
 8004196:	d01e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041aa:	3328      	adds	r3, #40	; 0x28
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fe54 	bl	8004e5c <RCCEx_PLL3_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041c0:	4b87      	ldr	r3, [pc, #540]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d0:	4a83      	ldr	r2, [pc, #524]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f002 0310 	and.w	r3, r2, #16
 80041e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80041f0:	460b      	mov	r3, r1
 80041f2:	4313      	orrs	r3, r2
 80041f4:	d01e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004202:	d10c      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	3328      	adds	r3, #40	; 0x28
 800420a:	2102      	movs	r1, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe25 	bl	8004e5c <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800421e:	4b70      	ldr	r3, [pc, #448]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422e:	4a6c      	ldr	r2, [pc, #432]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800424a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800424e:	460b      	mov	r3, r1
 8004250:	4313      	orrs	r3, r2
 8004252:	d03e      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800425c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004260:	d022      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004266:	d81b      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d00b      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004272:	e015      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004278:	3308      	adds	r3, #8
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fd3b 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004288:	e00f      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	3328      	adds	r3, #40	; 0x28
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fde2 	bl	8004e5c <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042c2:	4a47      	ldr	r2, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6593      	str	r3, [r2, #88]	; 0x58
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80042de:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e0:	2300      	movs	r3, #0
 80042e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d03b      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042fa:	d01f      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80042fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004300:	d818      	bhi.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004306:	d003      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800430c:	d007      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a32      	ldr	r2, [pc, #200]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800431c:	e00f      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	3328      	adds	r3, #40	; 0x28
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fd98 	bl	8004e5c <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004332:	e004      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800433c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004358:	430b      	orrs	r3, r1
 800435a:	6553      	str	r3, [r2, #84]	; 0x54
 800435c:	e003      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004372:	673b      	str	r3, [r7, #112]	; 0x70
 8004374:	2300      	movs	r3, #0
 8004376:	677b      	str	r3, [r7, #116]	; 0x74
 8004378:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800437c:	460b      	mov	r3, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	d034      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d007      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043a0:	e00e      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a6:	3308      	adds	r3, #8
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fca4 	bl	8004cf8 <RCCEx_PLL2_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d6:	4a02      	ldr	r2, [pc, #8]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d8:	430b      	orrs	r3, r1
 80043da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043de:	bf00      	nop
 80043e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80043f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043fa:	2300      	movs	r3, #0
 80043fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d00c      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	3328      	adds	r3, #40	; 0x28
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fd23 	bl	8004e5c <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800442e:	663b      	str	r3, [r7, #96]	; 0x60
 8004430:	2300      	movs	r3, #0
 8004432:	667b      	str	r3, [r7, #100]	; 0x64
 8004434:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d038      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444a:	d018      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800444c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004450:	d811      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004456:	d014      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445c:	d80b      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004466:	d106      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4bc3      	ldr	r3, [pc, #780]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4ac2      	ldr	r2, [pc, #776]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004490:	4bb9      	ldr	r3, [pc, #740]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a0:	4ab5      	ldr	r2, [pc, #724]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6553      	str	r3, [r2, #84]	; 0x54
 80044a6:	e003      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044be:	2300      	movs	r3, #0
 80044c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044cc:	4baa      	ldr	r3, [pc, #680]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	4aa7      	ldr	r2, [pc, #668]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
 80044ee:	2300      	movs	r3, #0
 80044f0:	657b      	str	r3, [r7, #84]	; 0x54
 80044f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044fc:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004508:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800450c:	4a9a      	ldr	r2, [pc, #616]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450e:	430b      	orrs	r3, r1
 8004510:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004520:	2300      	movs	r3, #0
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800452e:	4b92      	ldr	r3, [pc, #584]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004532:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453c:	4a8e      	ldr	r2, [pc, #568]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800454e:	643b      	str	r3, [r7, #64]	; 0x40
 8004550:	2300      	movs	r3, #0
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
 8004554:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800455e:	4b86      	ldr	r3, [pc, #536]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	4a85      	ldr	r2, [pc, #532]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004568:	6113      	str	r3, [r2, #16]
 800456a:	4b83      	ldr	r3, [pc, #524]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456c:	6919      	ldr	r1, [r3, #16]
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004576:	4a80      	ldr	r2, [pc, #512]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004578:	430b      	orrs	r3, r1
 800457a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004588:	63bb      	str	r3, [r7, #56]	; 0x38
 800458a:	2300      	movs	r3, #0
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004598:	4b77      	ldr	r3, [pc, #476]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	4a74      	ldr	r2, [pc, #464]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ba:	2300      	movs	r3, #0
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
 80045be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045c8:	4b6b      	ldr	r3, [pc, #428]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045cc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d8:	4a67      	ldr	r2, [pc, #412]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045da:	430b      	orrs	r3, r1
 80045dc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	2100      	movs	r1, #0
 80045e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80045f4:	460b      	mov	r3, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	d011      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	3308      	adds	r3, #8
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fb78 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800461a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	2100      	movs	r1, #0
 8004628:	6239      	str	r1, [r7, #32]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d011      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463e:	3308      	adds	r3, #8
 8004640:	2101      	movs	r1, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fb58 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	2100      	movs	r1, #0
 8004668:	61b9      	str	r1, [r7, #24]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d011      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	3308      	adds	r3, #8
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fb38 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	2100      	movs	r1, #0
 80046a8:	6139      	str	r1, [r7, #16]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d011      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	3328      	adds	r3, #40	; 0x28
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fbca 	bl	8004e5c <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	2100      	movs	r1, #0
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046f4:	460b      	mov	r3, r1
 80046f6:	4313      	orrs	r3, r2
 80046f8:	d011      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fe:	3328      	adds	r3, #40	; 0x28
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fbaa 	bl	8004e5c <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800470e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800471a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	2100      	movs	r1, #0
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d011      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473e:	3328      	adds	r3, #40	; 0x28
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb8a 	bl	8004e5c <RCCEx_PLL3_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800475e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
}
 800476c:	4618      	mov	r0, r3
 800476e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004772:	46bd      	mov	sp, r7
 8004774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004778:	58024400 	.word	0x58024400

0800477c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004780:	f7fe fd96 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	58024400 	.word	0x58024400
 80047a4:	080067f0 	.word	0x080067f0

080047a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047b0:	4ba1      	ldr	r3, [pc, #644]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047ba:	4b9f      	ldr	r3, [pc, #636]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	0b1b      	lsrs	r3, r3, #12
 80047c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047c6:	4b9c      	ldr	r3, [pc, #624]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047d2:	4b99      	ldr	r3, [pc, #612]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	08db      	lsrs	r3, r3, #3
 80047d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	fb02 f303 	mul.w	r3, r2, r3
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8111 	beq.w	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	f000 8083 	beq.w	8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f200 80a1 	bhi.w	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d056      	beq.n	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004812:	e099      	b.n	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004814:	4b88      	ldr	r3, [pc, #544]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02d      	beq.n	800487c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004820:	4b85      	ldr	r3, [pc, #532]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	08db      	lsrs	r3, r3, #3
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	4a84      	ldr	r2, [pc, #528]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
 8004830:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484a:	4b7b      	ldr	r3, [pc, #492]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a03 	vldr	s12, [r7, #12]
 800485e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800487a:	e087      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048be:	e065      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004902:	e043      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	4b48      	ldr	r3, [pc, #288]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	ed97 6a03 	vldr	s12, [r7, #12]
 800492a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004946:	e021      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800498c:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	0a5b      	lsrs	r3, r3, #9
 8004992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b2:	ee17 2a90 	vmov	r2, s15
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e0:	ee17 2a90 	vmov	r2, s15
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	0e1b      	lsrs	r3, r3, #24
 80049ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0e:	ee17 2a90 	vmov	r2, s15
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a16:	e008      	b.n	8004a2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]
}
 8004a2a:	bf00      	nop
 8004a2c:	3724      	adds	r7, #36	; 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	03d09000 	.word	0x03d09000
 8004a40:	46000000 	.word	0x46000000
 8004a44:	4c742400 	.word	0x4c742400
 8004a48:	4a742400 	.word	0x4a742400
 8004a4c:	4af42400 	.word	0x4af42400

08004a50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a58:	4ba1      	ldr	r3, [pc, #644]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a62:	4b9f      	ldr	r3, [pc, #636]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	0d1b      	lsrs	r3, r3, #20
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a6e:	4b9c      	ldr	r3, [pc, #624]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a7a:	4b99      	ldr	r3, [pc, #612]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	08db      	lsrs	r3, r3, #3
 8004a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8111 	beq.w	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	f000 8083 	beq.w	8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f200 80a1 	bhi.w	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d056      	beq.n	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004aba:	e099      	b.n	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004abc:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02d      	beq.n	8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ac8:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	08db      	lsrs	r3, r3, #3
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	4a84      	ldr	r2, [pc, #528]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b7b      	ldr	r3, [pc, #492]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b22:	e087      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b66:	e065      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7a:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004baa:	e043      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bbe:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bee:	e021      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c34:	4b2a      	ldr	r3, [pc, #168]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	0a5b      	lsrs	r3, r3, #9
 8004c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5a:	ee17 2a90 	vmov	r2, s15
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c88:	ee17 2a90 	vmov	r2, s15
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb6:	ee17 2a90 	vmov	r2, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	3724      	adds	r7, #36	; 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	03d09000 	.word	0x03d09000
 8004ce8:	46000000 	.word	0x46000000
 8004cec:	4c742400 	.word	0x4c742400
 8004cf0:	4a742400 	.word	0x4a742400
 8004cf4:	4af42400 	.word	0x4af42400

08004cf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d06:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d101      	bne.n	8004d16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e099      	b.n	8004e4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d16:	4b4f      	ldr	r3, [pc, #316]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a4e      	ldr	r2, [pc, #312]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fc fa17 	bl	8001154 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2a:	f7fc fa13 	bl	8001154 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e086      	b.n	8004e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d3c:	4b45      	ldr	r3, [pc, #276]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d48:	4b42      	ldr	r3, [pc, #264]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	031b      	lsls	r3, r3, #12
 8004d56:	493f      	ldr	r1, [pc, #252]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	025b      	lsls	r3, r3, #9
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d8c:	4931      	ldr	r1, [pc, #196]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	492d      	ldr	r1, [pc, #180]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	f023 0220 	bic.w	r2, r3, #32
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4928      	ldr	r1, [pc, #160]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004db6:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f023 0310 	bic.w	r3, r3, #16
 8004dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <RCCEx_PLL2_Config+0x160>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	69d2      	ldr	r2, [r2, #28]
 8004dce:	00d2      	lsls	r2, r2, #3
 8004dd0:	4920      	ldr	r1, [pc, #128]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f043 0310 	orr.w	r3, r3, #16
 8004de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004de8:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004df4:	e00f      	b.n	8004e16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d106      	bne.n	8004e0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dfc:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	4a14      	ldr	r2, [pc, #80]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e08:	e005      	b.n	8004e16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e16:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a0e      	ldr	r2, [pc, #56]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e22:	f7fc f997 	bl	8001154 <HAL_GetTick>
 8004e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e28:	e008      	b.n	8004e3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e2a:	f7fc f993 	bl	8001154 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	58024400 	.word	0x58024400
 8004e58:	ffff0007 	.word	0xffff0007

08004e5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e6a:	4b53      	ldr	r3, [pc, #332]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d101      	bne.n	8004e7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e099      	b.n	8004fae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e7a:	4b4f      	ldr	r3, [pc, #316]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a4e      	ldr	r2, [pc, #312]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fc f965 	bl	8001154 <HAL_GetTick>
 8004e8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e8e:	f7fc f961 	bl	8001154 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e086      	b.n	8004fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ea0:	4b45      	ldr	r3, [pc, #276]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004eac:	4b42      	ldr	r3, [pc, #264]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	051b      	lsls	r3, r3, #20
 8004eba:	493f      	ldr	r1, [pc, #252]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	628b      	str	r3, [r1, #40]	; 0x28
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	025b      	lsls	r3, r3, #9
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	061b      	lsls	r3, r3, #24
 8004eec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ef0:	4931      	ldr	r1, [pc, #196]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ef6:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	492d      	ldr	r1, [pc, #180]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f08:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4928      	ldr	r1, [pc, #160]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f1a:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4a26      	ldr	r2, [pc, #152]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <RCCEx_PLL3_Config+0x160>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	69d2      	ldr	r2, [r2, #28]
 8004f32:	00d2      	lsls	r2, r2, #3
 8004f34:	4920      	ldr	r1, [pc, #128]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f3a:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f58:	e00f      	b.n	8004f7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d106      	bne.n	8004f6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f60:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f6c:	e005      	b.n	8004f7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	4a11      	ldr	r2, [pc, #68]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fc f8e5 	bl	8001154 <HAL_GetTick>
 8004f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f8c:	e008      	b.n	8004fa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f8e:	f7fc f8e1 	bl	8001154 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e006      	b.n	8004fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	ffff0007 	.word	0xffff0007

08004fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e042      	b.n	8005058 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fb fee5 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2224      	movs	r2, #36	; 0x24
 8004fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f82c 	bl	8005060 <UART_SetConfig>
 8005008:	4603      	mov	r3, r0
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e022      	b.n	8005058 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fd88 	bl	8005b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800502e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800503e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fe0f 	bl	8005c74 <UART_CheckIdleState>
 8005056:	4603      	mov	r3, r0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005064:	b092      	sub	sp, #72	; 0x48
 8005066:	af00      	add	r7, sp, #0
 8005068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	4313      	orrs	r3, r2
 8005086:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4bbe      	ldr	r3, [pc, #760]	; (8005388 <UART_SetConfig+0x328>)
 8005090:	4013      	ands	r3, r2
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005098:	430b      	orrs	r3, r1
 800509a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4ab3      	ldr	r2, [pc, #716]	; (800538c <UART_SetConfig+0x32c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c8:	4313      	orrs	r3, r2
 80050ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	4baf      	ldr	r3, [pc, #700]	; (8005390 <UART_SetConfig+0x330>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050dc:	430b      	orrs	r3, r1
 80050de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f023 010f 	bic.w	r1, r3, #15
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4aa6      	ldr	r2, [pc, #664]	; (8005394 <UART_SetConfig+0x334>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d177      	bne.n	80051f0 <UART_SetConfig+0x190>
 8005100:	4ba5      	ldr	r3, [pc, #660]	; (8005398 <UART_SetConfig+0x338>)
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005108:	2b28      	cmp	r3, #40	; 0x28
 800510a:	d86d      	bhi.n	80051e8 <UART_SetConfig+0x188>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0xb4>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	080051b9 	.word	0x080051b9
 8005118:	080051e9 	.word	0x080051e9
 800511c:	080051e9 	.word	0x080051e9
 8005120:	080051e9 	.word	0x080051e9
 8005124:	080051e9 	.word	0x080051e9
 8005128:	080051e9 	.word	0x080051e9
 800512c:	080051e9 	.word	0x080051e9
 8005130:	080051e9 	.word	0x080051e9
 8005134:	080051c1 	.word	0x080051c1
 8005138:	080051e9 	.word	0x080051e9
 800513c:	080051e9 	.word	0x080051e9
 8005140:	080051e9 	.word	0x080051e9
 8005144:	080051e9 	.word	0x080051e9
 8005148:	080051e9 	.word	0x080051e9
 800514c:	080051e9 	.word	0x080051e9
 8005150:	080051e9 	.word	0x080051e9
 8005154:	080051c9 	.word	0x080051c9
 8005158:	080051e9 	.word	0x080051e9
 800515c:	080051e9 	.word	0x080051e9
 8005160:	080051e9 	.word	0x080051e9
 8005164:	080051e9 	.word	0x080051e9
 8005168:	080051e9 	.word	0x080051e9
 800516c:	080051e9 	.word	0x080051e9
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051d1 	.word	0x080051d1
 8005178:	080051e9 	.word	0x080051e9
 800517c:	080051e9 	.word	0x080051e9
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051e9 	.word	0x080051e9
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051d9 	.word	0x080051d9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e222      	b.n	8005606 <UART_SetConfig+0x5a6>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e21e      	b.n	8005606 <UART_SetConfig+0x5a6>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e21a      	b.n	8005606 <UART_SetConfig+0x5a6>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e216      	b.n	8005606 <UART_SetConfig+0x5a6>
 80051d8:	2320      	movs	r3, #32
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e212      	b.n	8005606 <UART_SetConfig+0x5a6>
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e20e      	b.n	8005606 <UART_SetConfig+0x5a6>
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e20a      	b.n	8005606 <UART_SetConfig+0x5a6>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a69      	ldr	r2, [pc, #420]	; (800539c <UART_SetConfig+0x33c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d130      	bne.n	800525c <UART_SetConfig+0x1fc>
 80051fa:	4b67      	ldr	r3, [pc, #412]	; (8005398 <UART_SetConfig+0x338>)
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	2b05      	cmp	r3, #5
 8005204:	d826      	bhi.n	8005254 <UART_SetConfig+0x1f4>
 8005206:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x1ac>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005225 	.word	0x08005225
 8005210:	0800522d 	.word	0x0800522d
 8005214:	08005235 	.word	0x08005235
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005245 	.word	0x08005245
 8005220:	0800524d 	.word	0x0800524d
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e1ec      	b.n	8005606 <UART_SetConfig+0x5a6>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e1e8      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e1e4      	b.n	8005606 <UART_SetConfig+0x5a6>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e1e0      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005244:	2320      	movs	r3, #32
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e1dc      	b.n	8005606 <UART_SetConfig+0x5a6>
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e1d8      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e1d4      	b.n	8005606 <UART_SetConfig+0x5a6>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a4f      	ldr	r2, [pc, #316]	; (80053a0 <UART_SetConfig+0x340>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d130      	bne.n	80052c8 <UART_SetConfig+0x268>
 8005266:	4b4c      	ldr	r3, [pc, #304]	; (8005398 <UART_SetConfig+0x338>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b05      	cmp	r3, #5
 8005270:	d826      	bhi.n	80052c0 <UART_SetConfig+0x260>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x218>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	08005291 	.word	0x08005291
 800527c:	08005299 	.word	0x08005299
 8005280:	080052a1 	.word	0x080052a1
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e1b6      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e1b2      	b.n	8005606 <UART_SetConfig+0x5a6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e1ae      	b.n	8005606 <UART_SetConfig+0x5a6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e1aa      	b.n	8005606 <UART_SetConfig+0x5a6>
 80052b0:	2320      	movs	r3, #32
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e1a6      	b.n	8005606 <UART_SetConfig+0x5a6>
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e1a2      	b.n	8005606 <UART_SetConfig+0x5a6>
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e19e      	b.n	8005606 <UART_SetConfig+0x5a6>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a35      	ldr	r2, [pc, #212]	; (80053a4 <UART_SetConfig+0x344>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d130      	bne.n	8005334 <UART_SetConfig+0x2d4>
 80052d2:	4b31      	ldr	r3, [pc, #196]	; (8005398 <UART_SetConfig+0x338>)
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d826      	bhi.n	800532c <UART_SetConfig+0x2cc>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x284>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052fd 	.word	0x080052fd
 80052e8:	08005305 	.word	0x08005305
 80052ec:	0800530d 	.word	0x0800530d
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e180      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e17c      	b.n	8005606 <UART_SetConfig+0x5a6>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e178      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e174      	b.n	8005606 <UART_SetConfig+0x5a6>
 800531c:	2320      	movs	r3, #32
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e170      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e16c      	b.n	8005606 <UART_SetConfig+0x5a6>
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e168      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <UART_SetConfig+0x348>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d142      	bne.n	80053c4 <UART_SetConfig+0x364>
 800533e:	4b16      	ldr	r3, [pc, #88]	; (8005398 <UART_SetConfig+0x338>)
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b05      	cmp	r3, #5
 8005348:	d838      	bhi.n	80053bc <UART_SetConfig+0x35c>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x2f0>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005369 	.word	0x08005369
 8005354:	08005371 	.word	0x08005371
 8005358:	08005379 	.word	0x08005379
 800535c:	08005381 	.word	0x08005381
 8005360:	080053ad 	.word	0x080053ad
 8005364:	080053b5 	.word	0x080053b5
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e14a      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e146      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e142      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e13e      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005388:	cfff69f3 	.word	0xcfff69f3
 800538c:	58000c00 	.word	0x58000c00
 8005390:	11fff4ff 	.word	0x11fff4ff
 8005394:	40011000 	.word	0x40011000
 8005398:	58024400 	.word	0x58024400
 800539c:	40004400 	.word	0x40004400
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40004c00 	.word	0x40004c00
 80053a8:	40005000 	.word	0x40005000
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e128      	b.n	8005606 <UART_SetConfig+0x5a6>
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e124      	b.n	8005606 <UART_SetConfig+0x5a6>
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e120      	b.n	8005606 <UART_SetConfig+0x5a6>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4acb      	ldr	r2, [pc, #812]	; (80056f8 <UART_SetConfig+0x698>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d176      	bne.n	80054bc <UART_SetConfig+0x45c>
 80053ce:	4bcb      	ldr	r3, [pc, #812]	; (80056fc <UART_SetConfig+0x69c>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d6:	2b28      	cmp	r3, #40	; 0x28
 80053d8:	d86c      	bhi.n	80054b4 <UART_SetConfig+0x454>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x380>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005485 	.word	0x08005485
 80053e4:	080054b5 	.word	0x080054b5
 80053e8:	080054b5 	.word	0x080054b5
 80053ec:	080054b5 	.word	0x080054b5
 80053f0:	080054b5 	.word	0x080054b5
 80053f4:	080054b5 	.word	0x080054b5
 80053f8:	080054b5 	.word	0x080054b5
 80053fc:	080054b5 	.word	0x080054b5
 8005400:	0800548d 	.word	0x0800548d
 8005404:	080054b5 	.word	0x080054b5
 8005408:	080054b5 	.word	0x080054b5
 800540c:	080054b5 	.word	0x080054b5
 8005410:	080054b5 	.word	0x080054b5
 8005414:	080054b5 	.word	0x080054b5
 8005418:	080054b5 	.word	0x080054b5
 800541c:	080054b5 	.word	0x080054b5
 8005420:	08005495 	.word	0x08005495
 8005424:	080054b5 	.word	0x080054b5
 8005428:	080054b5 	.word	0x080054b5
 800542c:	080054b5 	.word	0x080054b5
 8005430:	080054b5 	.word	0x080054b5
 8005434:	080054b5 	.word	0x080054b5
 8005438:	080054b5 	.word	0x080054b5
 800543c:	080054b5 	.word	0x080054b5
 8005440:	0800549d 	.word	0x0800549d
 8005444:	080054b5 	.word	0x080054b5
 8005448:	080054b5 	.word	0x080054b5
 800544c:	080054b5 	.word	0x080054b5
 8005450:	080054b5 	.word	0x080054b5
 8005454:	080054b5 	.word	0x080054b5
 8005458:	080054b5 	.word	0x080054b5
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054a5 	.word	0x080054a5
 8005464:	080054b5 	.word	0x080054b5
 8005468:	080054b5 	.word	0x080054b5
 800546c:	080054b5 	.word	0x080054b5
 8005470:	080054b5 	.word	0x080054b5
 8005474:	080054b5 	.word	0x080054b5
 8005478:	080054b5 	.word	0x080054b5
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e0bc      	b.n	8005606 <UART_SetConfig+0x5a6>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e0b8      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e0b4      	b.n	8005606 <UART_SetConfig+0x5a6>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e0b0      	b.n	8005606 <UART_SetConfig+0x5a6>
 80054a4:	2320      	movs	r3, #32
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e0ac      	b.n	8005606 <UART_SetConfig+0x5a6>
 80054ac:	2340      	movs	r3, #64	; 0x40
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e0a8      	b.n	8005606 <UART_SetConfig+0x5a6>
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e0a4      	b.n	8005606 <UART_SetConfig+0x5a6>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a8f      	ldr	r2, [pc, #572]	; (8005700 <UART_SetConfig+0x6a0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d130      	bne.n	8005528 <UART_SetConfig+0x4c8>
 80054c6:	4b8d      	ldr	r3, [pc, #564]	; (80056fc <UART_SetConfig+0x69c>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	d826      	bhi.n	8005520 <UART_SetConfig+0x4c0>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x478>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e086      	b.n	8005606 <UART_SetConfig+0x5a6>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e082      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e07e      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e07a      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005510:	2320      	movs	r3, #32
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e076      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e072      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e06e      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a75      	ldr	r2, [pc, #468]	; (8005704 <UART_SetConfig+0x6a4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d130      	bne.n	8005594 <UART_SetConfig+0x534>
 8005532:	4b72      	ldr	r3, [pc, #456]	; (80056fc <UART_SetConfig+0x69c>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b05      	cmp	r3, #5
 800553c:	d826      	bhi.n	800558c <UART_SetConfig+0x52c>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x4e4>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e050      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e04c      	b.n	8005606 <UART_SetConfig+0x5a6>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e048      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e044      	b.n	8005606 <UART_SetConfig+0x5a6>
 800557c:	2320      	movs	r3, #32
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e040      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e03c      	b.n	8005606 <UART_SetConfig+0x5a6>
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e038      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a5b      	ldr	r2, [pc, #364]	; (8005708 <UART_SetConfig+0x6a8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d130      	bne.n	8005600 <UART_SetConfig+0x5a0>
 800559e:	4b57      	ldr	r3, [pc, #348]	; (80056fc <UART_SetConfig+0x69c>)
 80055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d826      	bhi.n	80055f8 <UART_SetConfig+0x598>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x550>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	080055d9 	.word	0x080055d9
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	2302      	movs	r3, #2
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e01a      	b.n	8005606 <UART_SetConfig+0x5a6>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d6:	e016      	b.n	8005606 <UART_SetConfig+0x5a6>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055de:	e012      	b.n	8005606 <UART_SetConfig+0x5a6>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e00e      	b.n	8005606 <UART_SetConfig+0x5a6>
 80055e8:	2320      	movs	r3, #32
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e00a      	b.n	8005606 <UART_SetConfig+0x5a6>
 80055f0:	2340      	movs	r3, #64	; 0x40
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e006      	b.n	8005606 <UART_SetConfig+0x5a6>
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e002      	b.n	8005606 <UART_SetConfig+0x5a6>
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3f      	ldr	r2, [pc, #252]	; (8005708 <UART_SetConfig+0x6a8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	f040 80f8 	bne.w	8005802 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005612:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005616:	2b20      	cmp	r3, #32
 8005618:	dc46      	bgt.n	80056a8 <UART_SetConfig+0x648>
 800561a:	2b02      	cmp	r3, #2
 800561c:	f2c0 8082 	blt.w	8005724 <UART_SetConfig+0x6c4>
 8005620:	3b02      	subs	r3, #2
 8005622:	2b1e      	cmp	r3, #30
 8005624:	d87e      	bhi.n	8005724 <UART_SetConfig+0x6c4>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0x5cc>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	080056af 	.word	0x080056af
 8005630:	08005725 	.word	0x08005725
 8005634:	080056b7 	.word	0x080056b7
 8005638:	08005725 	.word	0x08005725
 800563c:	08005725 	.word	0x08005725
 8005640:	08005725 	.word	0x08005725
 8005644:	080056c7 	.word	0x080056c7
 8005648:	08005725 	.word	0x08005725
 800564c:	08005725 	.word	0x08005725
 8005650:	08005725 	.word	0x08005725
 8005654:	08005725 	.word	0x08005725
 8005658:	08005725 	.word	0x08005725
 800565c:	08005725 	.word	0x08005725
 8005660:	08005725 	.word	0x08005725
 8005664:	080056d7 	.word	0x080056d7
 8005668:	08005725 	.word	0x08005725
 800566c:	08005725 	.word	0x08005725
 8005670:	08005725 	.word	0x08005725
 8005674:	08005725 	.word	0x08005725
 8005678:	08005725 	.word	0x08005725
 800567c:	08005725 	.word	0x08005725
 8005680:	08005725 	.word	0x08005725
 8005684:	08005725 	.word	0x08005725
 8005688:	08005725 	.word	0x08005725
 800568c:	08005725 	.word	0x08005725
 8005690:	08005725 	.word	0x08005725
 8005694:	08005725 	.word	0x08005725
 8005698:	08005725 	.word	0x08005725
 800569c:	08005725 	.word	0x08005725
 80056a0:	08005725 	.word	0x08005725
 80056a4:	08005717 	.word	0x08005717
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d037      	beq.n	800571c <UART_SetConfig+0x6bc>
 80056ac:	e03a      	b.n	8005724 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056ae:	f7ff f865 	bl	800477c <HAL_RCCEx_GetD3PCLK1Freq>
 80056b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056b4:	e03c      	b.n	8005730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff f874 	bl	80047a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c4:	e034      	b.n	8005730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056c6:	f107 0318 	add.w	r3, r7, #24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff f9c0 	bl	8004a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d4:	e02c      	b.n	8005730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <UART_SetConfig+0x69c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <UART_SetConfig+0x69c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	08db      	lsrs	r3, r3, #3
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	4a07      	ldr	r2, [pc, #28]	; (800570c <UART_SetConfig+0x6ac>)
 80056ee:	fa22 f303 	lsr.w	r3, r2, r3
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056f4:	e01c      	b.n	8005730 <UART_SetConfig+0x6d0>
 80056f6:	bf00      	nop
 80056f8:	40011400 	.word	0x40011400
 80056fc:	58024400 	.word	0x58024400
 8005700:	40007800 	.word	0x40007800
 8005704:	40007c00 	.word	0x40007c00
 8005708:	58000c00 	.word	0x58000c00
 800570c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005710:	4b9d      	ldr	r3, [pc, #628]	; (8005988 <UART_SetConfig+0x928>)
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005714:	e00c      	b.n	8005730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005716:	4b9d      	ldr	r3, [pc, #628]	; (800598c <UART_SetConfig+0x92c>)
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800571a:	e009      	b.n	8005730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005722:	e005      	b.n	8005730 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800572e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 81de 	beq.w	8005af4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	4a94      	ldr	r2, [pc, #592]	; (8005990 <UART_SetConfig+0x930>)
 800573e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005742:	461a      	mov	r2, r3
 8005744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005746:	fbb3 f3f2 	udiv	r3, r3, r2
 800574a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	4413      	add	r3, r2
 8005756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005758:	429a      	cmp	r2, r3
 800575a:	d305      	bcc.n	8005768 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005764:	429a      	cmp	r2, r3
 8005766:	d903      	bls.n	8005770 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800576e:	e1c1      	b.n	8005af4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005772:	2200      	movs	r2, #0
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	60fa      	str	r2, [r7, #12]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	4a84      	ldr	r2, [pc, #528]	; (8005990 <UART_SetConfig+0x930>)
 800577e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005782:	b29b      	uxth	r3, r3
 8005784:	2200      	movs	r2, #0
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800578e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005792:	f7fa fda1 	bl	80002d8 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	020b      	lsls	r3, r1, #8
 80057a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057ac:	0202      	lsls	r2, r0, #8
 80057ae:	6979      	ldr	r1, [r7, #20]
 80057b0:	6849      	ldr	r1, [r1, #4]
 80057b2:	0849      	lsrs	r1, r1, #1
 80057b4:	2000      	movs	r0, #0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4605      	mov	r5, r0
 80057ba:	eb12 0804 	adds.w	r8, r2, r4
 80057be:	eb43 0905 	adc.w	r9, r3, r5
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	469a      	mov	sl, r3
 80057ca:	4693      	mov	fp, r2
 80057cc:	4652      	mov	r2, sl
 80057ce:	465b      	mov	r3, fp
 80057d0:	4640      	mov	r0, r8
 80057d2:	4649      	mov	r1, r9
 80057d4:	f7fa fd80 	bl	80002d8 <__aeabi_uldivmod>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4613      	mov	r3, r2
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057e6:	d308      	bcc.n	80057fa <UART_SetConfig+0x79a>
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ee:	d204      	bcs.n	80057fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	e17c      	b.n	8005af4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005800:	e178      	b.n	8005af4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580a:	f040 80c5 	bne.w	8005998 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800580e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005812:	2b20      	cmp	r3, #32
 8005814:	dc48      	bgt.n	80058a8 <UART_SetConfig+0x848>
 8005816:	2b00      	cmp	r3, #0
 8005818:	db7b      	blt.n	8005912 <UART_SetConfig+0x8b2>
 800581a:	2b20      	cmp	r3, #32
 800581c:	d879      	bhi.n	8005912 <UART_SetConfig+0x8b2>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0x7c4>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	080058af 	.word	0x080058af
 8005828:	080058b7 	.word	0x080058b7
 800582c:	08005913 	.word	0x08005913
 8005830:	08005913 	.word	0x08005913
 8005834:	080058bf 	.word	0x080058bf
 8005838:	08005913 	.word	0x08005913
 800583c:	08005913 	.word	0x08005913
 8005840:	08005913 	.word	0x08005913
 8005844:	080058cf 	.word	0x080058cf
 8005848:	08005913 	.word	0x08005913
 800584c:	08005913 	.word	0x08005913
 8005850:	08005913 	.word	0x08005913
 8005854:	08005913 	.word	0x08005913
 8005858:	08005913 	.word	0x08005913
 800585c:	08005913 	.word	0x08005913
 8005860:	08005913 	.word	0x08005913
 8005864:	080058df 	.word	0x080058df
 8005868:	08005913 	.word	0x08005913
 800586c:	08005913 	.word	0x08005913
 8005870:	08005913 	.word	0x08005913
 8005874:	08005913 	.word	0x08005913
 8005878:	08005913 	.word	0x08005913
 800587c:	08005913 	.word	0x08005913
 8005880:	08005913 	.word	0x08005913
 8005884:	08005913 	.word	0x08005913
 8005888:	08005913 	.word	0x08005913
 800588c:	08005913 	.word	0x08005913
 8005890:	08005913 	.word	0x08005913
 8005894:	08005913 	.word	0x08005913
 8005898:	08005913 	.word	0x08005913
 800589c:	08005913 	.word	0x08005913
 80058a0:	08005913 	.word	0x08005913
 80058a4:	08005905 	.word	0x08005905
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d02e      	beq.n	800590a <UART_SetConfig+0x8aa>
 80058ac:	e031      	b.n	8005912 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ae:	f7fd fd2f 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 80058b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058b4:	e033      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b6:	f7fd fd41 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 80058ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058bc:	e02f      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe ff70 	bl	80047a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058cc:	e027      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff f8bc 	bl	8004a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058dc:	e01f      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058de:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <UART_SetConfig+0x934>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ea:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <UART_SetConfig+0x934>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	08db      	lsrs	r3, r3, #3
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	4a24      	ldr	r2, [pc, #144]	; (8005988 <UART_SetConfig+0x928>)
 80058f6:	fa22 f303 	lsr.w	r3, r2, r3
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058fc:	e00f      	b.n	800591e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <UART_SetConfig+0x928>)
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005902:	e00c      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005904:	4b21      	ldr	r3, [pc, #132]	; (800598c <UART_SetConfig+0x92c>)
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005908:	e009      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005910:	e005      	b.n	800591e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800591c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800591e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80e7 	beq.w	8005af4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	4a19      	ldr	r2, [pc, #100]	; (8005990 <UART_SetConfig+0x930>)
 800592c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005930:	461a      	mov	r2, r3
 8005932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005934:	fbb3 f3f2 	udiv	r3, r3, r2
 8005938:	005a      	lsls	r2, r3, #1
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	441a      	add	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	2b0f      	cmp	r3, #15
 8005950:	d916      	bls.n	8005980 <UART_SetConfig+0x920>
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d212      	bcs.n	8005980 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	b29b      	uxth	r3, r3
 800595e:	f023 030f 	bic.w	r3, r3, #15
 8005962:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	085b      	lsrs	r3, r3, #1
 8005968:	b29b      	uxth	r3, r3
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	b29a      	uxth	r2, r3
 8005970:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005972:	4313      	orrs	r3, r2
 8005974:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	e0b9      	b.n	8005af4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005986:	e0b5      	b.n	8005af4 <UART_SetConfig+0xa94>
 8005988:	03d09000 	.word	0x03d09000
 800598c:	003d0900 	.word	0x003d0900
 8005990:	08006800 	.word	0x08006800
 8005994:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005998:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800599c:	2b20      	cmp	r3, #32
 800599e:	dc49      	bgt.n	8005a34 <UART_SetConfig+0x9d4>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db7c      	blt.n	8005a9e <UART_SetConfig+0xa3e>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d87a      	bhi.n	8005a9e <UART_SetConfig+0xa3e>
 80059a8:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0x950>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	08005a3b 	.word	0x08005a3b
 80059b4:	08005a43 	.word	0x08005a43
 80059b8:	08005a9f 	.word	0x08005a9f
 80059bc:	08005a9f 	.word	0x08005a9f
 80059c0:	08005a4b 	.word	0x08005a4b
 80059c4:	08005a9f 	.word	0x08005a9f
 80059c8:	08005a9f 	.word	0x08005a9f
 80059cc:	08005a9f 	.word	0x08005a9f
 80059d0:	08005a5b 	.word	0x08005a5b
 80059d4:	08005a9f 	.word	0x08005a9f
 80059d8:	08005a9f 	.word	0x08005a9f
 80059dc:	08005a9f 	.word	0x08005a9f
 80059e0:	08005a9f 	.word	0x08005a9f
 80059e4:	08005a9f 	.word	0x08005a9f
 80059e8:	08005a9f 	.word	0x08005a9f
 80059ec:	08005a9f 	.word	0x08005a9f
 80059f0:	08005a6b 	.word	0x08005a6b
 80059f4:	08005a9f 	.word	0x08005a9f
 80059f8:	08005a9f 	.word	0x08005a9f
 80059fc:	08005a9f 	.word	0x08005a9f
 8005a00:	08005a9f 	.word	0x08005a9f
 8005a04:	08005a9f 	.word	0x08005a9f
 8005a08:	08005a9f 	.word	0x08005a9f
 8005a0c:	08005a9f 	.word	0x08005a9f
 8005a10:	08005a9f 	.word	0x08005a9f
 8005a14:	08005a9f 	.word	0x08005a9f
 8005a18:	08005a9f 	.word	0x08005a9f
 8005a1c:	08005a9f 	.word	0x08005a9f
 8005a20:	08005a9f 	.word	0x08005a9f
 8005a24:	08005a9f 	.word	0x08005a9f
 8005a28:	08005a9f 	.word	0x08005a9f
 8005a2c:	08005a9f 	.word	0x08005a9f
 8005a30:	08005a91 	.word	0x08005a91
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d02e      	beq.n	8005a96 <UART_SetConfig+0xa36>
 8005a38:	e031      	b.n	8005a9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3a:	f7fd fc69 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8005a3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a40:	e033      	b.n	8005aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a42:	f7fd fc7b 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8005a46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a48:	e02f      	b.n	8005aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe feaa 	bl	80047a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a58:	e027      	b.n	8005aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a5a:	f107 0318 	add.w	r3, r7, #24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fff6 	bl	8004a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a68:	e01f      	b.n	8005aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a6a:	4b2d      	ldr	r3, [pc, #180]	; (8005b20 <UART_SetConfig+0xac0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a76:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <UART_SetConfig+0xac0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	08db      	lsrs	r3, r3, #3
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	4a28      	ldr	r2, [pc, #160]	; (8005b24 <UART_SetConfig+0xac4>)
 8005a82:	fa22 f303 	lsr.w	r3, r2, r3
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a88:	e00f      	b.n	8005aaa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a8a:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <UART_SetConfig+0xac4>)
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a8e:	e00c      	b.n	8005aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <UART_SetConfig+0xac8>)
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a94:	e009      	b.n	8005aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a9c:	e005      	b.n	8005aaa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d021      	beq.n	8005af4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <UART_SetConfig+0xacc>)
 8005ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	441a      	add	r2, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d909      	bls.n	8005aee <UART_SetConfig+0xa8e>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae0:	d205      	bcs.n	8005aee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60da      	str	r2, [r3, #12]
 8005aec:	e002      	b.n	8005af4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b10:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3748      	adds	r7, #72	; 0x48
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1e:	bf00      	nop
 8005b20:	58024400 	.word	0x58024400
 8005b24:	03d09000 	.word	0x03d09000
 8005b28:	003d0900 	.word	0x003d0900
 8005b2c:	08006800 	.word	0x08006800

08005b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01a      	beq.n	8005c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2e:	d10a      	bne.n	8005c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b098      	sub	sp, #96	; 0x60
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c84:	f7fb fa66 	bl	8001154 <HAL_GetTick>
 8005c88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d12f      	bne.n	8005cf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f88e 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d022      	beq.n	8005cf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e6      	bne.n	8005cb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e063      	b.n	8005dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d149      	bne.n	8005d9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f857 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d03c      	beq.n	8005d9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e6      	bne.n	8005d20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d72:	61fa      	str	r2, [r7, #28]
 8005d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	69b9      	ldr	r1, [r7, #24]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e5      	bne.n	8005d52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e012      	b.n	8005dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3758      	adds	r7, #88	; 0x58
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd8:	e049      	b.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d045      	beq.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de2:	f7fb f9b7 	bl	8001154 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d302      	bcc.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e048      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d031      	beq.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d110      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f839 	bl	8005e98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2208      	movs	r2, #8
 8005e2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e029      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e48:	d111      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f81f 	bl	8005e98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e00f      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d0a6      	beq.n	8005dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b095      	sub	sp, #84	; 0x54
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e6      	bne.n	8005ea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	4b1e      	ldr	r3, [pc, #120]	; (8005f60 <UART_EndRxTransfer+0xc8>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e5      	bne.n	8005ed2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d118      	bne.n	8005f40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f023 0310 	bic.w	r3, r3, #16
 8005f22:	647b      	str	r3, [r7, #68]	; 0x44
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6979      	ldr	r1, [r7, #20]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e6      	bne.n	8005f0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f54:	bf00      	nop
 8005f56:	3754      	adds	r7, #84	; 0x54
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	effffffe 	.word	0xeffffffe

08005f64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_UARTEx_DisableFifoMode+0x16>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e027      	b.n	8005fca <HAL_UARTEx_DisableFifoMode+0x66>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2224      	movs	r2, #36	; 0x24
 8005f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0201 	bic.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e02d      	b.n	800604a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2224      	movs	r2, #36	; 0x24
 8005ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f850 	bl	80060d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006066:	2302      	movs	r3, #2
 8006068:	e02d      	b.n	80060c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2224      	movs	r2, #36	; 0x24
 8006076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f812 	bl	80060d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d108      	bne.n	80060f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060f0:	e031      	b.n	8006156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060f2:	2310      	movs	r3, #16
 80060f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060f6:	2310      	movs	r3, #16
 80060f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	0e5b      	lsrs	r3, r3, #25
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	0f5b      	lsrs	r3, r3, #29
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	7b3a      	ldrb	r2, [r7, #12]
 800611e:	4911      	ldr	r1, [pc, #68]	; (8006164 <UARTEx_SetNbDataToProcess+0x94>)
 8006120:	5c8a      	ldrb	r2, [r1, r2]
 8006122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006126:	7b3a      	ldrb	r2, [r7, #12]
 8006128:	490f      	ldr	r1, [pc, #60]	; (8006168 <UARTEx_SetNbDataToProcess+0x98>)
 800612a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800612c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006130:	b29a      	uxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	7b7a      	ldrb	r2, [r7, #13]
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <UARTEx_SetNbDataToProcess+0x94>)
 800613e:	5c8a      	ldrb	r2, [r1, r2]
 8006140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006144:	7b7a      	ldrb	r2, [r7, #13]
 8006146:	4908      	ldr	r1, [pc, #32]	; (8006168 <UARTEx_SetNbDataToProcess+0x98>)
 8006148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800614a:	fb93 f3f2 	sdiv	r3, r3, r2
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	08006818 	.word	0x08006818
 8006168:	08006820 	.word	0x08006820

0800616c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800616c:	b084      	sub	sp, #16
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	f107 001c 	add.w	r0, r7, #28
 800617a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b01      	cmp	r3, #1
 8006182:	d120      	bne.n	80061c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	4b2a      	ldr	r3, [pc, #168]	; (8006240 <USB_CoreInit+0xd4>)
 8006196:	4013      	ands	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d105      	bne.n	80061ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 faac 	bl	8006718 <USB_CoreReset>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
 80061c4:	e01a      	b.n	80061fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 faa0 	bl	8006718 <USB_CoreReset>
 80061d8:	4603      	mov	r3, r0
 80061da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
 80061ee:	e005      	b.n	80061fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d116      	bne.n	8006230 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <USB_CoreInit+0xd8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f043 0206 	orr.w	r2, r3, #6
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623c:	b004      	add	sp, #16
 800623e:	4770      	bx	lr
 8006240:	ffbdffbf 	.word	0xffbdffbf
 8006244:	03ee0000 	.word	0x03ee0000

08006248 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f023 0201 	bic.w	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d115      	bne.n	80062b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006298:	2001      	movs	r0, #1
 800629a:	f7fa ff67 	bl	800116c <HAL_Delay>
      ms++;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa29 	bl	80066fc <USB_GetMode>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d01e      	beq.n	80062ee <USB_SetCurrentMode+0x84>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b31      	cmp	r3, #49	; 0x31
 80062b4:	d9f0      	bls.n	8006298 <USB_SetCurrentMode+0x2e>
 80062b6:	e01a      	b.n	80062ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d115      	bne.n	80062ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062ca:	2001      	movs	r0, #1
 80062cc:	f7fa ff4e 	bl	800116c <HAL_Delay>
      ms++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa10 	bl	80066fc <USB_GetMode>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <USB_SetCurrentMode+0x84>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b31      	cmp	r3, #49	; 0x31
 80062e6:	d9f0      	bls.n	80062ca <USB_SetCurrentMode+0x60>
 80062e8:	e001      	b.n	80062ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e005      	b.n	80062fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b32      	cmp	r3, #50	; 0x32
 80062f2:	d101      	bne.n	80062f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006304:	b084      	sub	sp, #16
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	e009      	b.n	8006338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3340      	adds	r3, #64	; 0x40
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	2200      	movs	r2, #0
 8006330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	3301      	adds	r3, #1
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b0e      	cmp	r3, #14
 800633c:	d9f2      	bls.n	8006324 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800633e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11c      	bne.n	800637e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006352:	f043 0302 	orr.w	r3, r3, #2
 8006356:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e005      	b.n	800638a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006390:	461a      	mov	r2, r3
 8006392:	2300      	movs	r3, #0
 8006394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	4619      	mov	r1, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	461a      	mov	r2, r3
 80063a6:	680b      	ldr	r3, [r1, #0]
 80063a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10c      	bne.n	80063ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063b6:	2100      	movs	r1, #0
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f965 	bl	8006688 <USB_SetDevSpeed>
 80063be:	e008      	b.n	80063d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063c0:	2101      	movs	r1, #1
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f960 	bl	8006688 <USB_SetDevSpeed>
 80063c8:	e003      	b.n	80063d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063ca:	2103      	movs	r1, #3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f95b 	bl	8006688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063d2:	2110      	movs	r1, #16
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f8f3 	bl	80065c0 <USB_FlushTxFifo>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f91f 	bl	8006628 <USB_FlushRxFifo>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	461a      	mov	r2, r3
 80063fc:	2300      	movs	r3, #0
 80063fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	461a      	mov	r2, r3
 8006408:	2300      	movs	r3, #0
 800640a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	461a      	mov	r2, r3
 8006414:	2300      	movs	r3, #0
 8006416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	e043      	b.n	80064a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006434:	d118      	bne.n	8006468 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	461a      	mov	r2, r3
 800644a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e013      	b.n	800647a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	461a      	mov	r2, r3
 8006460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	e008      	b.n	800647a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	461a      	mov	r2, r3
 8006476:	2300      	movs	r3, #0
 8006478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	461a      	mov	r2, r3
 8006488:	2300      	movs	r3, #0
 800648a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	461a      	mov	r2, r3
 800649a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800649e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3301      	adds	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3b7      	bcc.n	800641e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e043      	b.n	800653c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ca:	d118      	bne.n	80064fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e013      	b.n	8006510 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f4:	461a      	mov	r2, r3
 80064f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	e008      	b.n	8006510 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650a:	461a      	mov	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	461a      	mov	r2, r3
 800651e:	2300      	movs	r3, #0
 8006520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	461a      	mov	r2, r3
 8006530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	3301      	adds	r3, #1
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	429a      	cmp	r2, r3
 8006542:	d3b7      	bcc.n	80064b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f043 0210 	orr.w	r2, r3, #16
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <USB_DevInit+0x2b4>)
 800657e:	4313      	orrs	r3, r2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f043 0208 	orr.w	r2, r3, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d105      	bne.n	80065a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699a      	ldr	r2, [r3, #24]
 80065a0:	4b06      	ldr	r3, [pc, #24]	; (80065bc <USB_DevInit+0x2b8>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b4:	b004      	add	sp, #16
 80065b6:	4770      	bx	lr
 80065b8:	803c3800 	.word	0x803c3800
 80065bc:	40000004 	.word	0x40000004

080065c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a13      	ldr	r2, [pc, #76]	; (8006624 <USB_FlushTxFifo+0x64>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d901      	bls.n	80065e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e01b      	b.n	8006618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	daf2      	bge.n	80065ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	019b      	lsls	r3, r3, #6
 80065f0:	f043 0220 	orr.w	r2, r3, #32
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a08      	ldr	r2, [pc, #32]	; (8006624 <USB_FlushTxFifo+0x64>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e006      	b.n	8006618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b20      	cmp	r3, #32
 8006614:	d0f0      	beq.n	80065f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	00030d40 	.word	0x00030d40

08006628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <USB_FlushRxFifo+0x5c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d901      	bls.n	8006646 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e018      	b.n	8006678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	daf2      	bge.n	8006634 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2210      	movs	r2, #16
 8006656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a08      	ldr	r2, [pc, #32]	; (8006684 <USB_FlushRxFifo+0x5c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e006      	b.n	8006678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b10      	cmp	r3, #16
 8006674:	d0f0      	beq.n	8006658 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	00030d40 	.word	0x00030d40

08006688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066d4:	f023 0303 	bic.w	r3, r3, #3
 80066d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e8:	f043 0302 	orr.w	r3, r3, #2
 80066ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f003 0301 	and.w	r3, r3, #1
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3301      	adds	r3, #1
 8006728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4a13      	ldr	r2, [pc, #76]	; (800677c <USB_CoreReset+0x64>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d901      	bls.n	8006736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e01b      	b.n	800676e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	daf2      	bge.n	8006724 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f043 0201 	orr.w	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4a09      	ldr	r2, [pc, #36]	; (800677c <USB_CoreReset+0x64>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d901      	bls.n	8006760 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e006      	b.n	800676e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b01      	cmp	r3, #1
 800676a:	d0f0      	beq.n	800674e <USB_CoreReset+0x36>

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	00030d40 	.word	0x00030d40

08006780 <memset>:
 8006780:	4402      	add	r2, r0
 8006782:	4603      	mov	r3, r0
 8006784:	4293      	cmp	r3, r2
 8006786:	d100      	bne.n	800678a <memset+0xa>
 8006788:	4770      	bx	lr
 800678a:	f803 1b01 	strb.w	r1, [r3], #1
 800678e:	e7f9      	b.n	8006784 <memset+0x4>

08006790 <__libc_init_array>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4d0d      	ldr	r5, [pc, #52]	; (80067c8 <__libc_init_array+0x38>)
 8006794:	4c0d      	ldr	r4, [pc, #52]	; (80067cc <__libc_init_array+0x3c>)
 8006796:	1b64      	subs	r4, r4, r5
 8006798:	10a4      	asrs	r4, r4, #2
 800679a:	2600      	movs	r6, #0
 800679c:	42a6      	cmp	r6, r4
 800679e:	d109      	bne.n	80067b4 <__libc_init_array+0x24>
 80067a0:	4d0b      	ldr	r5, [pc, #44]	; (80067d0 <__libc_init_array+0x40>)
 80067a2:	4c0c      	ldr	r4, [pc, #48]	; (80067d4 <__libc_init_array+0x44>)
 80067a4:	f000 f818 	bl	80067d8 <_init>
 80067a8:	1b64      	subs	r4, r4, r5
 80067aa:	10a4      	asrs	r4, r4, #2
 80067ac:	2600      	movs	r6, #0
 80067ae:	42a6      	cmp	r6, r4
 80067b0:	d105      	bne.n	80067be <__libc_init_array+0x2e>
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b8:	4798      	blx	r3
 80067ba:	3601      	adds	r6, #1
 80067bc:	e7ee      	b.n	800679c <__libc_init_array+0xc>
 80067be:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c2:	4798      	blx	r3
 80067c4:	3601      	adds	r6, #1
 80067c6:	e7f2      	b.n	80067ae <__libc_init_array+0x1e>
 80067c8:	08006830 	.word	0x08006830
 80067cc:	08006830 	.word	0x08006830
 80067d0:	08006830 	.word	0x08006830
 80067d4:	08006834 	.word	0x08006834

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
