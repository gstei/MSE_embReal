
sw02_02_CPP_BlinkyNamespace_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c60  08006c60  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c68  08006c68  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  08006cd0  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  08006d30  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007f0  24000120  08006d90  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000910  08006d90  00020910  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001f169  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000364c  00000000  00000000  0003f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001130  00000000  00000000  00042948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000d2b  00000000  00000000  00043a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ee99  00000000  00000000  000447a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00019832  00000000  00000000  0008363c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001840f9  00000000  00000000  0009ce6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004ad8  00000000  00000000  00220f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a9  00000000  00000000  00225a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006bd0 	.word	0x08006bd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	08006bd0 	.word	0x08006bd0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <cpp_main>:

//YOUR CODE STARTS HERE
#include "BlinkingLed.h"
//YOUR CODE ENDS HERE

void cpp_main(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b098      	sub	sp, #96	; 0x60
 8000704:	af00      	add	r7, sp, #0
	//YOUR CODE STARTS HERE
	BlinkingLed Led1Blinker{LD1_GPIO_Port,LD1_Pin};
 8000706:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070a:	2201      	movs	r2, #1
 800070c:	491a      	ldr	r1, [pc, #104]	; (8000778 <cpp_main+0x78>)
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fce4 	bl	80010dc <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>
	Led1Blinker.setFrequency(0.5);
 8000714:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000718:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fd3d 	bl	800119c <_ZN11BlinkingLed12setFrequencyEf>

	BlinkingLed Led2Blinker{LD2_GPIO_Port,LD2_Pin};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2202      	movs	r2, #2
 8000728:	4914      	ldr	r1, [pc, #80]	; (800077c <cpp_main+0x7c>)
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fcd6 	bl	80010dc <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>
	Led2Blinker.setFrequency(1.0);
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fd2f 	bl	800119c <_ZN11BlinkingLed12setFrequencyEf>

	BlinkingLed Led3Blinker{LD3_GPIO_Port,LD3_Pin};
 800073e:	463b      	mov	r3, r7
 8000740:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <cpp_main+0x78>)
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fcc8 	bl	80010dc <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>
	Led3Blinker.setFrequency(2.0);
 800074c:	463b      	mov	r3, r7
 800074e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fd22 	bl	800119c <_ZN11BlinkingLed12setFrequencyEf>
	//YOUR CODE ENDS HERE

while (1)
	{
	//YOUR CODE STARTS HERE
	Led1Blinker.processBlinking();
 8000758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fd2d 	bl	80011bc <_ZN11BlinkingLed15processBlinkingEv>
	Led2Blinker.processBlinking();
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fd28 	bl	80011bc <_ZN11BlinkingLed15processBlinkingEv>
	Led3Blinker.processBlinking();
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fd24 	bl	80011bc <_ZN11BlinkingLed15processBlinkingEv>
	Led1Blinker.processBlinking();
 8000774:	e7f0      	b.n	8000758 <cpp_main+0x58>
 8000776:	bf00      	nop
 8000778:	58020400 	.word	0x58020400
 800077c:	58021000 	.word	0x58021000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800078c:	bf00      	nop
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <main+0xa0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d004      	beq.n	80007a4 <main+0x24>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	1e5a      	subs	r2, r3, #1
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dcf4      	bgt.n	800078e <main+0xe>
  if ( timeout < 0 )
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da01      	bge.n	80007ae <main+0x2e>
  {
  Error_Handler();
 80007aa:	f000 fa5f 	bl	8000c6c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fde9 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f837 	bl	8000824 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0xa0>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <main+0xa0>)
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <main+0xa0>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 fd97 	bl	8002308 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007da:	2100      	movs	r1, #0
 80007dc:	2000      	movs	r0, #0
 80007de:	f001 fdad 	bl	800233c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007e8:	bf00      	nop
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <main+0xa0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d104      	bne.n	8000800 <main+0x80>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dcf4      	bgt.n	80007ea <main+0x6a>
if ( timeout < 0 )
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da01      	bge.n	800080a <main+0x8a>
{
Error_Handler();
 8000806:	f000 fa31 	bl	8000c6c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f953 	bl	8000ab4 <MX_GPIO_Init>
  MX_ETH_Init();
 800080e:	f000 f887 	bl	8000920 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000812:	f000 f8d1 	bl	80009b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000816:	f000 f91b 	bl	8000a50 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 800081a:	f7ff ff71 	bl	8000700 <cpp_main>
 800081e:	e7fc      	b.n	800081a <main+0x9a>
 8000820:	58024400 	.word	0x58024400

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	; 0x70
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	224c      	movs	r2, #76	; 0x4c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f006 f952 	bl	8006adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f006 f94c 	bl	8006adc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000844:	2004      	movs	r0, #4
 8000846:	f001 fed5 	bl	80025f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <SystemClock_Config+0xf4>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	4a31      	ldr	r2, [pc, #196]	; (8000918 <SystemClock_Config+0xf4>)
 8000854:	f023 0301 	bic.w	r3, r3, #1
 8000858:	62d3      	str	r3, [r2, #44]	; 0x2c
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <SystemClock_Config+0xf4>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <SystemClock_Config+0xf8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086c:	4a2b      	ldr	r2, [pc, #172]	; (800091c <SystemClock_Config+0xf8>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <SystemClock_Config+0xf8>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000880:	bf00      	nop
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <SystemClock_Config+0xf8>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800088a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088e:	d1f8      	bne.n	8000882 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000890:	2301      	movs	r3, #1
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000894:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	2302      	movs	r3, #2
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80008a6:	2312      	movs	r3, #18
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b6:	230c      	movs	r3, #12
 80008b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008ba:	2302      	movs	r3, #2
 80008bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80008be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fefd 	bl	80026c8 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d4:	f000 f9ca 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	233f      	movs	r3, #63	; 0x3f
 80008da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2303      	movs	r3, #3
 80008de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2101      	movs	r1, #1
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fb3c 	bl	8002f7c <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800090a:	f000 f9af 	bl	8000c6c <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3770      	adds	r7, #112	; 0x70
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	58000400 	.word	0x58000400
 800091c:	58024800 	.word	0x58024800

08000920 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_ETH_Init+0x80>)
 8000926:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <MX_ETH_Init+0x84>)
 8000928:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_ETH_Init+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_ETH_Init+0x88>)
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_ETH_Init+0x88>)
 8000938:	22e1      	movs	r2, #225	; 0xe1
 800093a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_ETH_Init+0x88>)
 800093e:	2200      	movs	r2, #0
 8000940:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_ETH_Init+0x88>)
 8000944:	2200      	movs	r2, #0
 8000946:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_ETH_Init+0x88>)
 800094a:	2200      	movs	r2, #0
 800094c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_ETH_Init+0x80>)
 8000950:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <MX_ETH_Init+0x88>)
 8000952:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_ETH_Init+0x80>)
 8000956:	2201      	movs	r2, #1
 8000958:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_ETH_Init+0x80>)
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_ETH_Init+0x8c>)
 800095e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_ETH_Init+0x80>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_ETH_Init+0x90>)
 8000964:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_ETH_Init+0x80>)
 8000968:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800096c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_ETH_Init+0x80>)
 8000970:	f000 fec2 	bl	80016f8 <HAL_ETH_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800097a:	f000 f977 	bl	8000c6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800097e:	2238      	movs	r2, #56	; 0x38
 8000980:	2100      	movs	r1, #0
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_ETH_Init+0x94>)
 8000984:	f006 f8aa 	bl	8006adc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_ETH_Init+0x94>)
 800098a:	2221      	movs	r2, #33	; 0x21
 800098c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_ETH_Init+0x94>)
 8000990:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000994:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_ETH_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000174 	.word	0x24000174
 80009a4:	40028000 	.word	0x40028000
 80009a8:	240007c4 	.word	0x240007c4
 80009ac:	240000c0 	.word	0x240000c0
 80009b0:	24000060 	.word	0x24000060
 80009b4:	2400013c 	.word	0x2400013c

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_USART3_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a02:	f004 fc73 	bl	80052ec <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f92e 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a14:	f005 fc75 	bl	8006302 <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f925 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a26:	f005 fcaa 	bl	800637e <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f91c 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a36:	f005 fc2b 	bl	8006290 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f914 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000224 	.word	0x24000224
 8000a4c:	40004800 	.word	0x40004800

08000a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	f001 fc64 	bl	8002364 <HAL_PCD_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aa2:	f000 f8e3 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	240002b8 	.word	0x240002b8
 8000ab0:	40080000 	.word	0x40080000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b62      	ldr	r3, [pc, #392]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a60      	ldr	r2, [pc, #384]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b5e      	ldr	r3, [pc, #376]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae8:	4b5a      	ldr	r3, [pc, #360]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a51      	ldr	r2, [pc, #324]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a4a      	ldr	r2, [pc, #296]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a42      	ldr	r2, [pc, #264]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b40      	ldr	r3, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b60:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b70:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4a33      	ldr	r2, [pc, #204]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ba2:	482d      	ldr	r0, [pc, #180]	; (8000c58 <MX_GPIO_Init+0x1a4>)
 8000ba4:	f001 fb7c 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bae:	482b      	ldr	r0, [pc, #172]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000bb0:	f001 fb76 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4829      	ldr	r0, [pc, #164]	; (8000c60 <MX_GPIO_Init+0x1ac>)
 8000bba:	f001 fb71 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4824      	ldr	r0, [pc, #144]	; (8000c64 <MX_GPIO_Init+0x1b0>)
 8000bd4:	f001 f9b4 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bd8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4819      	ldr	r0, [pc, #100]	; (8000c58 <MX_GPIO_Init+0x1a4>)
 8000bf2:	f001 f9a5 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000c10:	f001 f996 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <MX_GPIO_Init+0x1b4>)
 8000c2a:	f001 f989 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_GPIO_Init+0x1ac>)
 8000c46:	f001 f97b 	bl	8001f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	58024400 	.word	0x58024400
 8000c58:	58020400 	.word	0x58020400
 8000c5c:	58020c00 	.word	0x58020c00
 8000c60:	58021000 	.word	0x58021000
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58021800 	.word	0x58021800

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_MspInit+0x30>)
 8000c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x30>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x30>)
 8000c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	58024400 	.word	0x58024400

08000cac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a59      	ldr	r2, [pc, #356]	; (8000e30 <HAL_ETH_MspInit+0x184>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f040 80ab 	bne.w	8000e26 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cd0:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd6:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce0:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cee:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d0c:	4b49      	ldr	r3, [pc, #292]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d12:	4a48      	ldr	r2, [pc, #288]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d1c:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a40      	ldr	r2, [pc, #256]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a39      	ldr	r2, [pc, #228]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a2a      	ldr	r2, [pc, #168]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000da2:	2332      	movs	r3, #50	; 0x32
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db2:	230b      	movs	r3, #11
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481e      	ldr	r0, [pc, #120]	; (8000e38 <HAL_ETH_MspInit+0x18c>)
 8000dbe:	f001 f8bf 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dc2:	2386      	movs	r3, #134	; 0x86
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4817      	ldr	r0, [pc, #92]	; (8000e3c <HAL_ETH_MspInit+0x190>)
 8000dde:	f001 f8af 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df4:	230b      	movs	r3, #11
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4810      	ldr	r0, [pc, #64]	; (8000e40 <HAL_ETH_MspInit+0x194>)
 8000e00:	f001 f89e 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e16:	230b      	movs	r3, #11
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4808      	ldr	r0, [pc, #32]	; (8000e44 <HAL_ETH_MspInit+0x198>)
 8000e22:	f001 f88d 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3738      	adds	r7, #56	; 0x38
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40028000 	.word	0x40028000
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020800 	.word	0x58020800
 8000e3c:	58020000 	.word	0x58020000
 8000e40:	58020400 	.word	0x58020400
 8000e44:	58021800 	.word	0x58021800

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ba      	sub	sp, #232	; 0xe8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	22c0      	movs	r2, #192	; 0xc0
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fe37 	bl	8006adc <memset>
  if(huart->Instance==USART3)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_UART_MspInit+0xc8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d146      	bne.n	8000f06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e78:	f04f 0202 	mov.w	r2, #2
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fc00 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e9a:	f7ff fee7 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_UART_MspInit+0xd0>)
 8000f02:	f001 f81d 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	37e8      	adds	r7, #232	; 0xe8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40004800 	.word	0x40004800
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020c00 	.word	0x58020c00

08000f1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ba      	sub	sp, #232	; 0xe8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	22c0      	movs	r2, #192	; 0xc0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fdcd 	bl	8006adc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a38      	ldr	r2, [pc, #224]	; (8001028 <HAL_PCD_MspInit+0x10c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d169      	bne.n	8001020 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000f64:	2303      	movs	r3, #3
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000f72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f76:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fb85 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f90:	f7ff fe6c 	bl	8000c6c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f94:	f001 fb88 	bl	80026a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <HAL_PCD_MspInit+0x110>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <HAL_PCD_MspInit+0x110>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_PCD_MspInit+0x110>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fb6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <HAL_PCD_MspInit+0x114>)
 8000fde:	f000 ffaf 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <HAL_PCD_MspInit+0x114>)
 8000ffe:	f000 ff9f 	bl	8001f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_PCD_MspInit+0x110>)
 8001004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_PCD_MspInit+0x110>)
 800100a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800100e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_PCD_MspInit+0x110>)
 8001014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	37e8      	adds	r7, #232	; 0xe8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40080000 	.word	0x40080000
 800102c:	58024400 	.word	0x58024400
 8001030:	58020000 	.word	0x58020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f9f2 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800108c:	f7ff faa2 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	; (80010d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f005 fd19 	bl	8006aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fb61 	bl	8000780 <main>
  bx  lr
 80010be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010c8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80010cc:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 80010d0:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80010d4:	24000910 	.word	0x24000910

080010d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC3_IRQHandler>
	...

080010dc <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>:

#include "BlinkingLed.h"
#include <array>
#include <algorithm>

BlinkingLed::BlinkingLed(GPIO_TypeDef *Port, uint16_t Pin) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f909 	bl	8001304 <_ZN5myhal11STM32H7_ledC1Ev>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	330c      	adds	r3, #12
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f88c 	bl	8001214 <_ZN5myhal24NoneBlockSystemTickDelayC1Ev>
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <_ZN11BlinkingLedC1EP12GPIO_TypeDeft+0x50>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <_ZN11BlinkingLedC1EP12GPIO_TypeDeft+0x54>)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800110e:	619a      	str	r2, [r3, #24]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2232      	movs	r2, #50	; 0x32
 8001114:	771a      	strb	r2, [r3, #28]
	// TODO Auto-generated constructor stub
	BlinkingLed::Port=Port;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	605a      	str	r2, [r3, #4]
	BlinkingLed::Pin=Pin;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	811a      	strh	r2, [r3, #8]
}
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	08006c00 	.word	0x08006c00
 8001130:	08006c10 	.word	0x08006c10

08001134 <_ZN11BlinkingLedD1Ev>:

BlinkingLed::~BlinkingLed() {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <_ZN11BlinkingLedD1Ev+0x30>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <_ZN11BlinkingLedD1Ev+0x34>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	330c      	adds	r3, #12
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f877 	bl	8001240 <_ZN5myhal24NoneBlockSystemTickDelayD1Ev>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f8e5 	bl	8001324 <_ZN5myhal11STM32H7_ledD1Ev>
	// TODO Auto-generated destructor stub
}
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08006c00 	.word	0x08006c00
 8001168:	08006c10 	.word	0x08006c10

0800116c <_ZThn12_N11BlinkingLedD1Ev>:
#include <cstdint>

class BlinkingLed: protected myhal::STM32H7_led, myhal::NoneBlockSystemTickDelay{
public:
	BlinkingLed( GPIO_TypeDef *Port, uint16_t Pin);
	virtual ~BlinkingLed();
 800116c:	f1a0 000c 	sub.w	r0, r0, #12
 8001170:	f7ff bfe0 	b.w	8001134 <_ZN11BlinkingLedD1Ev>

08001174 <_ZN11BlinkingLedD0Ev>:
BlinkingLed::~BlinkingLed() {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
}
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffd9 	bl	8001134 <_ZN11BlinkingLedD1Ev>
 8001182:	2120      	movs	r1, #32
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f005 fc91 	bl	8006aac <_ZdlPvj>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZThn12_N11BlinkingLedD0Ev>:
 8001194:	f1a0 000c 	sub.w	r0, r0, #12
 8001198:	f7ff bfec 	b.w	8001174 <_ZN11BlinkingLedD0Ev>

0800119c <_ZN11BlinkingLed12setFrequencyEf>:

void BlinkingLed::setDutyCycle(const uint8_t DutyCycle){
	BlinkingLed::DutyCycle=DutyCycle;
}
void BlinkingLed::setFrequency(const float Frequency){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	ed87 0a00 	vstr	s0, [r7]
	BlinkingLed::Frequency=Frequency;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <_ZN11BlinkingLed15processBlinkingEv>:
void BlinkingLed::processBlinking(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	if(BlinkingLed::checkExpiration())
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	330c      	adds	r3, #12
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f877 	bl	80012bc <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d018      	beq.n	8001206 <_ZN11BlinkingLed15processBlinkingEv+0x4a>
	  {
		BlinkingLed::initialise(1/Frequency*1000);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f103 020c 	add.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80011e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001210 <_ZN11BlinkingLed15processBlinkingEv+0x54>
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f4:	ee17 1a90 	vmov	r1, s15
 80011f8:	4610      	mov	r0, r2
 80011fa:	f000 f841 	bl	8001280 <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm>
		BlinkingLed::toggleLED();
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f8af 	bl	8001364 <_ZN5myhal11STM32H7_led9toggleLEDEv>
	  }

}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	447a0000 	.word	0x447a0000

08001214 <_ZN5myhal24NoneBlockSystemTickDelayC1Ev>:
 *      Author: dominique.kunz
 */

#include <NoneBlockSystemTickDelay.h>

 myhal::NoneBlockSystemTickDelay::NoneBlockSystemTickDelay() {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <_ZN5myhal24NoneBlockSystemTickDelayC1Ev+0x28>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub

}
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	08006c20 	.word	0x08006c20

08001240 <_ZN5myhal24NoneBlockSystemTickDelayD1Ev>:

 myhal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <_ZN5myhal24NoneBlockSystemTickDelayD1Ev+0x1c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	08006c20 	.word	0x08006c20

08001260 <_ZN5myhal24NoneBlockSystemTickDelayD0Ev>:
 myhal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
}
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe9 	bl	8001240 <_ZN5myhal24NoneBlockSystemTickDelayD1Ev>
 800126e:	210c      	movs	r1, #12
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f005 fc1b 	bl	8006aac <_ZdlPvj>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm>:


void  myhal::NoneBlockSystemTickDelay::initialise(const uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	Wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	605a      	str	r2, [r3, #4]
	Tickstart = HAL_GetTick();
 8001290:	f000 f8fe 	bl	8001490 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	609a      	str	r2, [r3, #8]

  /* Add a uwTickFreq to guarantee minimum wait */
  if (Wait < 1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm+0x30>
  {
	  Wait += (uint32_t)(uwTickFreq);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm+0x38>)
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	441a      	add	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
  }
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2400000c 	.word	0x2400000c

080012bc <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv>:

bool  myhal::NoneBlockSystemTickDelay::checkExpiration(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
if(Wait != 0)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d015      	beq.n	80012f8 <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x3c>
	  if ((HAL_GetTick() - Tickstart) < Wait) return(false); //time is not expired
 80012cc:	f000 f8e0 	bl	8001490 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	1ad2      	subs	r2, r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	bf34      	ite	cc
 80012e0:	2301      	movcc	r3, #1
 80012e2:	2300      	movcs	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x32>
 80012ea:	2300      	movs	r3, #0
 80012ec:	e005      	b.n	80012fa <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x3e>
	  else
	  {
					  //time is expired
		  Wait = 0;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
		  return(true);
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x3e>
	  }
else  return(true); //time is expired or has not been set
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <_ZN5myhal11STM32H7_ledC1Ev>:
 *      Author: dominique.kunz
 */

#include "STM32H7led.h"

myhal::STM32H7_led::STM32H7_led(void) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <_ZN5myhal11STM32H7_ledC1Ev+0x1c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
}
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	08006c30 	.word	0x08006c30

08001324 <_ZN5myhal11STM32H7_ledD1Ev>:
	STM32H7_led::Port=Port;
	STM32H7_led::Pin=Pin;
}


myhal::STM32H7_led::~STM32H7_led() {
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <_ZN5myhal11STM32H7_ledD1Ev+0x1c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	08006c30 	.word	0x08006c30

08001344 <_ZN5myhal11STM32H7_ledD0Ev>:
myhal::STM32H7_led::~STM32H7_led() {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
}
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffe9 	bl	8001324 <_ZN5myhal11STM32H7_ledD1Ev>
 8001352:	210c      	movs	r1, #12
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f005 fba9 	bl	8006aac <_ZdlPvj>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_ZN5myhal11STM32H7_led9toggleLEDEv>:

void myhal::STM32H7_led::toggleLED(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_TogglePin(Port, Pin);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	891b      	ldrh	r3, [r3, #8]
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f000 ffab 	bl	80022d2 <HAL_GPIO_TogglePin>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138a:	2003      	movs	r0, #3
 800138c:	f000 f982 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001390:	f001 ffaa 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_Init+0x68>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	4913      	ldr	r1, [pc, #76]	; (80013f0 <HAL_Init+0x6c>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_Init+0x6c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_Init+0x70>)
 80013c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_Init+0x74>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f814 	bl	80013fc <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e002      	b.n	80013e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fc4b 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400
 80013f0:	08006be8 	.word	0x08006be8
 80013f4:	24000004 	.word	0x24000004
 80013f8:	24000000 	.word	0x24000000

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e021      	b.n	8001454 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_InitTick+0x64>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_InitTick+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f959 	bl	80016de <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f931 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x68>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2400000c 	.word	0x2400000c
 8001460:	24000000 	.word	0x24000000
 8001464:	24000008 	.word	0x24000008

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2400000c 	.word	0x2400000c
 800148c:	240007cc 	.word	0x240007cc

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	240007cc 	.word	0x240007cc

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2400000c 	.word	0x2400000c

080014f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetREVID+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0c1b      	lsrs	r3, r3, #16
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	5c001000 	.word	0x5c001000

08001508 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001518:	4904      	ldr	r1, [pc, #16]	; (800152c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58000400 	.word	0x58000400

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <__NVIC_SetPriorityGrouping+0x40>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	4313      	orrs	r3, r2
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x40>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	05fa0000 	.word	0x05fa0000

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff47 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb2 	bl	8001650 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0cf      	b.n	80018aa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001710:	2b00      	cmp	r3, #0
 8001712:	d106      	bne.n	8001722 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2223      	movs	r2, #35	; 0x23
 8001718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fac5 	bl	8000cac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <HAL_ETH_Init+0x1bc>)
 8001724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001728:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <HAL_ETH_Init+0x1bc>)
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001732:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <HAL_ETH_Init+0x1bc>)
 8001734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7a1b      	ldrb	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d103      	bne.n	8001750 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fedd 	bl	8001508 <HAL_SYSCFG_ETHInterfaceSelect>
 800174e:	e003      	b.n	8001758 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001750:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001754:	f7ff fed8 	bl	8001508 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_ETH_Init+0x1c0>)
 800175a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001772:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001774:	f7ff fe8c 	bl	8001490 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800177a:	e011      	b.n	80017a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800177c:	f7ff fe88 	bl	8001490 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800178a:	d909      	bls.n	80017a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2204      	movs	r2, #4
 8001790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	22e0      	movs	r2, #224	; 0xe0
 8001798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e084      	b.n	80018aa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e4      	bne.n	800177c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f886 	bl	80018c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017b8:	f001 ff10 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a3f      	ldr	r2, [pc, #252]	; (80018bc <HAL_ETH_Init+0x1c4>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9a      	lsrs	r2, r3, #18
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3a01      	subs	r2, #1
 80017cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fa71 	bl	8001cb8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80017e2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	22e0      	movs	r2, #224	; 0xe0
 800180e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e049      	b.n	80018aa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_ETH_Init+0x1c8>)
 8001824:	4013      	ands	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6952      	ldr	r2, [r2, #20]
 800182a:	0051      	lsls	r1, r2, #1
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	430b      	orrs	r3, r1
 8001832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001836:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fad9 	bl	8001df2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fb1f 	bl	8001e84 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	3305      	adds	r3, #5
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	021a      	lsls	r2, r3, #8
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	3303      	adds	r3, #3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	061a      	lsls	r2, r3, #24
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	3302      	adds	r3, #2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	3301      	adds	r3, #1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001884:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001892:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001894:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2210      	movs	r2, #16
 80018a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	58024400 	.word	0x58024400
 80018b8:	58000400 	.word	0x58000400
 80018bc:	431bde83 	.word	0x431bde83
 80018c0:	ffff8001 	.word	0xffff8001

080018c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018de:	f001 fe7d 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80018e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d908      	bls.n	80018fe <HAL_ETH_SetMDIOClockRange+0x3a>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d804      	bhi.n	80018fe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e027      	b.n	800194e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4a18      	ldr	r2, [pc, #96]	; (8001964 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d908      	bls.n	8001918 <HAL_ETH_SetMDIOClockRange+0x54>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d204      	bcs.n	8001918 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e01a      	b.n	800194e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d303      	bcc.n	8001928 <HAL_ETH_SetMDIOClockRange+0x64>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d911      	bls.n	800194c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d908      	bls.n	8001942 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d804      	bhi.n	8001942 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e005      	b.n	800194e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e000      	b.n	800194e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800194c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	01312cff 	.word	0x01312cff
 8001964:	02160ebf 	.word	0x02160ebf
 8001968:	03938700 	.word	0x03938700
 800196c:	05f5e0ff 	.word	0x05f5e0ff
 8001970:	08f0d17f 	.word	0x08f0d17f

08001974 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001986:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	791b      	ldrb	r3, [r3, #4]
 800198c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800198e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	7b1b      	ldrb	r3, [r3, #12]
 8001994:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	7b5b      	ldrb	r3, [r3, #13]
 800199c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800199e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	7b9b      	ldrb	r3, [r3, #14]
 80019a4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	7bdb      	ldrb	r3, [r3, #15]
 80019ac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	7c12      	ldrb	r2, [r2, #16]
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d102      	bne.n	80019be <ETH_SetMACConfig+0x4a>
 80019b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019bc:	e000      	b.n	80019c0 <ETH_SetMACConfig+0x4c>
 80019be:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	7c52      	ldrb	r2, [r2, #17]
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d102      	bne.n	80019d0 <ETH_SetMACConfig+0x5c>
 80019ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ce:	e000      	b.n	80019d2 <ETH_SetMACConfig+0x5e>
 80019d0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	7c9b      	ldrb	r3, [r3, #18]
 80019d8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019da:	431a      	orrs	r2, r3
               macconf->Speed |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80019e0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80019e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7f1b      	ldrb	r3, [r3, #28]
 80019ec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80019ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	7f5b      	ldrb	r3, [r3, #29]
 80019f4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	7f92      	ldrb	r2, [r2, #30]
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d102      	bne.n	8001a06 <ETH_SetMACConfig+0x92>
 8001a00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a04:	e000      	b.n	8001a08 <ETH_SetMACConfig+0x94>
 8001a06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	7fdb      	ldrb	r3, [r3, #31]
 8001a0e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a18:	2a00      	cmp	r2, #0
 8001a1a:	d102      	bne.n	8001a22 <ETH_SetMACConfig+0xae>
 8001a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a20:	e000      	b.n	8001a24 <ETH_SetMACConfig+0xb0>
 8001a22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a24:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a32:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a34:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <ETH_SetMACConfig+0x22c>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a5e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a68:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a72:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	d102      	bne.n	8001a86 <ETH_SetMACConfig+0x112>
 8001a80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a84:	e000      	b.n	8001a88 <ETH_SetMACConfig+0x114>
 8001a86:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a88:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <ETH_SetMACConfig+0x230>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	68f9      	ldr	r1, [r7, #12]
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <ETH_SetMACConfig+0x234>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ad0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ad6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d101      	bne.n	8001ae6 <ETH_SetMACConfig+0x172>
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	e000      	b.n	8001ae8 <ETH_SetMACConfig+0x174>
 8001ae6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ae8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001afa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b10:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b18:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	f023 0103 	bic.w	r1, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b3e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d101      	bne.n	8001b62 <ETH_SetMACConfig+0x1ee>
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	e000      	b.n	8001b64 <ETH_SetMACConfig+0x1f0>
 8001b62:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b6c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001b76:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b84:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	00048083 	.word	0x00048083
 8001ba4:	c0f88000 	.word	0xc0f88000
 8001ba8:	fffffef0 	.word	0xfffffef0

08001bac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <ETH_SetDMAConfig+0xf8>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	6811      	ldr	r1, [r2, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	791b      	ldrb	r3, [r3, #4]
 8001bd8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	7b1b      	ldrb	r3, [r3, #12]
 8001be4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <ETH_SetDMAConfig+0xfc>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c04:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	7b5b      	ldrb	r3, [r3, #13]
 8001c0a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <ETH_SetDMAConfig+0x100>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c30:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	7d1b      	ldrb	r3, [r3, #20]
 8001c3c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	7f5b      	ldrb	r3, [r3, #29]
 8001c44:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <ETH_SetDMAConfig+0x104>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c66:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	7f1b      	ldrb	r3, [r3, #28]
 8001c6e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <ETH_SetDMAConfig+0x108>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c94:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	ffff87fd 	.word	0xffff87fd
 8001ca8:	ffff2ffe 	.word	0xffff2ffe
 8001cac:	fffec000 	.word	0xfffec000
 8001cb0:	ffc0efef 	.word	0xffc0efef
 8001cb4:	7fc0ffff 	.word	0x7fc0ffff

08001cb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0a4      	sub	sp, #144	; 0x90
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d10:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d14:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d32:	2300      	movs	r3, #0
 8001d34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d50:	2320      	movs	r3, #32
 8001d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d6c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d92:	2300      	movs	r3, #0
 8001d94:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fde6 	bl	8001974 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001dac:	2301      	movs	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dc6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dd0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001dd8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fee1 	bl	8001bac <ETH_SetDMAConfig>
}
 8001dea:	bf00      	nop
 8001dec:	3790      	adds	r7, #144	; 0x90
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e01d      	b.n	8001e3c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68d9      	ldr	r1, [r3, #12]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	3206      	adds	r2, #6
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d9de      	bls.n	8001e00 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e50:	461a      	mov	r2, r3
 8001e52:	2303      	movs	r3, #3
 8001e54:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e023      	b.n	8001eda <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6919      	ldr	r1, [r3, #16]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	3212      	adds	r2, #18
 8001ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d9d8      	bls.n	8001e92 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	461a      	mov	r2, r3
 8001f08:	2303      	movs	r3, #3
 8001f0a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f4e:	4b89      	ldr	r3, [pc, #548]	; (8002174 <HAL_GPIO_Init+0x234>)
 8001f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f52:	e194      	b.n	800227e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8186 	beq.w	8002278 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x44>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 0201 	and.w	r2, r3, #1
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d017      	beq.n	8002022 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d123      	bne.n	8002076 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	69b9      	ldr	r1, [r7, #24]
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0203 	and.w	r2, r3, #3
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80e0 	beq.w	8002278 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x238>)
 80020ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020be:	4a2e      	ldr	r2, [pc, #184]	; (8002178 <HAL_GPIO_Init+0x238>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_GPIO_Init+0x238>)
 80020ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d6:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_GPIO_Init+0x23c>)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a20      	ldr	r2, [pc, #128]	; (8002180 <HAL_GPIO_Init+0x240>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d052      	beq.n	80021a8 <HAL_GPIO_Init+0x268>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_GPIO_Init+0x244>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_GPIO_Init+0x22e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <HAL_GPIO_Init+0x248>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02b      	beq.n	800216a <HAL_GPIO_Init+0x22a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_GPIO_Init+0x24c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d025      	beq.n	8002166 <HAL_GPIO_Init+0x226>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <HAL_GPIO_Init+0x250>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <HAL_GPIO_Init+0x222>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_GPIO_Init+0x254>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d019      	beq.n	800215e <HAL_GPIO_Init+0x21e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_GPIO_Init+0x258>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x21a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_GPIO_Init+0x25c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x216>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_GPIO_Init+0x260>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x212>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_GPIO_Init+0x264>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x20e>
 800214a:	2309      	movs	r3, #9
 800214c:	e02d      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 800214e:	230a      	movs	r3, #10
 8002150:	e02b      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 8002152:	2308      	movs	r3, #8
 8002154:	e029      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 8002156:	2307      	movs	r3, #7
 8002158:	e027      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 800215a:	2306      	movs	r3, #6
 800215c:	e025      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 800215e:	2305      	movs	r3, #5
 8002160:	e023      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 8002162:	2304      	movs	r3, #4
 8002164:	e021      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 8002166:	2303      	movs	r3, #3
 8002168:	e01f      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 800216a:	2302      	movs	r3, #2
 800216c:	e01d      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 800216e:	2301      	movs	r3, #1
 8002170:	e01b      	b.n	80021aa <HAL_GPIO_Init+0x26a>
 8002172:	bf00      	nop
 8002174:	58000080 	.word	0x58000080
 8002178:	58024400 	.word	0x58024400
 800217c:	58000400 	.word	0x58000400
 8002180:	58020000 	.word	0x58020000
 8002184:	58020400 	.word	0x58020400
 8002188:	58020800 	.word	0x58020800
 800218c:	58020c00 	.word	0x58020c00
 8002190:	58021000 	.word	0x58021000
 8002194:	58021400 	.word	0x58021400
 8002198:	58021800 	.word	0x58021800
 800219c:	58021c00 	.word	0x58021c00
 80021a0:	58022000 	.word	0x58022000
 80021a4:	58022400 	.word	0x58022400
 80021a8:	2300      	movs	r3, #0
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	f002 0203 	and.w	r2, r2, #3
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	4093      	lsls	r3, r2
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ba:	4938      	ldr	r1, [pc, #224]	; (800229c <HAL_GPIO_Init+0x35c>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3301      	adds	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f ae63 	bne.w	8001f54 <HAL_GPIO_Init+0x14>
  }
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	3724      	adds	r7, #36	; 0x24
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	58000400 	.word	0x58000400

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	041a      	lsls	r2, r3, #16
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	400b      	ands	r3, r1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002310:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_HSEM_FastTake+0x2c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3320      	adds	r3, #32
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_HSEM_FastTake+0x30>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	58026400 	.word	0x58026400
 8002338:	80000300 	.word	0x80000300

0800233c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002346:	4906      	ldr	r1, [pc, #24]	; (8002360 <HAL_HSEM_Release+0x24>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	58026400 	.word	0x58026400

08002364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b08f      	sub	sp, #60	; 0x3c
 8002368:	af0a      	add	r7, sp, #40	; 0x28
 800236a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e116      	b.n	80025a4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe fdc3 	bl	8000f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 f8dd 	bl	8006574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	687e      	ldr	r6, [r7, #4]
 80023c2:	466d      	mov	r5, sp
 80023c4:	f106 0410 	add.w	r4, r6, #16
 80023c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d8:	1d33      	adds	r3, r6, #4
 80023da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023dc:	6838      	ldr	r0, [r7, #0]
 80023de:	f004 f85b 	bl	8006498 <USB_CoreInit>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d7      	b.n	80025a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f004 f8cb 	bl	8006596 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e04a      	b.n	800249c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	333d      	adds	r3, #61	; 0x3d
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	333c      	adds	r3, #60	; 0x3c
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	b298      	uxth	r0, r3
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3356      	adds	r3, #86	; 0x56
 8002442:	4602      	mov	r2, r0
 8002444:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3340      	adds	r3, #64	; 0x40
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3344      	adds	r3, #68	; 0x44
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3348      	adds	r3, #72	; 0x48
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	334c      	adds	r3, #76	; 0x4c
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	3301      	adds	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d3af      	bcc.n	8002406 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e044      	b.n	8002536 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	3301      	adds	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	d3b5      	bcc.n	80024ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	687e      	ldr	r6, [r7, #4]
 8002548:	466d      	mov	r5, sp
 800254a:	f106 0410 	add.w	r4, r6, #16
 800254e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800255a:	e885 0003 	stmia.w	r5, {r0, r1}
 800255e:	1d33      	adds	r3, r6, #4
 8002560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f004 f864 	bl	8006630 <USB_DevInit>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e014      	b.n	80025a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f80a 	bl	80025ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f004 fa22 	bl	80069e6 <USB_DevDisconnect>

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	10000003 	.word	0x10000003

080025f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	2b06      	cmp	r3, #6
 8002606:	d00a      	beq.n	800261e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e040      	b.n	800269c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e03e      	b.n	800269c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800261e:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002626:	491f      	ldr	r1, [pc, #124]	; (80026a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800262e:	f7fe ff2f 	bl	8001490 <HAL_GetTick>
 8002632:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002634:	e009      	b.n	800264a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002636:	f7fe ff2b 	bl	8001490 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002644:	d901      	bls.n	800264a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e028      	b.n	800269c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800264a:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002656:	d1ee      	bne.n	8002636 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b1e      	cmp	r3, #30
 800265c:	d008      	beq.n	8002670 <HAL_PWREx_ConfigSupply+0x7c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b2e      	cmp	r3, #46	; 0x2e
 8002662:	d005      	beq.n	8002670 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b1d      	cmp	r3, #29
 8002668:	d002      	beq.n	8002670 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b2d      	cmp	r3, #45	; 0x2d
 800266e:	d114      	bne.n	800269a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002670:	f7fe ff0e 	bl	8001490 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002676:	e009      	b.n	800268c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002678:	f7fe ff0a 	bl	8001490 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002686:	d901      	bls.n	800268c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e007      	b.n	800269c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d1ee      	bne.n	8002678 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	58024800 	.word	0x58024800

080026a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	58024800 	.word	0x58024800

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	; 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f000 bc48 	b.w	8002f6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8088 	beq.w	80027fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ea:	4b99      	ldr	r3, [pc, #612]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f4:	4b96      	ldr	r3, [pc, #600]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d007      	beq.n	8002710 <HAL_RCC_OscConfig+0x48>
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	2b18      	cmp	r3, #24
 8002704:	d111      	bne.n	800272a <HAL_RCC_OscConfig+0x62>
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d06d      	beq.n	80027f8 <HAL_RCC_OscConfig+0x130>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d169      	bne.n	80027f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f000 bc21 	b.w	8002f6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x7a>
 8002734:	4b86      	ldr	r3, [pc, #536]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a85      	ldr	r2, [pc, #532]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e02e      	b.n	80027a0 <HAL_RCC_OscConfig+0xd8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x9c>
 800274a:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a80      	ldr	r2, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7d      	ldr	r2, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800275c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xd8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0xc0>
 800276e:	4b78      	ldr	r3, [pc, #480]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a77      	ldr	r2, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a74      	ldr	r2, [pc, #464]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xd8>
 8002788:	4b71      	ldr	r3, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a70      	ldr	r2, [pc, #448]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b6e      	ldr	r3, [pc, #440]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6d      	ldr	r2, [pc, #436]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fe72 	bl	8001490 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fe6e 	bl	8001490 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e3d4      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe5e 	bl	8001490 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fe5a 	bl	8001490 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e3c0      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ea:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x110>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80ca 	beq.w	800299c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002808:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002810:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002812:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_RCC_OscConfig+0x166>
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2b18      	cmp	r3, #24
 8002822:	d156      	bne.n	80028d2 <HAL_RCC_OscConfig+0x20a>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d151      	bne.n	80028d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282e:	4b48      	ldr	r3, [pc, #288]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_RCC_OscConfig+0x17e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e392      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002846:	4b42      	ldr	r3, [pc, #264]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0219 	bic.w	r2, r3, #25
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	493f      	ldr	r1, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fe1a 	bl	8001490 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe fe16 	bl	8001490 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e37c      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	f7fe fe37 	bl	80014f0 <HAL_GetREVID>
 8002882:	4603      	mov	r3, r0
 8002884:	f241 0203 	movw	r2, #4099	; 0x1003
 8002888:	4293      	cmp	r3, r2
 800288a:	d817      	bhi.n	80028bc <HAL_RCC_OscConfig+0x1f4>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d108      	bne.n	80028a6 <HAL_RCC_OscConfig+0x1de>
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800289c:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800289e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a4:	e07a      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	031b      	lsls	r3, r3, #12
 80028b4:	4926      	ldr	r1, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ba:	e06f      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	4921      	ldr	r1, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	e064      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d047      	beq.n	800296a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0219 	bic.w	r2, r3, #25
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	491a      	ldr	r1, [pc, #104]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fdd0 	bl	8001490 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fdcc 	bl	8001490 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e332      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	f7fe fded 	bl	80014f0 <HAL_GetREVID>
 8002916:	4603      	mov	r3, r0
 8002918:	f241 0203 	movw	r2, #4099	; 0x1003
 800291c:	4293      	cmp	r3, r2
 800291e:	d819      	bhi.n	8002954 <HAL_RCC_OscConfig+0x28c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d108      	bne.n	800293a <HAL_RCC_OscConfig+0x272>
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002936:	6053      	str	r3, [r2, #4]
 8002938:	e030      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	031b      	lsls	r3, r3, #12
 8002948:	4901      	ldr	r1, [pc, #4]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
 800294e:	e025      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
 8002950:	58024400 	.word	0x58024400
 8002954:	4b9a      	ldr	r3, [pc, #616]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4997      	ldr	r1, [pc, #604]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b95      	ldr	r3, [pc, #596]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a94      	ldr	r2, [pc, #592]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fd8b 	bl	8001490 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fd87 	bl	8001490 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e2ed      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002990:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a9 	beq.w	8002afc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	4b85      	ldr	r3, [pc, #532]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b4:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d007      	beq.n	80029d0 <HAL_RCC_OscConfig+0x308>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b18      	cmp	r3, #24
 80029c4:	d13a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x374>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d135      	bne.n	8002a3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d0:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x320>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e2c1      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e8:	f7fe fd82 	bl	80014f0 <HAL_GetREVID>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d817      	bhi.n	8002a26 <HAL_RCC_OscConfig+0x35e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x348>
 80029fe:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a06:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a0e:	e075      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a10:	4b6b      	ldr	r3, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	069b      	lsls	r3, r3, #26
 8002a1e:	4968      	ldr	r1, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a24:	e06a      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a26:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	4962      	ldr	r1, [pc, #392]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a3a:	e05f      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d042      	beq.n	8002aca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5d      	ldr	r2, [pc, #372]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fd1e 	bl	8001490 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a58:	f7fe fd1a 	bl	8001490 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e280      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a6a:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a76:	f7fe fd3b 	bl	80014f0 <HAL_GetREVID>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d817      	bhi.n	8002ab4 <HAL_RCC_OscConfig+0x3ec>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d108      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3d6>
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a9a:	6053      	str	r3, [r2, #4]
 8002a9c:	e02e      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
 8002a9e:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	069b      	lsls	r3, r3, #26
 8002aac:	4944      	ldr	r1, [pc, #272]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
 8002ab2:	e023      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	493f      	ldr	r1, [pc, #252]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
 8002ac8:	e018      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fcdb 	bl	8001490 <HAL_GetTick>
 8002ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ade:	f7fe fcd7 	bl	8001490 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e23d      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d036      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d019      	beq.n	8002b44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fcb8 	bl	8001490 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fe fcb4 	bl	8001490 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e21a      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x45c>
 8002b42:	e018      	b.n	8002b76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fc9e 	bl	8001490 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fc9a 	bl	8001490 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e200      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d039      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fc7b 	bl	8001490 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b9e:	f7fe fc77 	bl	8001490 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1dd      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x4d6>
 8002bbc:	e01b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
 8002bbe:	bf00      	nop
 8002bc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bc4:	4b9b      	ldr	r3, [pc, #620]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a9a      	ldr	r2, [pc, #616]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fc5e 	bl	8001490 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd8:	f7fe fc5a 	bl	8001490 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1c0      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bea:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8081 	beq.w	8002d06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c04:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_OscConfig+0x770>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x770>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c10:	f7fe fc3e 	bl	8001490 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fe fc3a 	bl	8001490 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1a0      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x770>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x584>
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e02d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5e0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x5a6>
 8002c54:	4b77      	ldr	r3, [pc, #476]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a76      	ldr	r2, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	4b74      	ldr	r3, [pc, #464]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a73      	ldr	r2, [pc, #460]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c66:	f023 0304 	bic.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5e0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5c8>
 8002c76:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a6b      	ldr	r2, [pc, #428]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5e0>
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a64      	ldr	r2, [pc, #400]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002ca2:	f023 0304 	bic.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d015      	beq.n	8002cdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fbee 	bl	8001490 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fbea 	bl	8001490 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e14e      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cce:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ee      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x5f0>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fbd8 	bl	8001490 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fbd4 	bl	8001490 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e138      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ee      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 812d 	beq.w	8002f6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d10:	4b48      	ldr	r3, [pc, #288]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d18:	2b18      	cmp	r3, #24
 8002d1a:	f000 80bd 	beq.w	8002e98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	f040 809e 	bne.w	8002e64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a41      	ldr	r2, [pc, #260]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fbac 	bl	8001490 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fba8 	bl	8001490 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e10e      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4e:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x774>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	4931      	ldr	r1, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	628b      	str	r3, [r1, #40]	; 0x28
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	3b01      	subs	r3, #1
 8002d84:	025b      	lsls	r3, r3, #9
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	061b      	lsls	r3, r3, #24
 8002da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002da4:	4923      	ldr	r1, [pc, #140]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_RCC_OscConfig+0x778>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dc2:	00d2      	lsls	r2, r2, #3
 8002dc4:	491b      	ldr	r1, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f023 020c 	bic.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4917      	ldr	r1, [pc, #92]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ddc:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f023 0202 	bic.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	4912      	ldr	r1, [pc, #72]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fb31 	bl	8001490 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e30:	e011      	b.n	8002e56 <HAL_RCC_OscConfig+0x78e>
 8002e32:	bf00      	nop
 8002e34:	58024400 	.word	0x58024400
 8002e38:	58024800 	.word	0x58024800
 8002e3c:	fffffc0c 	.word	0xfffffc0c
 8002e40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fb24 	bl	8001490 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e08a      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x77c>
 8002e62:	e082      	b.n	8002f6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fb0e 	bl	8001490 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe fb0a 	bl	8001490 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e070      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x7b0>
 8002e96:	e068      	b.n	8002f6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e9e:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d031      	beq.n	8002f10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d12a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d122      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	0a5b      	lsrs	r3, r3, #9
 8002ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d111      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d108      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0e1b      	lsrs	r3, r3, #24
 8002f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e02b      	b.n	8002f6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d01f      	beq.n	8002f6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f36:	f7fe faab 	bl	8001490 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f3c:	bf00      	nop
 8002f3e:	f7fe faa7 	bl	8001490 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d0f9      	beq.n	8002f3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_OscConfig+0x8b0>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f56:	00d2      	lsls	r2, r2, #3
 8002f58:	4906      	ldr	r1, [pc, #24]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_RCC_OscConfig+0x8ac>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58024400 	.word	0x58024400
 8002f78:	ffff0007 	.word	0xffff0007

08002f7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e19c      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b8a      	ldr	r3, [pc, #552]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d910      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b87      	ldr	r3, [pc, #540]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 020f 	bic.w	r2, r3, #15
 8002fa6:	4985      	ldr	r1, [pc, #532]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b83      	ldr	r3, [pc, #524]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e184      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d908      	bls.n	8002fee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fdc:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	4975      	ldr	r1, [pc, #468]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	4b70      	ldr	r3, [pc, #448]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003006:	429a      	cmp	r2, r3
 8003008:	d908      	bls.n	800301c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800300a:	4b6d      	ldr	r3, [pc, #436]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	496a      	ldr	r1, [pc, #424]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003018:	4313      	orrs	r3, r2
 800301a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003034:	429a      	cmp	r2, r3
 8003036:	d908      	bls.n	800304a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	495e      	ldr	r1, [pc, #376]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003046:	4313      	orrs	r3, r2
 8003048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003062:	429a      	cmp	r2, r3
 8003064:	d908      	bls.n	8003078 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003066:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4953      	ldr	r1, [pc, #332]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003074:	4313      	orrs	r3, r2
 8003076:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	429a      	cmp	r2, r3
 8003092:	d908      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f023 020f 	bic.w	r2, r3, #15
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4947      	ldr	r1, [pc, #284]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d055      	beq.n	800315e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	4940      	ldr	r1, [pc, #256]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030cc:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d121      	bne.n	800311c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0f6      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d115      	bne.n	800311c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0ea      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d107      	bne.n	800310c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030fc:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0de      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d6      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f023 0207 	bic.w	r2, r3, #7
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4925      	ldr	r1, [pc, #148]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800312a:	4313      	orrs	r3, r2
 800312c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312e:	f7fe f9af 	bl	8001490 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003134:	e00a      	b.n	800314c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003136:	f7fe f9ab 	bl	8001490 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0be      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	429a      	cmp	r2, r3
 800315c:	d1eb      	bne.n	8003136 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	429a      	cmp	r2, r3
 8003178:	d208      	bcs.n	800318c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f023 020f 	bic.w	r2, r3, #15
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	490e      	ldr	r1, [pc, #56]	; (80031c0 <HAL_RCC_ClockConfig+0x244>)
 8003188:	4313      	orrs	r3, r2
 800318a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d214      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 020f 	bic.w	r2, r3, #15
 80031a2:	4906      	ldr	r1, [pc, #24]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_RCC_ClockConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e086      	b.n	80032ca <HAL_RCC_ClockConfig+0x34e>
 80031bc:	52002000 	.word	0x52002000
 80031c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031dc:	429a      	cmp	r2, r3
 80031de:	d208      	bcs.n	80031f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031e0:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	4939      	ldr	r1, [pc, #228]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d010      	beq.n	8003220 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800320a:	429a      	cmp	r2, r3
 800320c:	d208      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	492e      	ldr	r1, [pc, #184]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 800321c:	4313      	orrs	r3, r2
 800321e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003238:	429a      	cmp	r2, r3
 800323a:	d208      	bcs.n	800324e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4922      	ldr	r1, [pc, #136]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 800324a:	4313      	orrs	r3, r2
 800324c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d010      	beq.n	800327c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003266:	429a      	cmp	r2, r3
 8003268:	d208      	bcs.n	800327c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	4917      	ldr	r1, [pc, #92]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 8003278:	4313      	orrs	r3, r2
 800327a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800327c:	f000 f834 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	4912      	ldr	r1, [pc, #72]	; (80032d8 <HAL_RCC_ClockConfig+0x35c>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800329a:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x358>)
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <HAL_RCC_ClockConfig+0x35c>)
 80032a4:	5cd3      	ldrb	r3, [r2, r3]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x360>)
 80032b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_RCC_ClockConfig+0x364>)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x368>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe f89c 	bl	80013fc <HAL_InitTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	58024400 	.word	0x58024400
 80032d8:	08006be8 	.word	0x08006be8
 80032dc:	24000004 	.word	0x24000004
 80032e0:	24000000 	.word	0x24000000
 80032e4:	24000008 	.word	0x24000008

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ee:	4bb3      	ldr	r3, [pc, #716]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f6:	2b18      	cmp	r3, #24
 80032f8:	f200 8155 	bhi.w	80035a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003369 	.word	0x08003369
 8003308:	080035a7 	.word	0x080035a7
 800330c:	080035a7 	.word	0x080035a7
 8003310:	080035a7 	.word	0x080035a7
 8003314:	080035a7 	.word	0x080035a7
 8003318:	080035a7 	.word	0x080035a7
 800331c:	080035a7 	.word	0x080035a7
 8003320:	080035a7 	.word	0x080035a7
 8003324:	0800338f 	.word	0x0800338f
 8003328:	080035a7 	.word	0x080035a7
 800332c:	080035a7 	.word	0x080035a7
 8003330:	080035a7 	.word	0x080035a7
 8003334:	080035a7 	.word	0x080035a7
 8003338:	080035a7 	.word	0x080035a7
 800333c:	080035a7 	.word	0x080035a7
 8003340:	080035a7 	.word	0x080035a7
 8003344:	08003395 	.word	0x08003395
 8003348:	080035a7 	.word	0x080035a7
 800334c:	080035a7 	.word	0x080035a7
 8003350:	080035a7 	.word	0x080035a7
 8003354:	080035a7 	.word	0x080035a7
 8003358:	080035a7 	.word	0x080035a7
 800335c:	080035a7 	.word	0x080035a7
 8003360:	080035a7 	.word	0x080035a7
 8003364:	0800339b 	.word	0x0800339b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003368:	4b94      	ldr	r3, [pc, #592]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003374:	4b91      	ldr	r3, [pc, #580]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	08db      	lsrs	r3, r3, #3
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	4a90      	ldr	r2, [pc, #576]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003386:	e111      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003388:	4b8d      	ldr	r3, [pc, #564]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800338a:	61bb      	str	r3, [r7, #24]
      break;
 800338c:	e10e      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800338e:	4b8d      	ldr	r3, [pc, #564]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003390:	61bb      	str	r3, [r7, #24]
      break;
 8003392:	e10b      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003394:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003396:	61bb      	str	r3, [r7, #24]
      break;
 8003398:	e108      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800339a:	4b88      	ldr	r3, [pc, #544]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033a4:	4b85      	ldr	r3, [pc, #532]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033b0:	4b82      	ldr	r3, [pc, #520]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033ba:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80e1 	beq.w	80035a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f000 8083 	beq.w	80034ec <HAL_RCC_GetSysClockFreq+0x204>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	f200 80a1 	bhi.w	8003530 <HAL_RCC_GetSysClockFreq+0x248>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x114>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d056      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033fa:	e099      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033fc:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02d      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003408:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	08db      	lsrs	r3, r3, #3
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	4a6b      	ldr	r2, [pc, #428]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003442:	ed97 6a02 	vldr	s12, [r7, #8]
 8003446:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800344a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003462:	e087      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003476:	4b51      	ldr	r3, [pc, #324]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003486:	ed97 6a02 	vldr	s12, [r7, #8]
 800348a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800348e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800349a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034a6:	e065      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ba:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80034d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ea:	e043      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003512:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800352e:	e021      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800353e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003552:	ed97 6a02 	vldr	s12, [r7, #8]
 8003556:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800355a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003572:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	0a5b      	lsrs	r3, r3, #9
 800357a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800357e:	3301      	adds	r3, #1
 8003580:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800358c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003598:	ee17 3a90 	vmov	r3, s15
 800359c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800359e:	e005      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
      break;
 80035a4:	e002      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035a8:	61bb      	str	r3, [r7, #24]
      break;
 80035aa:	bf00      	nop
  }

  return sysclockfreq;
 80035ac:	69bb      	ldr	r3, [r7, #24]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
 80035c0:	03d09000 	.word	0x03d09000
 80035c4:	003d0900 	.word	0x003d0900
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	46000000 	.word	0x46000000
 80035d0:	4c742400 	.word	0x4c742400
 80035d4:	4a742400 	.word	0x4a742400
 80035d8:	4af42400 	.word	0x4af42400

080035dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035e2:	f7ff fe81 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_GetHCLKFreq+0x50>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490f      	ldr	r1, [pc, #60]	; (8003630 <HAL_RCC_GetHCLKFreq+0x54>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	fa22 f303 	lsr.w	r3, r2, r3
 80035fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_RCC_GetHCLKFreq+0x50>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <HAL_RCC_GetHCLKFreq+0x54>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	fa22 f303 	lsr.w	r3, r2, r3
 8003616:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_RCC_GetHCLKFreq+0x58>)
 8003618:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800361a:	4a07      	ldr	r2, [pc, #28]	; (8003638 <HAL_RCC_GetHCLKFreq+0x5c>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <HAL_RCC_GetHCLKFreq+0x58>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	58024400 	.word	0x58024400
 8003630:	08006be8 	.word	0x08006be8
 8003634:	24000004 	.word	0x24000004
 8003638:	24000000 	.word	0x24000000

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003640:	f7ff ffcc 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4904      	ldr	r1, [pc, #16]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	58024400 	.word	0x58024400
 8003664:	08006be8 	.word	0x08006be8

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800366c:	f7ff ffb6 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4904      	ldr	r1, [pc, #16]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	58024400 	.word	0x58024400
 8003690:	08006be8 	.word	0x08006be8

08003694 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003698:	b0ca      	sub	sp, #296	; 0x128
 800369a:	af00      	add	r7, sp, #0
 800369c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80036b8:	2500      	movs	r5, #0
 80036ba:	ea54 0305 	orrs.w	r3, r4, r5
 80036be:	d049      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036ca:	d02f      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036d0:	d828      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036d6:	d01a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036dc:	d822      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e6:	d007      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036e8:	e01c      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ea:	4bb8      	ldr	r3, [pc, #736]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	4ab7      	ldr	r2, [pc, #732]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036f6:	e01a      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fc:	3308      	adds	r3, #8
 80036fe:	2102      	movs	r1, #2
 8003700:	4618      	mov	r0, r3
 8003702:	f001 fc8f 	bl	8005024 <RCCEx_PLL2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800370c:	e00f      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003712:	3328      	adds	r3, #40	; 0x28
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fd36 	bl	8005188 <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003722:	e004      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003736:	4ba5      	ldr	r3, [pc, #660]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003744:	4aa1      	ldr	r2, [pc, #644]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003746:	430b      	orrs	r3, r1
 8003748:	6513      	str	r3, [r2, #80]	; 0x50
 800374a:	e003      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003760:	f04f 0900 	mov.w	r9, #0
 8003764:	ea58 0309 	orrs.w	r3, r8, r9
 8003768:	d047      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	2b04      	cmp	r3, #4
 8003772:	d82a      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	08003791 	.word	0x08003791
 8003780:	0800379f 	.word	0x0800379f
 8003784:	080037b5 	.word	0x080037b5
 8003788:	080037d3 	.word	0x080037d3
 800378c:	080037d3 	.word	0x080037d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4b8e      	ldr	r3, [pc, #568]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a8d      	ldr	r2, [pc, #564]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800379c:	e01a      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a2:	3308      	adds	r3, #8
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fc3c 	bl	8005024 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037b2:	e00f      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b8:	3328      	adds	r3, #40	; 0x28
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fce3 	bl	8005188 <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c8:	e004      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037dc:	4b7b      	ldr	r3, [pc, #492]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	f023 0107 	bic.w	r1, r3, #7
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	4a78      	ldr	r2, [pc, #480]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6513      	str	r3, [r2, #80]	; 0x50
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003806:	f04f 0b00 	mov.w	fp, #0
 800380a:	ea5a 030b 	orrs.w	r3, sl, fp
 800380e:	d04c      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381a:	d030      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800381c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003820:	d829      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003822:	2bc0      	cmp	r3, #192	; 0xc0
 8003824:	d02d      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003826:	2bc0      	cmp	r3, #192	; 0xc0
 8003828:	d825      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800382a:	2b80      	cmp	r3, #128	; 0x80
 800382c:	d018      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d821      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d007      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800383a:	e01c      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a62      	ldr	r2, [pc, #392]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003848:	e01c      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	3308      	adds	r3, #8
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fbe6 	bl	8005024 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800385e:	e011      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003864:	3328      	adds	r3, #40	; 0x28
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fc8d 	bl	8005188 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800388c:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	4a4c      	ldr	r2, [pc, #304]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389c:	430b      	orrs	r3, r1
 800389e:	6513      	str	r3, [r2, #80]	; 0x50
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80038b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80038c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80038c4:	460b      	mov	r3, r1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	d053      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d6:	d035      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038dc:	d82e      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038e2:	d031      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038e8:	d828      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ee:	d01a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80038f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f4:	d822      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80038fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038fe:	d007      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003900:	e01c      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	4a31      	ldr	r2, [pc, #196]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800390e:	e01c      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003914:	3308      	adds	r3, #8
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fb83 	bl	8005024 <RCCEx_PLL2_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003924:	e011      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392a:	3328      	adds	r3, #40	; 0x28
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fc2a 	bl	8005188 <RCCEx_PLL3_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800393a:	e006      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003942:	e002      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003962:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003964:	430b      	orrs	r3, r1
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800396e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800397e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003988:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d056      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003996:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800399a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399e:	d038      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a4:	d831      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039aa:	d034      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80039ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039b0:	d82b      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b6:	d01d      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039bc:	d825      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80039c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039c8:	e01f      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d0:	4ba2      	ldr	r3, [pc, #648]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4aa1      	ldr	r2, [pc, #644]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039dc:	e01c      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e2:	3308      	adds	r3, #8
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fb1c 	bl	8005024 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039f2:	e011      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f8:	3328      	adds	r3, #40	; 0x28
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fbc3 	bl	8005188 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a10:	e002      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a20:	4b8e      	ldr	r3, [pc, #568]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a30:	4a8a      	ldr	r2, [pc, #552]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a32:	430b      	orrs	r3, r1
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
 8003a36:	e003      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d03a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	2b30      	cmp	r3, #48	; 0x30
 8003a68:	d01f      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a6a:	2b30      	cmp	r3, #48	; 0x30
 8003a6c:	d819      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d00c      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d815      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d019      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d111      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4b77      	ldr	r3, [pc, #476]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4a76      	ldr	r2, [pc, #472]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a90:	3308      	adds	r3, #8
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fac5 	bl	8005024 <RCCEx_PLL2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ab8:	4b68      	ldr	r3, [pc, #416]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	4a65      	ldr	r2, [pc, #404]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003acc:	e003      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003ae2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003aec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4313      	orrs	r3, r2
 8003af4:	d051      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b00:	d035      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b06:	d82e      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b0c:	d031      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b12:	d828      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b18:	d01a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1e:	d822      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b28:	d007      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b2a:	e01c      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4a4a      	ldr	r2, [pc, #296]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b38:	e01c      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3e:	3308      	adds	r3, #8
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 fa6e 	bl	8005024 <RCCEx_PLL2_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b4e:	e011      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b54:	3328      	adds	r3, #40	; 0x28
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 fb15 	bl	8005188 <RCCEx_PLL3_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b64:	e006      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b7c:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8a:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003bb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	d056      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc4:	d033      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bca:	d82c      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bd0:	d02f      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003bd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bd6:	d826      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bdc:	d02b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003bde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be2:	d820      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be8:	d012      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bee:	d81a      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d022      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d115      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfe:	3308      	adds	r3, #8
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 fa0e 	bl	8005024 <RCCEx_PLL2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c0e:	e015      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c14:	3328      	adds	r3, #40	; 0x28
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 fab5 	bl	8005188 <RCCEx_PLL3_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c24:	e00a      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c2e:	bf00      	nop
 8003c30:	e004      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10d      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c52:	4a02      	ldr	r2, [pc, #8]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6513      	str	r3, [r2, #80]	; 0x50
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c5a:	bf00      	nop
 8003c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4313      	orrs	r3, r2
 8003c86:	d055      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c94:	d033      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9a:	d82c      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca0:	d02f      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d826      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cac:	d02b      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb2:	d820      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb8:	d012      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbe:	d81a      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d022      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc8:	d115      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cce:	3308      	adds	r3, #8
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f9a6 	bl	8005024 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cde:	e015      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce4:	3328      	adds	r3, #40	; 0x28
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fa4d 	bl	8005188 <RCCEx_PLL3_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e004      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d02:	bf00      	nop
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d14:	4ba3      	ldr	r3, [pc, #652]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d24:	4a9f      	ldr	r2, [pc, #636]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d037      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5e:	d00e      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d64:	d816      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d6e:	d111      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d70:	4b8c      	ldr	r3, [pc, #560]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	4a8b      	ldr	r2, [pc, #556]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d7c:	e00f      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d82:	3308      	adds	r3, #8
 8003d84:	2101      	movs	r1, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f94c 	bl	8005024 <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d92:	e004      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003da6:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003daa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a7b      	ldr	r2, [pc, #492]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db6:	430b      	orrs	r3, r1
 8003db8:	6513      	str	r3, [r2, #80]	; 0x50
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003dda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d039      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d81c      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e31 	.word	0x08003e31
 8003df8:	08003e05 	.word	0x08003e05
 8003dfc:	08003e13 	.word	0x08003e13
 8003e00:	08003e31 	.word	0x08003e31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e04:	4b67      	ldr	r3, [pc, #412]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4a66      	ldr	r2, [pc, #408]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e10:	e00f      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e16:	3308      	adds	r3, #8
 8003e18:	2102      	movs	r1, #2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f902 	bl	8005024 <RCCEx_PLL2_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e3a:	4b5a      	ldr	r3, [pc, #360]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	f023 0103 	bic.w	r1, r3, #3
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	4a56      	ldr	r2, [pc, #344]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e72:	460b      	mov	r3, r1
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f000 809f 	beq.w	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e86:	f7fd fb03 	bl	8001490 <HAL_GetTick>
 8003e8a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fd fafe 	bl	8001490 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b64      	cmp	r3, #100	; 0x64
 8003e9e:	d903      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ed      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d179      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ebc:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ec8:	4053      	eors	r3, r2
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a30      	ldr	r2, [pc, #192]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a2d      	ldr	r2, [pc, #180]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ef6:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	d118      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd fac0 	bl	8001490 <HAL_GetTick>
 8003f10:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f14:	e00d      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd fabb 	bl	8001490 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f20:	1ad2      	subs	r2, r2, r3
 8003f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d903      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003f30:	e005      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0eb      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d129      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f56:	d10e      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f58:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f68:	091a      	lsrs	r2, r3, #4
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6113      	str	r3, [r2, #16]
 8003f74:	e005      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f80:	6113      	str	r3, [r2, #16]
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6713      	str	r3, [r2, #112]	; 0x70
 8003f98:	e00e      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	58024800 	.word	0x58024800
 8003fac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f002 0301 	and.w	r3, r2, #1
 8003fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f000 8089 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe0:	2b28      	cmp	r3, #40	; 0x28
 8003fe2:	d86b      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003fe4:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	080040c5 	.word	0x080040c5
 8003ff0:	080040bd 	.word	0x080040bd
 8003ff4:	080040bd 	.word	0x080040bd
 8003ff8:	080040bd 	.word	0x080040bd
 8003ffc:	080040bd 	.word	0x080040bd
 8004000:	080040bd 	.word	0x080040bd
 8004004:	080040bd 	.word	0x080040bd
 8004008:	080040bd 	.word	0x080040bd
 800400c:	08004091 	.word	0x08004091
 8004010:	080040bd 	.word	0x080040bd
 8004014:	080040bd 	.word	0x080040bd
 8004018:	080040bd 	.word	0x080040bd
 800401c:	080040bd 	.word	0x080040bd
 8004020:	080040bd 	.word	0x080040bd
 8004024:	080040bd 	.word	0x080040bd
 8004028:	080040bd 	.word	0x080040bd
 800402c:	080040a7 	.word	0x080040a7
 8004030:	080040bd 	.word	0x080040bd
 8004034:	080040bd 	.word	0x080040bd
 8004038:	080040bd 	.word	0x080040bd
 800403c:	080040bd 	.word	0x080040bd
 8004040:	080040bd 	.word	0x080040bd
 8004044:	080040bd 	.word	0x080040bd
 8004048:	080040bd 	.word	0x080040bd
 800404c:	080040c5 	.word	0x080040c5
 8004050:	080040bd 	.word	0x080040bd
 8004054:	080040bd 	.word	0x080040bd
 8004058:	080040bd 	.word	0x080040bd
 800405c:	080040bd 	.word	0x080040bd
 8004060:	080040bd 	.word	0x080040bd
 8004064:	080040bd 	.word	0x080040bd
 8004068:	080040bd 	.word	0x080040bd
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040bd 	.word	0x080040bd
 8004074:	080040bd 	.word	0x080040bd
 8004078:	080040bd 	.word	0x080040bd
 800407c:	080040bd 	.word	0x080040bd
 8004080:	080040bd 	.word	0x080040bd
 8004084:	080040bd 	.word	0x080040bd
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040c5 	.word	0x080040c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004094:	3308      	adds	r3, #8
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ffc3 	bl	8005024 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040a4:	e00f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040aa:	3328      	adds	r3, #40	; 0x28
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f86a 	bl	8005188 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80040c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040ce:	4bbf      	ldr	r3, [pc, #764]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040dc:	4abb      	ldr	r2, [pc, #748]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040de:	430b      	orrs	r3, r1
 80040e0:	6553      	str	r3, [r2, #84]	; 0x54
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 0302 	and.w	r3, r2, #2
 80040f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004102:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d041      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004112:	2b05      	cmp	r3, #5
 8004114:	d824      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	08004169 	.word	0x08004169
 8004120:	08004135 	.word	0x08004135
 8004124:	0800414b 	.word	0x0800414b
 8004128:	08004169 	.word	0x08004169
 800412c:	08004169 	.word	0x08004169
 8004130:	08004169 	.word	0x08004169
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004138:	3308      	adds	r3, #8
 800413a:	2101      	movs	r1, #1
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ff71 	bl	8005024 <RCCEx_PLL2_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004148:	e00f      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414e:	3328      	adds	r3, #40	; 0x28
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f818 	bl	8005188 <RCCEx_PLL3_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800415e:	e004      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004166:	e000      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004172:	4b96      	ldr	r3, [pc, #600]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f023 0107 	bic.w	r1, r3, #7
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004180:	4a92      	ldr	r2, [pc, #584]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004182:	430b      	orrs	r3, r1
 8004184:	6553      	str	r3, [r2, #84]	; 0x54
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800418c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 0304 	and.w	r3, r2, #4
 800419c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	d044      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d825      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	08004211 	.word	0x08004211
 80041c8:	080041dd 	.word	0x080041dd
 80041cc:	080041f3 	.word	0x080041f3
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004211 	.word	0x08004211
 80041d8:	08004211 	.word	0x08004211
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e0:	3308      	adds	r3, #8
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 ff1d 	bl	8005024 <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041f0:	e00f      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	3328      	adds	r3, #40	; 0x28
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 ffc4 	bl	8005188 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004206:	e004      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800421a:	4b6c      	ldr	r3, [pc, #432]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f023 0107 	bic.w	r1, r3, #7
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422a:	4a68      	ldr	r2, [pc, #416]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800422c:	430b      	orrs	r3, r1
 800422e:	6593      	str	r3, [r2, #88]	; 0x58
 8004230:	e003      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004236:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f002 0320 	and.w	r3, r2, #32
 8004246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004250:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d055      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004266:	d033      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800426c:	d82c      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d02f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d826      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800427a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800427e:	d02b      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004284:	d820      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428a:	d012      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800428c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004290:	d81a      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d022      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429a:	d115      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a0:	3308      	adds	r3, #8
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 febd 	bl	8005024 <RCCEx_PLL2_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042b0:	e015      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b6:	3328      	adds	r3, #40	; 0x28
 80042b8:	2102      	movs	r1, #2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 ff64 	bl	8005188 <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042c6:	e00a      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ce:	e006      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042d0:	bf00      	nop
 80042d2:	e004      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042d4:	bf00      	nop
 80042d6:	e002      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042d8:	bf00      	nop
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a35      	ldr	r2, [pc, #212]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6553      	str	r3, [r2, #84]	; 0x54
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800431c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004320:	460b      	mov	r3, r1
 8004322:	4313      	orrs	r3, r2
 8004324:	d058      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800432e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004332:	d033      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004334:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004338:	d82c      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433e:	d02f      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d826      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800434a:	d02b      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800434c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004350:	d820      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004356:	d012      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435c:	d81a      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d022      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d115      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436c:	3308      	adds	r3, #8
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fe57 	bl	8005024 <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800437c:	e015      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004382:	3328      	adds	r3, #40	; 0x28
 8004384:	2102      	movs	r1, #2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fefe 	bl	8005188 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004392:	e00a      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800439a:	e006      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800439c:	bf00      	nop
 800439e:	e004      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043a0:	bf00      	nop
 80043a2:	e002      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10e      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c2:	4a02      	ldr	r2, [pc, #8]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6593      	str	r3, [r2, #88]	; 0x58
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80043ca:	bf00      	nop
 80043cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d055      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004400:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004404:	d033      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004406:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800440a:	d82c      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	d02f      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004416:	d826      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004418:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800441c:	d02b      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800441e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004422:	d820      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004428:	d012      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800442a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800442e:	d81a      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d022      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004438:	d115      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443e:	3308      	adds	r3, #8
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fdee 	bl	8005024 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800444e:	e015      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	3328      	adds	r3, #40	; 0x28
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fe95 	bl	8005188 <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004464:	e00a      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800446e:	bf00      	nop
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800447a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004484:	4ba1      	ldr	r3, [pc, #644]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004494:	4a9d      	ldr	r2, [pc, #628]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004496:	430b      	orrs	r3, r1
 8004498:	6593      	str	r3, [r2, #88]	; 0x58
 800449a:	e003      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f002 0308 	and.w	r3, r2, #8
 80044b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044be:	460b      	mov	r3, r1
 80044c0:	4313      	orrs	r3, r2
 80044c2:	d01e      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	3328      	adds	r3, #40	; 0x28
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fe54 	bl	8005188 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044ec:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	4a83      	ldr	r2, [pc, #524]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f002 0310 	and.w	r3, r2, #16
 800450e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004518:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800451c:	460b      	mov	r3, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	d01e      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452e:	d10c      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	3328      	adds	r3, #40	; 0x28
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fe25 	bl	8005188 <RCCEx_PLL3_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800454a:	4b70      	ldr	r3, [pc, #448]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455a:	4a6c      	ldr	r2, [pc, #432]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455c:	430b      	orrs	r3, r1
 800455e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800456c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004576:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d03e      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800458c:	d022      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800458e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004592:	d81b      	bhi.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d00b      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800459e:	e015      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a4:	3308      	adds	r3, #8
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fd3b 	bl	8005024 <RCCEx_PLL2_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045b4:	e00f      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ba:	3328      	adds	r3, #40	; 0x28
 80045bc:	2102      	movs	r1, #2
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fde2 	bl	8005188 <RCCEx_PLL3_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045ca:	e004      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045d2:	e000      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80045d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045de:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045ee:	4a47      	ldr	r2, [pc, #284]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6593      	str	r3, [r2, #88]	; 0x58
 80045f4:	e003      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800460a:	67bb      	str	r3, [r7, #120]	; 0x78
 800460c:	2300      	movs	r3, #0
 800460e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004610:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d03b      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004626:	d01f      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800462c:	d818      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800462e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004632:	d003      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004638:	d007      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800463a:	e011      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800463c:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a32      	ldr	r2, [pc, #200]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004648:	e00f      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	3328      	adds	r3, #40	; 0x28
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fd98 	bl	8005188 <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800465e:	e004      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004672:	4b26      	ldr	r3, [pc, #152]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	4a22      	ldr	r2, [pc, #136]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004684:	430b      	orrs	r3, r1
 8004686:	6553      	str	r3, [r2, #84]	; 0x54
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800469e:	673b      	str	r3, [r7, #112]	; 0x70
 80046a0:	2300      	movs	r3, #0
 80046a2:	677b      	str	r3, [r7, #116]	; 0x74
 80046a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d034      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d007      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80046be:	e011      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c0:	4b12      	ldr	r3, [pc, #72]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4a11      	ldr	r2, [pc, #68]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046cc:	e00e      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d2:	3308      	adds	r3, #8
 80046d4:	2102      	movs	r1, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fca4 	bl	8005024 <RCCEx_PLL2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046e2:	e003      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10d      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	4a02      	ldr	r2, [pc, #8]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004704:	430b      	orrs	r3, r1
 8004706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800470a:	bf00      	nop
 800470c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004724:	66bb      	str	r3, [r7, #104]	; 0x68
 8004726:	2300      	movs	r3, #0
 8004728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800472a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d00c      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	3328      	adds	r3, #40	; 0x28
 800473a:	2102      	movs	r1, #2
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fd23 	bl	8005188 <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800475a:	663b      	str	r3, [r7, #96]	; 0x60
 800475c:	2300      	movs	r3, #0
 800475e:	667b      	str	r3, [r7, #100]	; 0x64
 8004760:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004764:	460b      	mov	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	d038      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004776:	d018      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800477c:	d811      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800477e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004782:	d014      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004788:	d80b      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d011      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	d106      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4bc3      	ldr	r3, [pc, #780]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	4ac2      	ldr	r2, [pc, #776]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047a0:	e008      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047a8:	e004      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047aa:	bf00      	nop
 80047ac:	e002      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047bc:	4bb9      	ldr	r3, [pc, #740]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047cc:	4ab5      	ldr	r2, [pc, #724]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6553      	str	r3, [r2, #84]	; 0x54
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80047e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ea:	2300      	movs	r3, #0
 80047ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80047f2:	460b      	mov	r3, r1
 80047f4:	4313      	orrs	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047f8:	4baa      	ldr	r3, [pc, #680]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	4aa7      	ldr	r2, [pc, #668]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004808:	430b      	orrs	r3, r1
 800480a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004818:	653b      	str	r3, [r7, #80]	; 0x50
 800481a:	2300      	movs	r3, #0
 800481c:	657b      	str	r3, [r7, #84]	; 0x54
 800481e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004828:	4b9e      	ldr	r3, [pc, #632]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004834:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004838:	4a9a      	ldr	r2, [pc, #616]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483a:	430b      	orrs	r3, r1
 800483c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
 800484c:	2300      	movs	r3, #0
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800485a:	4b92      	ldr	r3, [pc, #584]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004868:	4a8e      	ldr	r2, [pc, #568]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486a:	430b      	orrs	r3, r1
 800486c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800487a:	643b      	str	r3, [r7, #64]	; 0x40
 800487c:	2300      	movs	r3, #0
 800487e:	647b      	str	r3, [r7, #68]	; 0x44
 8004880:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800488a:	4b86      	ldr	r3, [pc, #536]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	4a85      	ldr	r2, [pc, #532]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004890:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004894:	6113      	str	r3, [r2, #16]
 8004896:	4b83      	ldr	r3, [pc, #524]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004898:	6919      	ldr	r1, [r3, #16]
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048a2:	4a80      	ldr	r2, [pc, #512]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80048b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b6:	2300      	movs	r3, #0
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d009      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048c4:	4b77      	ldr	r3, [pc, #476]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	4a74      	ldr	r2, [pc, #464]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d4:	430b      	orrs	r3, r1
 80048d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80048e4:	633b      	str	r3, [r7, #48]	; 0x30
 80048e6:	2300      	movs	r3, #0
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80048ee:	460b      	mov	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048f4:	4b6b      	ldr	r3, [pc, #428]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004906:	430b      	orrs	r3, r1
 8004908:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	2100      	movs	r1, #0
 8004914:	62b9      	str	r1, [r7, #40]	; 0x28
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d011      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	3308      	adds	r3, #8
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fb78 	bl	8005024 <RCCEx_PLL2_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	2100      	movs	r1, #0
 8004954:	6239      	str	r1, [r7, #32]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
 800495c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d011      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496a:	3308      	adds	r3, #8
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fb58 	bl	8005024 <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	2100      	movs	r1, #0
 8004994:	61b9      	str	r1, [r7, #24]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049aa:	3308      	adds	r3, #8
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fb38 	bl	8005024 <RCCEx_PLL2_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	2100      	movs	r1, #0
 80049d4:	6139      	str	r1, [r7, #16]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d011      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ea:	3328      	adds	r3, #40	; 0x28
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fbca 	bl	8005188 <RCCEx_PLL3_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	2100      	movs	r1, #0
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d011      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2a:	3328      	adds	r3, #40	; 0x28
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fbaa 	bl	8005188 <RCCEx_PLL3_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	2100      	movs	r1, #0
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	607b      	str	r3, [r7, #4]
 8004a5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d011      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6a:	3328      	adds	r3, #40	; 0x28
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb8a 	bl	8005188 <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004a8a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e000      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa4:	58024400 	.word	0x58024400

08004aa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004aac:	f7fe fd96 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4904      	ldr	r1, [pc, #16]	; (8004ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	08006be8 	.word	0x08006be8

08004ad4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004adc:	4ba1      	ldr	r3, [pc, #644]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ae6:	4b9f      	ldr	r3, [pc, #636]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	0b1b      	lsrs	r3, r3, #12
 8004aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004af2:	4b9c      	ldr	r3, [pc, #624]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004afe:	4b99      	ldr	r3, [pc, #612]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8111 	beq.w	8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f200 80a1 	bhi.w	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d056      	beq.n	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b3e:	e099      	b.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b40:	4b88      	ldr	r3, [pc, #544]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02d      	beq.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b4c:	4b85      	ldr	r3, [pc, #532]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	4a84      	ldr	r2, [pc, #528]	; (8004d68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ba6:	e087      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bea:	e065      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c2e:	e043      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c42:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c72:	e021      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004cb8:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	0a5b      	lsrs	r3, r3, #9
 8004cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cde:	ee17 2a90 	vmov	r2, s15
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ce6:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0c:	ee17 2a90 	vmov	r2, s15
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	0e1b      	lsrs	r3, r3, #24
 8004d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3a:	ee17 2a90 	vmov	r2, s15
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d42:	e008      	b.n	8004d56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
}
 8004d56:	bf00      	nop
 8004d58:	3724      	adds	r7, #36	; 0x24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	58024400 	.word	0x58024400
 8004d68:	03d09000 	.word	0x03d09000
 8004d6c:	46000000 	.word	0x46000000
 8004d70:	4c742400 	.word	0x4c742400
 8004d74:	4a742400 	.word	0x4a742400
 8004d78:	4af42400 	.word	0x4af42400

08004d7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d84:	4ba1      	ldr	r3, [pc, #644]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d8e:	4b9f      	ldr	r3, [pc, #636]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	0d1b      	lsrs	r3, r3, #20
 8004d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d9a:	4b9c      	ldr	r3, [pc, #624]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004da6:	4b99      	ldr	r3, [pc, #612]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8111 	beq.w	8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	f000 8083 	beq.w	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	f200 80a1 	bhi.w	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d056      	beq.n	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004de6:	e099      	b.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de8:	4b88      	ldr	r3, [pc, #544]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02d      	beq.n	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004df4:	4b85      	ldr	r3, [pc, #532]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	4a84      	ldr	r2, [pc, #528]	; (8005010 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
 8004e04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b7b      	ldr	r3, [pc, #492]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e4e:	e087      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b6a      	ldr	r3, [pc, #424]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e92:	e065      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea6:	4b59      	ldr	r3, [pc, #356]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed6:	e043      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eea:	4b48      	ldr	r3, [pc, #288]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1a:	e021      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2e:	4b37      	ldr	r3, [pc, #220]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	0a5b      	lsrs	r3, r3, #9
 8004f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f86:	ee17 2a90 	vmov	r2, s15
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	0c1b      	lsrs	r3, r3, #16
 8004f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb4:	ee17 2a90 	vmov	r2, s15
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004fbc:	4b13      	ldr	r3, [pc, #76]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe2:	ee17 2a90 	vmov	r2, s15
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fea:	e008      	b.n	8004ffe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
}
 8004ffe:	bf00      	nop
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400
 8005010:	03d09000 	.word	0x03d09000
 8005014:	46000000 	.word	0x46000000
 8005018:	4c742400 	.word	0x4c742400
 800501c:	4a742400 	.word	0x4a742400
 8005020:	4af42400 	.word	0x4af42400

08005024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005032:	4b53      	ldr	r3, [pc, #332]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d101      	bne.n	8005042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e099      	b.n	8005176 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005042:	4b4f      	ldr	r3, [pc, #316]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4e      	ldr	r2, [pc, #312]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800504c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504e:	f7fc fa1f 	bl	8001490 <HAL_GetTick>
 8005052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005054:	e008      	b.n	8005068 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005056:	f7fc fa1b 	bl	8001490 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e086      	b.n	8005176 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005068:	4b45      	ldr	r3, [pc, #276]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005074:	4b42      	ldr	r3, [pc, #264]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	031b      	lsls	r3, r3, #12
 8005082:	493f      	ldr	r1, [pc, #252]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	628b      	str	r3, [r1, #40]	; 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	3b01      	subs	r3, #1
 8005098:	025b      	lsls	r3, r3, #9
 800509a:	b29b      	uxth	r3, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050b8:	4931      	ldr	r1, [pc, #196]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050be:	4b30      	ldr	r3, [pc, #192]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	492d      	ldr	r1, [pc, #180]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f023 0220 	bic.w	r2, r3, #32
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4928      	ldr	r1, [pc, #160]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	4a26      	ldr	r2, [pc, #152]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <RCCEx_PLL2_Config+0x160>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69d2      	ldr	r2, [r2, #28]
 80050fa:	00d2      	lsls	r2, r2, #3
 80050fc:	4920      	ldr	r1, [pc, #128]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005102:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005108:	f043 0310 	orr.w	r3, r3, #16
 800510c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800511a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800511e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005120:	e00f      	b.n	8005142 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005132:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005134:	e005      	b.n	8005142 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	4a11      	ldr	r2, [pc, #68]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800513c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005140:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800514c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514e:	f7fc f99f 	bl	8001490 <HAL_GetTick>
 8005152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005154:	e008      	b.n	8005168 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005156:	f7fc f99b 	bl	8001490 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e006      	b.n	8005176 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400
 8005184:	ffff0007 	.word	0xffff0007

08005188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005196:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d101      	bne.n	80051a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e099      	b.n	80052da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051a6:	4b4f      	ldr	r3, [pc, #316]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4e      	ldr	r2, [pc, #312]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b2:	f7fc f96d 	bl	8001490 <HAL_GetTick>
 80051b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051b8:	e008      	b.n	80051cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051ba:	f7fc f969 	bl	8001490 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e086      	b.n	80052da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	051b      	lsls	r3, r3, #20
 80051e6:	493f      	ldr	r1, [pc, #252]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	628b      	str	r3, [r1, #40]	; 0x28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	025b      	lsls	r3, r3, #9
 80051fe:	b29b      	uxth	r3, r3
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	3b01      	subs	r3, #1
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	3b01      	subs	r3, #1
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800521c:	4931      	ldr	r1, [pc, #196]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	492d      	ldr	r1, [pc, #180]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005234:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	4928      	ldr	r1, [pc, #160]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005246:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800524c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <RCCEx_PLL3_Config+0x160>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	69d2      	ldr	r2, [r2, #28]
 800525e:	00d2      	lsls	r2, r2, #3
 8005260:	4920      	ldr	r1, [pc, #128]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005262:	4313      	orrs	r3, r2
 8005264:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800527e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005284:	e00f      	b.n	80052a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d106      	bne.n	800529a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005298:	e005      	b.n	80052a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fc f8ed 	bl	8001490 <HAL_GetTick>
 80052b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052b8:	e008      	b.n	80052cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052ba:	f7fc f8e9 	bl	8001490 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	58024400 	.word	0x58024400
 80052e8:	ffff0007 	.word	0xffff0007

080052ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e042      	b.n	8005384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fb fd99 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2224      	movs	r2, #36	; 0x24
 800531a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f82c 	bl	800538c <UART_SetConfig>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e022      	b.n	8005384 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fd88 	bl	8005e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800535a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800536a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fe0f 	bl	8005fa0 <UART_CheckIdleState>
 8005382:	4603      	mov	r3, r0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005390:	b092      	sub	sp, #72	; 0x48
 8005392:	af00      	add	r7, sp, #0
 8005394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4bbe      	ldr	r3, [pc, #760]	; (80056b4 <UART_SetConfig+0x328>)
 80053bc:	4013      	ands	r3, r2
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4ab3      	ldr	r2, [pc, #716]	; (80056b8 <UART_SetConfig+0x32c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f4:	4313      	orrs	r3, r2
 80053f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	4baf      	ldr	r3, [pc, #700]	; (80056bc <UART_SetConfig+0x330>)
 8005400:	4013      	ands	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005408:	430b      	orrs	r3, r1
 800540a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f023 010f 	bic.w	r1, r3, #15
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4aa6      	ldr	r2, [pc, #664]	; (80056c0 <UART_SetConfig+0x334>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d177      	bne.n	800551c <UART_SetConfig+0x190>
 800542c:	4ba5      	ldr	r3, [pc, #660]	; (80056c4 <UART_SetConfig+0x338>)
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005434:	2b28      	cmp	r3, #40	; 0x28
 8005436:	d86d      	bhi.n	8005514 <UART_SetConfig+0x188>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0xb4>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	080054e5 	.word	0x080054e5
 8005444:	08005515 	.word	0x08005515
 8005448:	08005515 	.word	0x08005515
 800544c:	08005515 	.word	0x08005515
 8005450:	08005515 	.word	0x08005515
 8005454:	08005515 	.word	0x08005515
 8005458:	08005515 	.word	0x08005515
 800545c:	08005515 	.word	0x08005515
 8005460:	080054ed 	.word	0x080054ed
 8005464:	08005515 	.word	0x08005515
 8005468:	08005515 	.word	0x08005515
 800546c:	08005515 	.word	0x08005515
 8005470:	08005515 	.word	0x08005515
 8005474:	08005515 	.word	0x08005515
 8005478:	08005515 	.word	0x08005515
 800547c:	08005515 	.word	0x08005515
 8005480:	080054f5 	.word	0x080054f5
 8005484:	08005515 	.word	0x08005515
 8005488:	08005515 	.word	0x08005515
 800548c:	08005515 	.word	0x08005515
 8005490:	08005515 	.word	0x08005515
 8005494:	08005515 	.word	0x08005515
 8005498:	08005515 	.word	0x08005515
 800549c:	08005515 	.word	0x08005515
 80054a0:	080054fd 	.word	0x080054fd
 80054a4:	08005515 	.word	0x08005515
 80054a8:	08005515 	.word	0x08005515
 80054ac:	08005515 	.word	0x08005515
 80054b0:	08005515 	.word	0x08005515
 80054b4:	08005515 	.word	0x08005515
 80054b8:	08005515 	.word	0x08005515
 80054bc:	08005515 	.word	0x08005515
 80054c0:	08005505 	.word	0x08005505
 80054c4:	08005515 	.word	0x08005515
 80054c8:	08005515 	.word	0x08005515
 80054cc:	08005515 	.word	0x08005515
 80054d0:	08005515 	.word	0x08005515
 80054d4:	08005515 	.word	0x08005515
 80054d8:	08005515 	.word	0x08005515
 80054dc:	08005515 	.word	0x08005515
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ea:	e222      	b.n	8005932 <UART_SetConfig+0x5a6>
 80054ec:	2304      	movs	r3, #4
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f2:	e21e      	b.n	8005932 <UART_SetConfig+0x5a6>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fa:	e21a      	b.n	8005932 <UART_SetConfig+0x5a6>
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e216      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005504:	2320      	movs	r3, #32
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550a:	e212      	b.n	8005932 <UART_SetConfig+0x5a6>
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e20e      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e20a      	b.n	8005932 <UART_SetConfig+0x5a6>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a69      	ldr	r2, [pc, #420]	; (80056c8 <UART_SetConfig+0x33c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d130      	bne.n	8005588 <UART_SetConfig+0x1fc>
 8005526:	4b67      	ldr	r3, [pc, #412]	; (80056c4 <UART_SetConfig+0x338>)
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b05      	cmp	r3, #5
 8005530:	d826      	bhi.n	8005580 <UART_SetConfig+0x1f4>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x1ac>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	08005551 	.word	0x08005551
 800553c:	08005559 	.word	0x08005559
 8005540:	08005561 	.word	0x08005561
 8005544:	08005569 	.word	0x08005569
 8005548:	08005571 	.word	0x08005571
 800554c:	08005579 	.word	0x08005579
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005556:	e1ec      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005558:	2304      	movs	r3, #4
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e1e8      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005560:	2308      	movs	r3, #8
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e1e4      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005568:	2310      	movs	r3, #16
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e1e0      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005570:	2320      	movs	r3, #32
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e1dc      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005578:	2340      	movs	r3, #64	; 0x40
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e1d8      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e1d4      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a4f      	ldr	r2, [pc, #316]	; (80056cc <UART_SetConfig+0x340>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d130      	bne.n	80055f4 <UART_SetConfig+0x268>
 8005592:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <UART_SetConfig+0x338>)
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b05      	cmp	r3, #5
 800559c:	d826      	bhi.n	80055ec <UART_SetConfig+0x260>
 800559e:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0x218>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055bd 	.word	0x080055bd
 80055a8:	080055c5 	.word	0x080055c5
 80055ac:	080055cd 	.word	0x080055cd
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	080055dd 	.word	0x080055dd
 80055b8:	080055e5 	.word	0x080055e5
 80055bc:	2300      	movs	r3, #0
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e1b6      	b.n	8005932 <UART_SetConfig+0x5a6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ca:	e1b2      	b.n	8005932 <UART_SetConfig+0x5a6>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d2:	e1ae      	b.n	8005932 <UART_SetConfig+0x5a6>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e1aa      	b.n	8005932 <UART_SetConfig+0x5a6>
 80055dc:	2320      	movs	r3, #32
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e1a6      	b.n	8005932 <UART_SetConfig+0x5a6>
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e1a2      	b.n	8005932 <UART_SetConfig+0x5a6>
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e19e      	b.n	8005932 <UART_SetConfig+0x5a6>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a35      	ldr	r2, [pc, #212]	; (80056d0 <UART_SetConfig+0x344>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d130      	bne.n	8005660 <UART_SetConfig+0x2d4>
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <UART_SetConfig+0x338>)
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	2b05      	cmp	r3, #5
 8005608:	d826      	bhi.n	8005658 <UART_SetConfig+0x2cc>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0x284>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005629 	.word	0x08005629
 8005614:	08005631 	.word	0x08005631
 8005618:	08005639 	.word	0x08005639
 800561c:	08005641 	.word	0x08005641
 8005620:	08005649 	.word	0x08005649
 8005624:	08005651 	.word	0x08005651
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562e:	e180      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005636:	e17c      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563e:	e178      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005646:	e174      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005648:	2320      	movs	r3, #32
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e170      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005650:	2340      	movs	r3, #64	; 0x40
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005656:	e16c      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e168      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <UART_SetConfig+0x348>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d142      	bne.n	80056f0 <UART_SetConfig+0x364>
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <UART_SetConfig+0x338>)
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	2b05      	cmp	r3, #5
 8005674:	d838      	bhi.n	80056e8 <UART_SetConfig+0x35c>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x2f0>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	08005695 	.word	0x08005695
 8005680:	0800569d 	.word	0x0800569d
 8005684:	080056a5 	.word	0x080056a5
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056d9 	.word	0x080056d9
 8005690:	080056e1 	.word	0x080056e1
 8005694:	2300      	movs	r3, #0
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569a:	e14a      	b.n	8005932 <UART_SetConfig+0x5a6>
 800569c:	2304      	movs	r3, #4
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a2:	e146      	b.n	8005932 <UART_SetConfig+0x5a6>
 80056a4:	2308      	movs	r3, #8
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056aa:	e142      	b.n	8005932 <UART_SetConfig+0x5a6>
 80056ac:	2310      	movs	r3, #16
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e13e      	b.n	8005932 <UART_SetConfig+0x5a6>
 80056b4:	cfff69f3 	.word	0xcfff69f3
 80056b8:	58000c00 	.word	0x58000c00
 80056bc:	11fff4ff 	.word	0x11fff4ff
 80056c0:	40011000 	.word	0x40011000
 80056c4:	58024400 	.word	0x58024400
 80056c8:	40004400 	.word	0x40004400
 80056cc:	40004800 	.word	0x40004800
 80056d0:	40004c00 	.word	0x40004c00
 80056d4:	40005000 	.word	0x40005000
 80056d8:	2320      	movs	r3, #32
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e128      	b.n	8005932 <UART_SetConfig+0x5a6>
 80056e0:	2340      	movs	r3, #64	; 0x40
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e124      	b.n	8005932 <UART_SetConfig+0x5a6>
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ee:	e120      	b.n	8005932 <UART_SetConfig+0x5a6>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4acb      	ldr	r2, [pc, #812]	; (8005a24 <UART_SetConfig+0x698>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d176      	bne.n	80057e8 <UART_SetConfig+0x45c>
 80056fa:	4bcb      	ldr	r3, [pc, #812]	; (8005a28 <UART_SetConfig+0x69c>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005702:	2b28      	cmp	r3, #40	; 0x28
 8005704:	d86c      	bhi.n	80057e0 <UART_SetConfig+0x454>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0x380>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	080057b1 	.word	0x080057b1
 8005710:	080057e1 	.word	0x080057e1
 8005714:	080057e1 	.word	0x080057e1
 8005718:	080057e1 	.word	0x080057e1
 800571c:	080057e1 	.word	0x080057e1
 8005720:	080057e1 	.word	0x080057e1
 8005724:	080057e1 	.word	0x080057e1
 8005728:	080057e1 	.word	0x080057e1
 800572c:	080057b9 	.word	0x080057b9
 8005730:	080057e1 	.word	0x080057e1
 8005734:	080057e1 	.word	0x080057e1
 8005738:	080057e1 	.word	0x080057e1
 800573c:	080057e1 	.word	0x080057e1
 8005740:	080057e1 	.word	0x080057e1
 8005744:	080057e1 	.word	0x080057e1
 8005748:	080057e1 	.word	0x080057e1
 800574c:	080057c1 	.word	0x080057c1
 8005750:	080057e1 	.word	0x080057e1
 8005754:	080057e1 	.word	0x080057e1
 8005758:	080057e1 	.word	0x080057e1
 800575c:	080057e1 	.word	0x080057e1
 8005760:	080057e1 	.word	0x080057e1
 8005764:	080057e1 	.word	0x080057e1
 8005768:	080057e1 	.word	0x080057e1
 800576c:	080057c9 	.word	0x080057c9
 8005770:	080057e1 	.word	0x080057e1
 8005774:	080057e1 	.word	0x080057e1
 8005778:	080057e1 	.word	0x080057e1
 800577c:	080057e1 	.word	0x080057e1
 8005780:	080057e1 	.word	0x080057e1
 8005784:	080057e1 	.word	0x080057e1
 8005788:	080057e1 	.word	0x080057e1
 800578c:	080057d1 	.word	0x080057d1
 8005790:	080057e1 	.word	0x080057e1
 8005794:	080057e1 	.word	0x080057e1
 8005798:	080057e1 	.word	0x080057e1
 800579c:	080057e1 	.word	0x080057e1
 80057a0:	080057e1 	.word	0x080057e1
 80057a4:	080057e1 	.word	0x080057e1
 80057a8:	080057e1 	.word	0x080057e1
 80057ac:	080057d9 	.word	0x080057d9
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e0bc      	b.n	8005932 <UART_SetConfig+0x5a6>
 80057b8:	2304      	movs	r3, #4
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057be:	e0b8      	b.n	8005932 <UART_SetConfig+0x5a6>
 80057c0:	2308      	movs	r3, #8
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c6:	e0b4      	b.n	8005932 <UART_SetConfig+0x5a6>
 80057c8:	2310      	movs	r3, #16
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ce:	e0b0      	b.n	8005932 <UART_SetConfig+0x5a6>
 80057d0:	2320      	movs	r3, #32
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d6:	e0ac      	b.n	8005932 <UART_SetConfig+0x5a6>
 80057d8:	2340      	movs	r3, #64	; 0x40
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057de:	e0a8      	b.n	8005932 <UART_SetConfig+0x5a6>
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e0a4      	b.n	8005932 <UART_SetConfig+0x5a6>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a8f      	ldr	r2, [pc, #572]	; (8005a2c <UART_SetConfig+0x6a0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d130      	bne.n	8005854 <UART_SetConfig+0x4c8>
 80057f2:	4b8d      	ldr	r3, [pc, #564]	; (8005a28 <UART_SetConfig+0x69c>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d826      	bhi.n	800584c <UART_SetConfig+0x4c0>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x478>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	0800581d 	.word	0x0800581d
 8005808:	08005825 	.word	0x08005825
 800580c:	0800582d 	.word	0x0800582d
 8005810:	08005835 	.word	0x08005835
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005845 	.word	0x08005845
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005822:	e086      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005824:	2304      	movs	r3, #4
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582a:	e082      	b.n	8005932 <UART_SetConfig+0x5a6>
 800582c:	2308      	movs	r3, #8
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005832:	e07e      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e07a      	b.n	8005932 <UART_SetConfig+0x5a6>
 800583c:	2320      	movs	r3, #32
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005842:	e076      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584a:	e072      	b.n	8005932 <UART_SetConfig+0x5a6>
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e06e      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a75      	ldr	r2, [pc, #468]	; (8005a30 <UART_SetConfig+0x6a4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d130      	bne.n	80058c0 <UART_SetConfig+0x534>
 800585e:	4b72      	ldr	r3, [pc, #456]	; (8005a28 <UART_SetConfig+0x69c>)
 8005860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	2b05      	cmp	r3, #5
 8005868:	d826      	bhi.n	80058b8 <UART_SetConfig+0x52c>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0x4e4>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005889 	.word	0x08005889
 8005874:	08005891 	.word	0x08005891
 8005878:	08005899 	.word	0x08005899
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058b1 	.word	0x080058b1
 8005888:	2300      	movs	r3, #0
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588e:	e050      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005896:	e04c      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589e:	e048      	b.n	8005932 <UART_SetConfig+0x5a6>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a6:	e044      	b.n	8005932 <UART_SetConfig+0x5a6>
 80058a8:	2320      	movs	r3, #32
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ae:	e040      	b.n	8005932 <UART_SetConfig+0x5a6>
 80058b0:	2340      	movs	r3, #64	; 0x40
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b6:	e03c      	b.n	8005932 <UART_SetConfig+0x5a6>
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e038      	b.n	8005932 <UART_SetConfig+0x5a6>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a5b      	ldr	r2, [pc, #364]	; (8005a34 <UART_SetConfig+0x6a8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d130      	bne.n	800592c <UART_SetConfig+0x5a0>
 80058ca:	4b57      	ldr	r3, [pc, #348]	; (8005a28 <UART_SetConfig+0x69c>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	2b05      	cmp	r3, #5
 80058d4:	d826      	bhi.n	8005924 <UART_SetConfig+0x598>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <UART_SetConfig+0x550>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	080058f5 	.word	0x080058f5
 80058e0:	080058fd 	.word	0x080058fd
 80058e4:	08005905 	.word	0x08005905
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005915 	.word	0x08005915
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	2302      	movs	r3, #2
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fa:	e01a      	b.n	8005932 <UART_SetConfig+0x5a6>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005902:	e016      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590a:	e012      	b.n	8005932 <UART_SetConfig+0x5a6>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005912:	e00e      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005914:	2320      	movs	r3, #32
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591a:	e00a      	b.n	8005932 <UART_SetConfig+0x5a6>
 800591c:	2340      	movs	r3, #64	; 0x40
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e006      	b.n	8005932 <UART_SetConfig+0x5a6>
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e002      	b.n	8005932 <UART_SetConfig+0x5a6>
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a3f      	ldr	r2, [pc, #252]	; (8005a34 <UART_SetConfig+0x6a8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	f040 80f8 	bne.w	8005b2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800593e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005942:	2b20      	cmp	r3, #32
 8005944:	dc46      	bgt.n	80059d4 <UART_SetConfig+0x648>
 8005946:	2b02      	cmp	r3, #2
 8005948:	f2c0 8082 	blt.w	8005a50 <UART_SetConfig+0x6c4>
 800594c:	3b02      	subs	r3, #2
 800594e:	2b1e      	cmp	r3, #30
 8005950:	d87e      	bhi.n	8005a50 <UART_SetConfig+0x6c4>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x5cc>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	080059db 	.word	0x080059db
 800595c:	08005a51 	.word	0x08005a51
 8005960:	080059e3 	.word	0x080059e3
 8005964:	08005a51 	.word	0x08005a51
 8005968:	08005a51 	.word	0x08005a51
 800596c:	08005a51 	.word	0x08005a51
 8005970:	080059f3 	.word	0x080059f3
 8005974:	08005a51 	.word	0x08005a51
 8005978:	08005a51 	.word	0x08005a51
 800597c:	08005a51 	.word	0x08005a51
 8005980:	08005a51 	.word	0x08005a51
 8005984:	08005a51 	.word	0x08005a51
 8005988:	08005a51 	.word	0x08005a51
 800598c:	08005a51 	.word	0x08005a51
 8005990:	08005a03 	.word	0x08005a03
 8005994:	08005a51 	.word	0x08005a51
 8005998:	08005a51 	.word	0x08005a51
 800599c:	08005a51 	.word	0x08005a51
 80059a0:	08005a51 	.word	0x08005a51
 80059a4:	08005a51 	.word	0x08005a51
 80059a8:	08005a51 	.word	0x08005a51
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a51 	.word	0x08005a51
 80059b4:	08005a51 	.word	0x08005a51
 80059b8:	08005a51 	.word	0x08005a51
 80059bc:	08005a51 	.word	0x08005a51
 80059c0:	08005a51 	.word	0x08005a51
 80059c4:	08005a51 	.word	0x08005a51
 80059c8:	08005a51 	.word	0x08005a51
 80059cc:	08005a51 	.word	0x08005a51
 80059d0:	08005a43 	.word	0x08005a43
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d037      	beq.n	8005a48 <UART_SetConfig+0x6bc>
 80059d8:	e03a      	b.n	8005a50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059da:	f7ff f865 	bl	8004aa8 <HAL_RCCEx_GetD3PCLK1Freq>
 80059de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059e0:	e03c      	b.n	8005a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff f874 	bl	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f0:	e034      	b.n	8005a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f2:	f107 0318 	add.w	r3, r7, #24
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f9c0 	bl	8004d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a00:	e02c      	b.n	8005a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <UART_SetConfig+0x69c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <UART_SetConfig+0x69c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	08db      	lsrs	r3, r3, #3
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	4a07      	ldr	r2, [pc, #28]	; (8005a38 <UART_SetConfig+0x6ac>)
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a20:	e01c      	b.n	8005a5c <UART_SetConfig+0x6d0>
 8005a22:	bf00      	nop
 8005a24:	40011400 	.word	0x40011400
 8005a28:	58024400 	.word	0x58024400
 8005a2c:	40007800 	.word	0x40007800
 8005a30:	40007c00 	.word	0x40007c00
 8005a34:	58000c00 	.word	0x58000c00
 8005a38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005a3c:	4b9d      	ldr	r3, [pc, #628]	; (8005cb4 <UART_SetConfig+0x928>)
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a40:	e00c      	b.n	8005a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a42:	4b9d      	ldr	r3, [pc, #628]	; (8005cb8 <UART_SetConfig+0x92c>)
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a46:	e009      	b.n	8005a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a4e:	e005      	b.n	8005a5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 81de 	beq.w	8005e20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	4a94      	ldr	r2, [pc, #592]	; (8005cbc <UART_SetConfig+0x930>)
 8005a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a76:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4413      	add	r3, r2
 8005a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d305      	bcc.n	8005a94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d903      	bls.n	8005a9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a9a:	e1c1      	b.n	8005e20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	60fa      	str	r2, [r7, #12]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	4a84      	ldr	r2, [pc, #528]	; (8005cbc <UART_SetConfig+0x930>)
 8005aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005abe:	f7fa fc0b 	bl	80002d8 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	020b      	lsls	r3, r1, #8
 8005ad4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ad8:	0202      	lsls	r2, r0, #8
 8005ada:	6979      	ldr	r1, [r7, #20]
 8005adc:	6849      	ldr	r1, [r1, #4]
 8005ade:	0849      	lsrs	r1, r1, #1
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	eb12 0804 	adds.w	r8, r2, r4
 8005aea:	eb43 0905 	adc.w	r9, r3, r5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	469a      	mov	sl, r3
 8005af6:	4693      	mov	fp, r2
 8005af8:	4652      	mov	r2, sl
 8005afa:	465b      	mov	r3, fp
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fa fbea 	bl	80002d8 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4613      	mov	r3, r2
 8005b0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b12:	d308      	bcc.n	8005b26 <UART_SetConfig+0x79a>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b1a:	d204      	bcs.n	8005b26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b22:	60da      	str	r2, [r3, #12]
 8005b24:	e17c      	b.n	8005e20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b2c:	e178      	b.n	8005e20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b36:	f040 80c5 	bne.w	8005cc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	dc48      	bgt.n	8005bd4 <UART_SetConfig+0x848>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	db7b      	blt.n	8005c3e <UART_SetConfig+0x8b2>
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d879      	bhi.n	8005c3e <UART_SetConfig+0x8b2>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0x7c4>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005bdb 	.word	0x08005bdb
 8005b54:	08005be3 	.word	0x08005be3
 8005b58:	08005c3f 	.word	0x08005c3f
 8005b5c:	08005c3f 	.word	0x08005c3f
 8005b60:	08005beb 	.word	0x08005beb
 8005b64:	08005c3f 	.word	0x08005c3f
 8005b68:	08005c3f 	.word	0x08005c3f
 8005b6c:	08005c3f 	.word	0x08005c3f
 8005b70:	08005bfb 	.word	0x08005bfb
 8005b74:	08005c3f 	.word	0x08005c3f
 8005b78:	08005c3f 	.word	0x08005c3f
 8005b7c:	08005c3f 	.word	0x08005c3f
 8005b80:	08005c3f 	.word	0x08005c3f
 8005b84:	08005c3f 	.word	0x08005c3f
 8005b88:	08005c3f 	.word	0x08005c3f
 8005b8c:	08005c3f 	.word	0x08005c3f
 8005b90:	08005c0b 	.word	0x08005c0b
 8005b94:	08005c3f 	.word	0x08005c3f
 8005b98:	08005c3f 	.word	0x08005c3f
 8005b9c:	08005c3f 	.word	0x08005c3f
 8005ba0:	08005c3f 	.word	0x08005c3f
 8005ba4:	08005c3f 	.word	0x08005c3f
 8005ba8:	08005c3f 	.word	0x08005c3f
 8005bac:	08005c3f 	.word	0x08005c3f
 8005bb0:	08005c3f 	.word	0x08005c3f
 8005bb4:	08005c3f 	.word	0x08005c3f
 8005bb8:	08005c3f 	.word	0x08005c3f
 8005bbc:	08005c3f 	.word	0x08005c3f
 8005bc0:	08005c3f 	.word	0x08005c3f
 8005bc4:	08005c3f 	.word	0x08005c3f
 8005bc8:	08005c3f 	.word	0x08005c3f
 8005bcc:	08005c3f 	.word	0x08005c3f
 8005bd0:	08005c31 	.word	0x08005c31
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d02e      	beq.n	8005c36 <UART_SetConfig+0x8aa>
 8005bd8:	e031      	b.n	8005c3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bda:	f7fd fd2f 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8005bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005be0:	e033      	b.n	8005c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be2:	f7fd fd41 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8005be6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005be8:	e02f      	b.n	8005c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe ff70 	bl	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf8:	e027      	b.n	8005c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bfa:	f107 0318 	add.w	r3, r7, #24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff f8bc 	bl	8004d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c08:	e01f      	b.n	8005c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c0a:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <UART_SetConfig+0x934>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c16:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <UART_SetConfig+0x934>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	4a24      	ldr	r2, [pc, #144]	; (8005cb4 <UART_SetConfig+0x928>)
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c28:	e00f      	b.n	8005c4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <UART_SetConfig+0x928>)
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c2e:	e00c      	b.n	8005c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c30:	4b21      	ldr	r3, [pc, #132]	; (8005cb8 <UART_SetConfig+0x92c>)
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c34:	e009      	b.n	8005c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c3c:	e005      	b.n	8005c4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80e7 	beq.w	8005e20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <UART_SetConfig+0x930>)
 8005c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c64:	005a      	lsls	r2, r3, #1
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	441a      	add	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d916      	bls.n	8005cac <UART_SetConfig+0x920>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c84:	d212      	bcs.n	8005cac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f023 030f 	bic.w	r3, r3, #15
 8005c8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	e0b9      	b.n	8005e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005cb2:	e0b5      	b.n	8005e20 <UART_SetConfig+0xa94>
 8005cb4:	03d09000 	.word	0x03d09000
 8005cb8:	003d0900 	.word	0x003d0900
 8005cbc:	08006c38 	.word	0x08006c38
 8005cc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	dc49      	bgt.n	8005d60 <UART_SetConfig+0x9d4>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	db7c      	blt.n	8005dca <UART_SetConfig+0xa3e>
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d87a      	bhi.n	8005dca <UART_SetConfig+0xa3e>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0x950>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d67 	.word	0x08005d67
 8005ce0:	08005d6f 	.word	0x08005d6f
 8005ce4:	08005dcb 	.word	0x08005dcb
 8005ce8:	08005dcb 	.word	0x08005dcb
 8005cec:	08005d77 	.word	0x08005d77
 8005cf0:	08005dcb 	.word	0x08005dcb
 8005cf4:	08005dcb 	.word	0x08005dcb
 8005cf8:	08005dcb 	.word	0x08005dcb
 8005cfc:	08005d87 	.word	0x08005d87
 8005d00:	08005dcb 	.word	0x08005dcb
 8005d04:	08005dcb 	.word	0x08005dcb
 8005d08:	08005dcb 	.word	0x08005dcb
 8005d0c:	08005dcb 	.word	0x08005dcb
 8005d10:	08005dcb 	.word	0x08005dcb
 8005d14:	08005dcb 	.word	0x08005dcb
 8005d18:	08005dcb 	.word	0x08005dcb
 8005d1c:	08005d97 	.word	0x08005d97
 8005d20:	08005dcb 	.word	0x08005dcb
 8005d24:	08005dcb 	.word	0x08005dcb
 8005d28:	08005dcb 	.word	0x08005dcb
 8005d2c:	08005dcb 	.word	0x08005dcb
 8005d30:	08005dcb 	.word	0x08005dcb
 8005d34:	08005dcb 	.word	0x08005dcb
 8005d38:	08005dcb 	.word	0x08005dcb
 8005d3c:	08005dcb 	.word	0x08005dcb
 8005d40:	08005dcb 	.word	0x08005dcb
 8005d44:	08005dcb 	.word	0x08005dcb
 8005d48:	08005dcb 	.word	0x08005dcb
 8005d4c:	08005dcb 	.word	0x08005dcb
 8005d50:	08005dcb 	.word	0x08005dcb
 8005d54:	08005dcb 	.word	0x08005dcb
 8005d58:	08005dcb 	.word	0x08005dcb
 8005d5c:	08005dbd 	.word	0x08005dbd
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d02e      	beq.n	8005dc2 <UART_SetConfig+0xa36>
 8005d64:	e031      	b.n	8005dca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d66:	f7fd fc69 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8005d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d6c:	e033      	b.n	8005dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6e:	f7fd fc7b 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8005d72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d74:	e02f      	b.n	8005dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe feaa 	bl	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d84:	e027      	b.n	8005dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d86:	f107 0318 	add.w	r3, r7, #24
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fff6 	bl	8004d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d94:	e01f      	b.n	8005dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d96:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <UART_SetConfig+0xac0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005da2:	4b2a      	ldr	r3, [pc, #168]	; (8005e4c <UART_SetConfig+0xac0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	08db      	lsrs	r3, r3, #3
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <UART_SetConfig+0xac4>)
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005db4:	e00f      	b.n	8005dd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005db6:	4b26      	ldr	r3, [pc, #152]	; (8005e50 <UART_SetConfig+0xac4>)
 8005db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dba:	e00c      	b.n	8005dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dbc:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <UART_SetConfig+0xac8>)
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc0:	e009      	b.n	8005dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc8:	e005      	b.n	8005dd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d021      	beq.n	8005e20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <UART_SetConfig+0xacc>)
 8005de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005de6:	461a      	mov	r2, r3
 8005de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dea:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	441a      	add	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d909      	bls.n	8005e1a <UART_SetConfig+0xa8e>
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0c:	d205      	bcs.n	8005e1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e002      	b.n	8005e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e3c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3748      	adds	r7, #72	; 0x48
 8005e44:	46bd      	mov	sp, r7
 8005e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e4a:	bf00      	nop
 8005e4c:	58024400 	.word	0x58024400
 8005e50:	03d09000 	.word	0x03d09000
 8005e54:	003d0900 	.word	0x003d0900
 8005e58:	08006c38 	.word	0x08006c38

08005e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01a      	beq.n	8005f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5a:	d10a      	bne.n	8005f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	605a      	str	r2, [r3, #4]
  }
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b098      	sub	sp, #96	; 0x60
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fb0:	f7fb fa6e 	bl	8001490 <HAL_GetTick>
 8005fb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d12f      	bne.n	8006024 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f88e 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d022      	beq.n	8006024 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800600a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e6      	bne.n	8005fde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e063      	b.n	80060ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b04      	cmp	r3, #4
 8006030:	d149      	bne.n	80060c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006032:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603a:	2200      	movs	r2, #0
 800603c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f857 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d03c      	beq.n	80060c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	623b      	str	r3, [r7, #32]
   return(result);
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606a:	633b      	str	r3, [r7, #48]	; 0x30
 800606c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e6      	bne.n	800604c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	60fb      	str	r3, [r7, #12]
   return(result);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800609e:	61fa      	str	r2, [r7, #28]
 80060a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	69b9      	ldr	r1, [r7, #24]
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	617b      	str	r3, [r7, #20]
   return(result);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e5      	bne.n	800607e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e012      	b.n	80060ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3758      	adds	r7, #88	; 0x58
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006104:	e049      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d045      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fb f9bf 	bl	8001490 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <UART_WaitOnFlagUntilTimeout+0x30>
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e048      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d031      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b08      	cmp	r3, #8
 8006142:	d110      	bne.n	8006166 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2208      	movs	r2, #8
 800614a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f839 	bl	80061c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2208      	movs	r2, #8
 8006156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e029      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006174:	d111      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800617e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f81f 	bl	80061c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e00f      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4013      	ands	r3, r2
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	bf0c      	ite	eq
 80061aa:	2301      	moveq	r3, #1
 80061ac:	2300      	movne	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d0a6      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b095      	sub	sp, #84	; 0x54
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	643b      	str	r3, [r7, #64]	; 0x40
 80061ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e6      	bne.n	80061cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	61fb      	str	r3, [r7, #28]
   return(result);
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	4b1e      	ldr	r3, [pc, #120]	; (800628c <UART_EndRxTransfer+0xc8>)
 8006212:	4013      	ands	r3, r2
 8006214:	64bb      	str	r3, [r7, #72]	; 0x48
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800621e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e5      	bne.n	80061fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006236:	2b01      	cmp	r3, #1
 8006238:	d118      	bne.n	800626c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	60bb      	str	r3, [r7, #8]
   return(result);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f023 0310 	bic.w	r3, r3, #16
 800624e:	647b      	str	r3, [r7, #68]	; 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	613b      	str	r3, [r7, #16]
   return(result);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006280:	bf00      	nop
 8006282:	3754      	adds	r7, #84	; 0x54
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	effffffe 	.word	0xeffffffe

08006290 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e027      	b.n	80062f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2224      	movs	r2, #36	; 0x24
 80062b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006316:	2302      	movs	r3, #2
 8006318:	e02d      	b.n	8006376 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2224      	movs	r2, #36	; 0x24
 8006326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f850 	bl	80063fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006392:	2302      	movs	r3, #2
 8006394:	e02d      	b.n	80063f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2224      	movs	r2, #36	; 0x24
 80063a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f812 	bl	80063fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006408:	2b00      	cmp	r3, #0
 800640a:	d108      	bne.n	800641e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800641c:	e031      	b.n	8006482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800641e:	2310      	movs	r3, #16
 8006420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006422:	2310      	movs	r3, #16
 8006424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	0e5b      	lsrs	r3, r3, #25
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	0f5b      	lsrs	r3, r3, #29
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	7b3a      	ldrb	r2, [r7, #12]
 800644a:	4911      	ldr	r1, [pc, #68]	; (8006490 <UARTEx_SetNbDataToProcess+0x94>)
 800644c:	5c8a      	ldrb	r2, [r1, r2]
 800644e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006452:	7b3a      	ldrb	r2, [r7, #12]
 8006454:	490f      	ldr	r1, [pc, #60]	; (8006494 <UARTEx_SetNbDataToProcess+0x98>)
 8006456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006458:	fb93 f3f2 	sdiv	r3, r3, r2
 800645c:	b29a      	uxth	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	7b7a      	ldrb	r2, [r7, #13]
 8006468:	4909      	ldr	r1, [pc, #36]	; (8006490 <UARTEx_SetNbDataToProcess+0x94>)
 800646a:	5c8a      	ldrb	r2, [r1, r2]
 800646c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006470:	7b7a      	ldrb	r2, [r7, #13]
 8006472:	4908      	ldr	r1, [pc, #32]	; (8006494 <UARTEx_SetNbDataToProcess+0x98>)
 8006474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006476:	fb93 f3f2 	sdiv	r3, r3, r2
 800647a:	b29a      	uxth	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006482:	bf00      	nop
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	08006c50 	.word	0x08006c50
 8006494:	08006c58 	.word	0x08006c58

08006498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006498:	b084      	sub	sp, #16
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	f107 001c 	add.w	r0, r7, #28
 80064a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d120      	bne.n	80064f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	4b2a      	ldr	r3, [pc, #168]	; (800656c <USB_CoreInit+0xd4>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d105      	bne.n	80064e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 faac 	bl	8006a44 <USB_CoreReset>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73fb      	strb	r3, [r7, #15]
 80064f0:	e01a      	b.n	8006528 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 faa0 	bl	8006a44 <USB_CoreReset>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	639a      	str	r2, [r3, #56]	; 0x38
 800651a:	e005      	b.n	8006528 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	2b01      	cmp	r3, #1
 800652c:	d116      	bne.n	800655c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800653c:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <USB_CoreInit+0xd8>)
 800653e:	4313      	orrs	r3, r2
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f043 0206 	orr.w	r2, r3, #6
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006568:	b004      	add	sp, #16
 800656a:	4770      	bx	lr
 800656c:	ffbdffbf 	.word	0xffbdffbf
 8006570:	03ee0000 	.word	0x03ee0000

08006574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f023 0201 	bic.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d115      	bne.n	80065e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065c4:	2001      	movs	r0, #1
 80065c6:	f7fa ff6f 	bl	80014a8 <HAL_Delay>
      ms++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa29 	bl	8006a28 <USB_GetMode>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d01e      	beq.n	800661a <USB_SetCurrentMode+0x84>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b31      	cmp	r3, #49	; 0x31
 80065e0:	d9f0      	bls.n	80065c4 <USB_SetCurrentMode+0x2e>
 80065e2:	e01a      	b.n	800661a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d115      	bne.n	8006616 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065f6:	2001      	movs	r0, #1
 80065f8:	f7fa ff56 	bl	80014a8 <HAL_Delay>
      ms++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa10 	bl	8006a28 <USB_GetMode>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <USB_SetCurrentMode+0x84>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b31      	cmp	r3, #49	; 0x31
 8006612:	d9f0      	bls.n	80065f6 <USB_SetCurrentMode+0x60>
 8006614:	e001      	b.n	800661a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e005      	b.n	8006626 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b32      	cmp	r3, #50	; 0x32
 800661e:	d101      	bne.n	8006624 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006630:	b084      	sub	sp, #16
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800663e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	e009      	b.n	8006664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3340      	adds	r3, #64	; 0x40
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b0e      	cmp	r3, #14
 8006668:	d9f2      	bls.n	8006650 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11c      	bne.n	80066aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667e:	f043 0302 	orr.w	r3, r3, #2
 8006682:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e005      	b.n	80066b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	4619      	mov	r1, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d0:	461a      	mov	r2, r3
 80066d2:	680b      	ldr	r3, [r1, #0]
 80066d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10c      	bne.n	80066f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066e2:	2100      	movs	r1, #0
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f965 	bl	80069b4 <USB_SetDevSpeed>
 80066ea:	e008      	b.n	80066fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066ec:	2101      	movs	r1, #1
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f960 	bl	80069b4 <USB_SetDevSpeed>
 80066f4:	e003      	b.n	80066fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066f6:	2103      	movs	r1, #3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f95b 	bl	80069b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066fe:	2110      	movs	r1, #16
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8f3 	bl	80068ec <USB_FlushTxFifo>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f91f 	bl	8006954 <USB_FlushRxFifo>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006726:	461a      	mov	r2, r3
 8006728:	2300      	movs	r3, #0
 800672a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	e043      	b.n	80067d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006760:	d118      	bne.n	8006794 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	461a      	mov	r2, r3
 8006776:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e013      	b.n	80067a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	461a      	mov	r2, r3
 800678c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e008      	b.n	80067a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3301      	adds	r3, #1
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d3b7      	bcc.n	800674a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	e043      	b.n	8006868 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f6:	d118      	bne.n	800682a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e013      	b.n	800683c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e008      	b.n	800683c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	461a      	mov	r2, r3
 8006838:	2300      	movs	r3, #0
 800683a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	461a      	mov	r2, r3
 800684a:	2300      	movs	r3, #0
 800684c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3301      	adds	r3, #1
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	429a      	cmp	r2, r3
 800686e:	d3b7      	bcc.n	80067e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006882:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006890:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d105      	bne.n	80068a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f043 0210 	orr.w	r2, r3, #16
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <USB_DevInit+0x2b4>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f043 0208 	orr.w	r2, r3, #8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d105      	bne.n	80068d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <USB_DevInit+0x2b8>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e0:	b004      	add	sp, #16
 80068e2:	4770      	bx	lr
 80068e4:	803c3800 	.word	0x803c3800
 80068e8:	40000004 	.word	0x40000004

080068ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a13      	ldr	r2, [pc, #76]	; (8006950 <USB_FlushTxFifo+0x64>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e01b      	b.n	8006944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	daf2      	bge.n	80068fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	019b      	lsls	r3, r3, #6
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a08      	ldr	r2, [pc, #32]	; (8006950 <USB_FlushTxFifo+0x64>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e006      	b.n	8006944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b20      	cmp	r3, #32
 8006940:	d0f0      	beq.n	8006924 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	00030d40 	.word	0x00030d40

08006954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <USB_FlushRxFifo+0x5c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e018      	b.n	80069a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	daf2      	bge.n	8006960 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2210      	movs	r2, #16
 8006982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <USB_FlushRxFifo+0x5c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d901      	bls.n	8006996 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e006      	b.n	80069a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d0f0      	beq.n	8006984 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	00030d40 	.word	0x00030d40

080069b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b085      	sub	sp, #20
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a00:	f023 0303 	bic.w	r3, r3, #3
 8006a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a14:	f043 0302 	orr.w	r3, r3, #2
 8006a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0301 	and.w	r3, r3, #1
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <USB_CoreReset+0x64>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d901      	bls.n	8006a62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e01b      	b.n	8006a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	daf2      	bge.n	8006a50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f043 0201 	orr.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <USB_CoreReset+0x64>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e006      	b.n	8006a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d0f0      	beq.n	8006a7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	00030d40 	.word	0x00030d40

08006aac <_ZdlPvj>:
 8006aac:	f000 b800 	b.w	8006ab0 <_ZdlPv>

08006ab0 <_ZdlPv>:
 8006ab0:	f000 b800 	b.w	8006ab4 <free>

08006ab4 <free>:
 8006ab4:	4b02      	ldr	r3, [pc, #8]	; (8006ac0 <free+0xc>)
 8006ab6:	4601      	mov	r1, r0
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	f000 b83d 	b.w	8006b38 <_free_r>
 8006abe:	bf00      	nop
 8006ac0:	2400005c 	.word	0x2400005c

08006ac4 <__malloc_lock>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__malloc_lock+0x8>)
 8006ac6:	f000 b835 	b.w	8006b34 <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	2400090c 	.word	0x2400090c

08006ad0 <__malloc_unlock>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__malloc_unlock+0x8>)
 8006ad2:	f000 b830 	b.w	8006b36 <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	2400090c 	.word	0x2400090c

08006adc <memset>:
 8006adc:	4402      	add	r2, r0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d100      	bne.n	8006ae6 <memset+0xa>
 8006ae4:	4770      	bx	lr
 8006ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aea:	e7f9      	b.n	8006ae0 <memset+0x4>

08006aec <__libc_init_array>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4d0d      	ldr	r5, [pc, #52]	; (8006b24 <__libc_init_array+0x38>)
 8006af0:	4c0d      	ldr	r4, [pc, #52]	; (8006b28 <__libc_init_array+0x3c>)
 8006af2:	1b64      	subs	r4, r4, r5
 8006af4:	10a4      	asrs	r4, r4, #2
 8006af6:	2600      	movs	r6, #0
 8006af8:	42a6      	cmp	r6, r4
 8006afa:	d109      	bne.n	8006b10 <__libc_init_array+0x24>
 8006afc:	4d0b      	ldr	r5, [pc, #44]	; (8006b2c <__libc_init_array+0x40>)
 8006afe:	4c0c      	ldr	r4, [pc, #48]	; (8006b30 <__libc_init_array+0x44>)
 8006b00:	f000 f866 	bl	8006bd0 <_init>
 8006b04:	1b64      	subs	r4, r4, r5
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	2600      	movs	r6, #0
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	d105      	bne.n	8006b1a <__libc_init_array+0x2e>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b14:	4798      	blx	r3
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7ee      	b.n	8006af8 <__libc_init_array+0xc>
 8006b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1e:	4798      	blx	r3
 8006b20:	3601      	adds	r6, #1
 8006b22:	e7f2      	b.n	8006b0a <__libc_init_array+0x1e>
 8006b24:	08006c68 	.word	0x08006c68
 8006b28:	08006c68 	.word	0x08006c68
 8006b2c:	08006c68 	.word	0x08006c68
 8006b30:	08006c6c 	.word	0x08006c6c

08006b34 <__retarget_lock_acquire_recursive>:
 8006b34:	4770      	bx	lr

08006b36 <__retarget_lock_release_recursive>:
 8006b36:	4770      	bx	lr

08006b38 <_free_r>:
 8006b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d044      	beq.n	8006bc8 <_free_r+0x90>
 8006b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b42:	9001      	str	r0, [sp, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f1a1 0404 	sub.w	r4, r1, #4
 8006b4a:	bfb8      	it	lt
 8006b4c:	18e4      	addlt	r4, r4, r3
 8006b4e:	f7ff ffb9 	bl	8006ac4 <__malloc_lock>
 8006b52:	4a1e      	ldr	r2, [pc, #120]	; (8006bcc <_free_r+0x94>)
 8006b54:	9801      	ldr	r0, [sp, #4]
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	b933      	cbnz	r3, 8006b68 <_free_r+0x30>
 8006b5a:	6063      	str	r3, [r4, #4]
 8006b5c:	6014      	str	r4, [r2, #0]
 8006b5e:	b003      	add	sp, #12
 8006b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b64:	f7ff bfb4 	b.w	8006ad0 <__malloc_unlock>
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	d908      	bls.n	8006b7e <_free_r+0x46>
 8006b6c:	6825      	ldr	r5, [r4, #0]
 8006b6e:	1961      	adds	r1, r4, r5
 8006b70:	428b      	cmp	r3, r1
 8006b72:	bf01      	itttt	eq
 8006b74:	6819      	ldreq	r1, [r3, #0]
 8006b76:	685b      	ldreq	r3, [r3, #4]
 8006b78:	1949      	addeq	r1, r1, r5
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	e7ed      	b.n	8006b5a <_free_r+0x22>
 8006b7e:	461a      	mov	r2, r3
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b10b      	cbz	r3, 8006b88 <_free_r+0x50>
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d9fa      	bls.n	8006b7e <_free_r+0x46>
 8006b88:	6811      	ldr	r1, [r2, #0]
 8006b8a:	1855      	adds	r5, r2, r1
 8006b8c:	42a5      	cmp	r5, r4
 8006b8e:	d10b      	bne.n	8006ba8 <_free_r+0x70>
 8006b90:	6824      	ldr	r4, [r4, #0]
 8006b92:	4421      	add	r1, r4
 8006b94:	1854      	adds	r4, r2, r1
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	6011      	str	r1, [r2, #0]
 8006b9a:	d1e0      	bne.n	8006b5e <_free_r+0x26>
 8006b9c:	681c      	ldr	r4, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	6053      	str	r3, [r2, #4]
 8006ba2:	440c      	add	r4, r1
 8006ba4:	6014      	str	r4, [r2, #0]
 8006ba6:	e7da      	b.n	8006b5e <_free_r+0x26>
 8006ba8:	d902      	bls.n	8006bb0 <_free_r+0x78>
 8006baa:	230c      	movs	r3, #12
 8006bac:	6003      	str	r3, [r0, #0]
 8006bae:	e7d6      	b.n	8006b5e <_free_r+0x26>
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	1961      	adds	r1, r4, r5
 8006bb4:	428b      	cmp	r3, r1
 8006bb6:	bf04      	itt	eq
 8006bb8:	6819      	ldreq	r1, [r3, #0]
 8006bba:	685b      	ldreq	r3, [r3, #4]
 8006bbc:	6063      	str	r3, [r4, #4]
 8006bbe:	bf04      	itt	eq
 8006bc0:	1949      	addeq	r1, r1, r5
 8006bc2:	6021      	streq	r1, [r4, #0]
 8006bc4:	6054      	str	r4, [r2, #4]
 8006bc6:	e7ca      	b.n	8006b5e <_free_r+0x26>
 8006bc8:	b003      	add	sp, #12
 8006bca:	bd30      	pop	{r4, r5, pc}
 8006bcc:	240007d0 	.word	0x240007d0

08006bd0 <_init>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr

08006bdc <_fini>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr
