
04_2_CPP_Blinky_MemoryPool_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800706c  0800706c  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800706c  0800706c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007074  08007074  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800707c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  080070dc  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  0800713c  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000800  24000120  0800719c  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000920  0800719c  00020920  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022406  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003ede  00000000  00000000  00042597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012d0  00000000  00000000  00046478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e5a  00000000  00000000  00047748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00040636  00000000  00000000  000485a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001b120  00000000  00000000  00088bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018a2bc  00000000  00000000  000a3cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000533c  00000000  00000000  0022dfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a8  00000000  00000000  002332f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800701c 	.word	0x0800701c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	0800701c 	.word	0x0800701c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <cpp_main>:

#include "MemPool.hpp"

//YOUR CODE ENDS HERE

void cpp_main(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0



	//YOUR CODE STARTS HERE
    auto SmartPointerOnLedMEmPool  = std::make_unique <MemPool<BlinkingLed,4>> ();
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f851 	bl	80007b0 <_ZSt11make_uniqueI7MemPoolI11BlinkingLedLj4EEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>

    ///TODO There is a problem with the first object in the pool
    /// bad work around: initialise first a dummy  object
    BlinkingLed *Led0Blinker=SmartPointerOnLedMEmPool->Allocate();
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f861 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 8000716:	4603      	mov	r3, r0
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f869 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 800071e:	6178      	str	r0, [r7, #20]
    BlinkingLed *Led1Blinker=SmartPointerOnLedMEmPool->Allocate();
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f858 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 8000728:	4603      	mov	r3, r0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f860 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 8000730:	6138      	str	r0, [r7, #16]
	Led1Blinker->setFrequency(0.5);
 8000732:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000736:	6938      	ldr	r0, [r7, #16]
 8000738:	f000 fedd 	bl	80014f6 <_ZN11BlinkingLed12setFrequencyEf>
	Led1Blinker->setPinPort(LD1_GPIO_Port,LD1_Pin);
 800073c:	2201      	movs	r2, #1
 800073e:	491a      	ldr	r1, [pc, #104]	; (80007a8 <cpp_main+0xa8>)
 8000740:	6938      	ldr	r0, [r7, #16]
 8000742:	f000 ff13 	bl	800156c <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>

    BlinkingLed *Led2Blinker=SmartPointerOnLedMEmPool->Allocate();
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f845 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 800074e:	4603      	mov	r3, r0
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f84d 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 8000756:	60f8      	str	r0, [r7, #12]
    Led2Blinker->setFrequency(1.0);
 8000758:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f000 feca 	bl	80014f6 <_ZN11BlinkingLed12setFrequencyEf>
    Led2Blinker->setPinPort(LD2_GPIO_Port,LD2_Pin);
 8000762:	2202      	movs	r2, #2
 8000764:	4911      	ldr	r1, [pc, #68]	; (80007ac <cpp_main+0xac>)
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 ff00 	bl	800156c <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>

    BlinkingLed *Led3Blinker=SmartPointerOnLedMEmPool->Allocate();
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f832 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 8000774:	4603      	mov	r3, r0
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f83a 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 800077c:	60b8      	str	r0, [r7, #8]
    Led3Blinker->setFrequency(2.0);
 800077e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f000 feb7 	bl	80014f6 <_ZN11BlinkingLed12setFrequencyEf>
    Led3Blinker->setPinPort(LD3_GPIO_Port,LD3_Pin);
 8000788:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <cpp_main+0xa8>)
 800078e:	68b8      	ldr	r0, [r7, #8]
 8000790:	f000 feec 	bl	800156c <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>
   	//YOUR CODE ENDS HERE

while (1)
	{
	//YOUR CODE STARTS HERE
	Led1Blinker->processBlinking();
 8000794:	6938      	ldr	r0, [r7, #16]
 8000796:	f000 febd 	bl	8001514 <_ZN11BlinkingLed15processBlinkingEv>
	Led2Blinker->processBlinking();
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f000 feba 	bl	8001514 <_ZN11BlinkingLed15processBlinkingEv>
	Led3Blinker->processBlinking();
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f000 feb7 	bl	8001514 <_ZN11BlinkingLed15processBlinkingEv>
	Led1Blinker->processBlinking();
 80007a6:	e7f5      	b.n	8000794 <cpp_main+0x94>
 80007a8:	58020400 	.word	0x58020400
 80007ac:	58021000 	.word	0x58021000

080007b0 <_ZSt11make_uniqueI7MemPoolI11BlinkingLedLj4EEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80007b8:	2098      	movs	r0, #152	; 0x98
 80007ba:	f006 fad1 	bl	8006d60 <_Znwj>
 80007be:	4603      	mov	r3, r0
 80007c0:	461c      	mov	r4, r3
 80007c2:	4620      	mov	r0, r4
 80007c4:	f000 f85c 	bl	8000880 <_ZN7MemPoolI11BlinkingLedLj4EEC1Ev>
 80007c8:	4621      	mov	r1, r4
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f88b 	bl	80008e6 <_ZNSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1IS4_vEEPS2_>
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}

080007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	return get();
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f89c 	bl	800091e <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE3getEv>
 80007e6:	4603      	mov	r3, r0
      }
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>:
    mem_beg_ = nullptr;
}


template<typename T, size_t NumCells>
T* MemPool<T, NumCells>::Allocate()
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
{
    if ( num_init_ < num_cells_ )
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d20f      	bcs.n	8000824 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x34>
    {
        uint32_t* p = reinterpret_cast<uint32_t*>( AddrFromIndex( num_init_ ) );
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f894 	bl	8000938 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>
 8000810:	60b8      	str	r0, [r7, #8]
        *p = ++num_init_;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	601a      	str	r2, [r3, #0]
    }

    T* res = nullptr;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]

    if ( num_free_cells_ > 0 )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d022      	beq.n	8000876 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x86>
    {
        res = reinterpret_cast<T*>( next_ );
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000836:	60fb      	str	r3, [r7, #12]

        if ( --num_free_cells_ > 0 )
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00c      	beq.n	800086e <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x7e>
        {
            next_ = AddrFromIndex( *reinterpret_cast<uint32_t*>( next_ ) );
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f86a 	bl	8000938 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>
 8000864:	4602      	mov	r2, r0
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800086c:	e003      	b.n	8000876 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x86>
        }
        else
        {
            next_ = nullptr;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
    }

    return res;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZN7MemPoolI11BlinkingLedLj4EEC1Ev>:
MemPool<T, NumCells>::MemPool()
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2220      	movs	r2, #32
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2204      	movs	r2, #4
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2204      	movs	r2, #4
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f103 0210 	add.w	r2, r3, #16
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_ZNSt15__uniq_ptr_dataI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f842 	bl	8000960 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1EPS2_>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_ZNSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1IS4_vEEPS2_>:
	unique_ptr(pointer __p) noexcept
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6839      	ldr	r1, [r7, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffe6 	bl	80008c6 <_ZNSt15__uniq_ptr_dataI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>
        { }
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f83a 	bl	8000988 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8000914:	4603      	mov	r3, r0
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f83a 	bl	80009a2 <_ZNKSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>:
    ++num_free_cells_;
}


template<typename T, size_t NumCells>
uint8_t* MemPool<T,NumCells>::AddrFromIndex( uint32_t i ) const
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
{
    return mem_beg_ + ( i * cell_size_ );
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	fb01 f303 	mul.w	r3, r1, r3
 8000952:	4413      	add	r3, r2
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1EPS2_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f826 	bl	80009be <_ZNSt5tupleIJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffc6 	bl	8000904 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>
 8000978:	4602      	mov	r2, r0
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f820 	bl	80009d8 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8000998:	4603      	mov	r3, r0
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_ZNKSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f81f 	bl	80009f0 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80009b2:	4603      	mov	r3, r0
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_ZNSt5tupleIJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f81e 	bl	8000a0a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1Ev>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f822 	bl	8000a2a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERS6_>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f822 	bl	8000a44 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 f822 	bl	8000a5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7MemPoolI11BlinkingLedLj4EEEEEC1Ev>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f82a 	bl	8000a74 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EEC1Ev>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f82b 	bl	8000a90 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERS4_>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f82a 	bl	8000aa6 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERKS6_>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7MemPoolI11BlinkingLedLj4EEEEEC1Ev>:
      _Tuple_impl()
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f82b 	bl	8000ac0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7MemPoolI11BlinkingLedLj4EEELb1EEC1Ev>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EEC1Ev>:
      constexpr _Head_base()
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f810 	bl	8000ad6 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERKS4_>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7MemPoolI11BlinkingLedLj4EEELb1EEC1Ev>:
      constexpr _Head_base()
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000af8:	bf00      	nop
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <main+0xa0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d004      	beq.n	8000b10 <main+0x24>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	1e5a      	subs	r2, r3, #1
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dcf4      	bgt.n	8000afa <main+0xe>
  if ( timeout < 0 )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da01      	bge.n	8000b1a <main+0x2e>
  {
  Error_Handler();
 8000b16:	f000 fa5f 	bl	8000fd8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 fd8d 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f837 	bl	8000b90 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <main+0xa0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <main+0xa0>)
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <main+0xa0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 fd3b 	bl	80025bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f001 fd51 	bl	80025f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b52:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b54:	bf00      	nop
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <main+0xa0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d104      	bne.n	8000b6c <main+0x80>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dcf4      	bgt.n	8000b56 <main+0x6a>
if ( timeout < 0 )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da01      	bge.n	8000b76 <main+0x8a>
{
Error_Handler();
 8000b72:	f000 fa31 	bl	8000fd8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 f953 	bl	8000e20 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b7a:	f000 f887 	bl	8000c8c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b7e:	f000 f8d1 	bl	8000d24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b82:	f000 f91b 	bl	8000dbc <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 8000b86:	f7ff fdbb 	bl	8000700 <cpp_main>
 8000b8a:	e7fc      	b.n	8000b86 <main+0x9a>
 8000b8c:	58024400 	.word	0x58024400

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	; 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	224c      	movs	r2, #76	; 0x4c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 f9b4 	bl	8006f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 f9ae 	bl	8006f0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f001 fe79 	bl	80028a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <SystemClock_Config+0xf4>)
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <SystemClock_Config+0xf4>)
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <SystemClock_Config+0xf4>)
 8000bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <SystemClock_Config+0xf8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bd8:	4a2b      	ldr	r2, [pc, #172]	; (8000c88 <SystemClock_Config+0xf8>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <SystemClock_Config+0xf8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bec:	bf00      	nop
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <SystemClock_Config+0xf8>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfa:	d1f8      	bne.n	8000bee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000c12:	2312      	movs	r3, #18
 8000c14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c22:	230c      	movs	r3, #12
 8000c24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c26:	2302      	movs	r3, #2
 8000c28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000c2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fea1 	bl	800297c <HAL_RCC_OscConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c40:	f000 f9ca 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c44:	233f      	movs	r3, #63	; 0x3f
 8000c46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c58:	2340      	movs	r3, #64	; 0x40
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fae0 	bl	8003230 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c76:	f000 f9af 	bl	8000fd8 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3770      	adds	r7, #112	; 0x70
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	58000400 	.word	0x58000400
 8000c88:	58024800 	.word	0x58024800

08000c8c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_ETH_Init+0x80>)
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <MX_ETH_Init+0x84>)
 8000c94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_ETH_Init+0x88>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ETH_Init+0x88>)
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_ETH_Init+0x88>)
 8000ca4:	22e1      	movs	r2, #225	; 0xe1
 8000ca6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_ETH_Init+0x88>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ETH_Init+0x88>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_ETH_Init+0x88>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <MX_ETH_Init+0x88>)
 8000cbe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <MX_ETH_Init+0x8c>)
 8000cca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <MX_ETH_Init+0x90>)
 8000cd0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cd4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cd8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cdc:	f000 fe66 	bl	80019ac <HAL_ETH_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ce6:	f000 f977 	bl	8000fd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cea:	2238      	movs	r2, #56	; 0x38
 8000cec:	2100      	movs	r1, #0
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_ETH_Init+0x94>)
 8000cf0:	f006 f90c 	bl	8006f0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_ETH_Init+0x94>)
 8000cf6:	2221      	movs	r2, #33	; 0x21
 8000cf8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_ETH_Init+0x94>)
 8000cfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d00:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_ETH_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24000174 	.word	0x24000174
 8000d10:	40028000 	.word	0x40028000
 8000d14:	240007c4 	.word	0x240007c4
 8000d18:	240000c0 	.word	0x240000c0
 8000d1c:	24000060 	.word	0x24000060
 8000d20:	2400013c 	.word	0x2400013c

08000d24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <MX_USART3_UART_Init+0x94>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d6e:	f004 fc17 	bl	80055a0 <HAL_UART_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d78:	f000 f92e 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d80:	f005 fc19 	bl	80065b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8a:	f000 f925 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d92:	f005 fc4e 	bl	8006632 <HAL_UARTEx_SetRxFifoThreshold>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d9c:	f000 f91c 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000da2:	f005 fbcf 	bl	8006544 <HAL_UARTEx_DisableFifoMode>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dac:	f000 f914 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	24000224 	.word	0x24000224
 8000db8:	40004800 	.word	0x40004800

08000dbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc8:	2209      	movs	r2, #9
 8000dca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e04:	f001 fc08 	bl	8002618 <HAL_PCD_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e0e:	f000 f8e3 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	240002b8 	.word	0x240002b8
 8000e1c:	40080000 	.word	0x40080000

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b62      	ldr	r3, [pc, #392]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a60      	ldr	r2, [pc, #384]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b5e      	ldr	r3, [pc, #376]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e54:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a59      	ldr	r2, [pc, #356]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a51      	ldr	r2, [pc, #324]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a4a      	ldr	r2, [pc, #296]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f0e:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <MX_GPIO_Init+0x1a4>)
 8000f10:	f001 fb20 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	482b      	ldr	r0, [pc, #172]	; (8000fc8 <MX_GPIO_Init+0x1a8>)
 8000f1c:	f001 fb1a 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2102      	movs	r1, #2
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <MX_GPIO_Init+0x1ac>)
 8000f26:	f001 fb15 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4824      	ldr	r0, [pc, #144]	; (8000fd0 <MX_GPIO_Init+0x1b0>)
 8000f40:	f001 f958 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f44:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <MX_GPIO_Init+0x1a4>)
 8000f5e:	f001 f949 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0x1a8>)
 8000f7c:	f001 f93a 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <MX_GPIO_Init+0x1b4>)
 8000f96:	f001 f92d 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_GPIO_Init+0x1ac>)
 8000fb2:	f001 f91f 	bl	80021f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020400 	.word	0x58020400
 8000fc8:	58020c00 	.word	0x58020c00
 8000fcc:	58021000 	.word	0x58021000
 8000fd0:	58020800 	.word	0x58020800
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_MspInit+0x30>)
 8000fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x30>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x30>)
 8000ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a59      	ldr	r2, [pc, #356]	; (800119c <HAL_ETH_MspInit+0x184>)
 8001036:	4293      	cmp	r3, r2
 8001038:	f040 80ab 	bne.w	8001192 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800103c:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800103e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001042:	4a57      	ldr	r2, [pc, #348]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001048:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800104c:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800104e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800105a:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800105c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001060:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001066:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800106a:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800106c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001078:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800107a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800107e:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001088:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800108a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	4a39      	ldr	r2, [pc, #228]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800110e:	2332      	movs	r3, #50	; 0x32
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111e:	230b      	movs	r3, #11
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	481e      	ldr	r0, [pc, #120]	; (80011a4 <HAL_ETH_MspInit+0x18c>)
 800112a:	f001 f863 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800112e:	2386      	movs	r3, #134	; 0x86
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113e:	230b      	movs	r3, #11
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <HAL_ETH_MspInit+0x190>)
 800114a:	f001 f853 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4810      	ldr	r0, [pc, #64]	; (80011ac <HAL_ETH_MspInit+0x194>)
 800116c:	f001 f842 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001170:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001182:	230b      	movs	r3, #11
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <HAL_ETH_MspInit+0x198>)
 800118e:	f001 f831 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3738      	adds	r7, #56	; 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40028000 	.word	0x40028000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020800 	.word	0x58020800
 80011a8:	58020000 	.word	0x58020000
 80011ac:	58020400 	.word	0x58020400
 80011b0:	58021800 	.word	0x58021800

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ba      	sub	sp, #232	; 0xe8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	22c0      	movs	r2, #192	; 0xc0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fe99 	bl	8006f0c <memset>
  if(huart->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_UART_MspInit+0xc8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d146      	bne.n	8001272 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e4:	f04f 0202 	mov.w	r2, #2
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fba4 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001206:	f7ff fee7 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_UART_MspInit+0xcc>)
 8001212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800121c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_UART_MspInit+0xcc>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0xd0>)
 800126e:	f000 ffc1 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	37e8      	adds	r7, #232	; 0xe8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004800 	.word	0x40004800
 8001280:	58024400 	.word	0x58024400
 8001284:	58020c00 	.word	0x58020c00

08001288 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ba      	sub	sp, #232	; 0xe8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	22c0      	movs	r2, #192	; 0xc0
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fe2f 	bl	8006f0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a38      	ldr	r2, [pc, #224]	; (8001394 <HAL_PCD_MspInit+0x10c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d169      	bne.n	800138c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80012c8:	2312      	movs	r3, #18
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80012d0:	2303      	movs	r3, #3
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80012d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80012de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012e2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80012e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fb29 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80012fc:	f7ff fe6c 	bl	8000fd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001300:	f001 fb2c 	bl	800295c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a23      	ldr	r2, [pc, #140]	; (8001398 <HAL_PCD_MspInit+0x110>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001322:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800133c:	230a      	movs	r3, #10
 800133e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <HAL_PCD_MspInit+0x114>)
 800134a:	f000 ff53 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_PCD_MspInit+0x114>)
 800136a:	f000 ff43 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800137a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	37e8      	adds	r7, #232	; 0xe8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40080000 	.word	0x40080000
 8001398:	58024400 	.word	0x58024400
 800139c:	58020000 	.word	0x58020000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f996 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return 1;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_kill>:

int _kill(int pid, int sig)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800140e:	f005 fdd9 	bl	8006fc4 <__errno>
 8001412:	4603      	mov	r3, r0
 8001414:	2216      	movs	r2, #22
 8001416:	601a      	str	r2, [r3, #0]
  return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_exit>:

void _exit (int status)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ffe7 	bl	8001404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001436:	e7fe      	b.n	8001436 <_exit+0x12>

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f005 fdac 	bl	8006fc4 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	24080000 	.word	0x24080000
 8001498:	00000400 	.word	0x00000400
 800149c:	240007cc 	.word	0x240007cc
 80014a0:	24000920 	.word	0x24000920

080014a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014a8:	f7ff f894 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ae:	490d      	ldr	r1, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c4:	4c0a      	ldr	r4, [pc, #40]	; (80014f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d2:	f005 fd7d 	bl	8006fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d6:	f7ff fb09 	bl	8000aec <main>
  bx  lr
 80014da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80014e8:	0800707c 	.word	0x0800707c
  ldr r2, =_sbss
 80014ec:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80014f0:	24000920 	.word	0x24000920

080014f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC3_IRQHandler>

080014f6 <_ZN11BlinkingLed12setFrequencyEf>:
}

void BlinkingLed::setDutyCycle(const uint8_t DutyCycle){
	BlinkingLed::DutyCycle=DutyCycle;
}
void BlinkingLed::setFrequency(const float Frequency){
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	ed87 0a00 	vstr	s0, [r7]
	BlinkingLed::Frequency=Frequency;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	619a      	str	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN11BlinkingLed15processBlinkingEv>:
void BlinkingLed::processBlinking(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if(BlinkingLed::checkExpiration())
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	330c      	adds	r3, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f855 	bl	80015d0 <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d018      	beq.n	800155e <_ZN11BlinkingLed15processBlinkingEv+0x4a>
	  {
		BlinkingLed::initialise(1/Frequency*1000);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f103 020c 	add.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	ed93 7a06 	vldr	s14, [r3, #24]
 8001538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800153c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001540:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001568 <_ZN11BlinkingLed15processBlinkingEv+0x54>
 8001544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154c:	ee17 1a90 	vmov	r1, s15
 8001550:	4610      	mov	r0, r2
 8001552:	f000 f81f 	bl	8001594 <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm>
		BlinkingLed::toggleLED();
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f85c 	bl	8001616 <_ZN5myhal11STM32H7_led9toggleLEDEv>
	  }


}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	447a0000 	.word	0x447a0000

0800156c <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>:

void BlinkingLed::setPinPort( GPIO_TypeDef *Port, uint16_t Pin){
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	80fb      	strh	r3, [r7, #6]
	BlinkingLed::Port=Port;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	605a      	str	r2, [r3, #4]
	BlinkingLed::Pin=Pin;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	811a      	strh	r2, [r3, #8]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm>:
	// TODO Auto-generated destructor stub
}


void  myhal::NoneBlockSystemTickDelay::initialise(const uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	Wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	605a      	str	r2, [r3, #4]
	Tickstart = HAL_GetTick();
 80015a4:	f000 f8ce 	bl	8001744 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]

  /* Add a freq to guarantee minimum wait */
  if (Wait < 1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm+0x30>
  {
	  Wait += (uint32_t)(uwTickFreq);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <_ZN5myhal24NoneBlockSystemTickDelay10initialiseEm+0x38>)
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	441a      	add	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	605a      	str	r2, [r3, #4]
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2400000c 	.word	0x2400000c

080015d0 <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv>:

const bool  myhal::NoneBlockSystemTickDelay::checkExpiration(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
if(Wait != 0)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x3c>
	  if ((HAL_GetTick() - Tickstart) < Wait) return(false); //time is not expired
 80015e0:	f000 f8b0 	bl	8001744 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	bf34      	ite	cc
 80015f4:	2301      	movcc	r3, #1
 80015f6:	2300      	movcs	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x32>
 80015fe:	2300      	movs	r3, #0
 8001600:	e005      	b.n	800160e <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x3e>
	  else
	  {
					  //time is expired
		  Wait = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
		  return(true);
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <_ZN5myhal24NoneBlockSystemTickDelay15checkExpirationEv+0x3e>
	  }
else  return(true); //time is expired or has not been set
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_ZN5myhal11STM32H7_led9toggleLEDEv>:

myhal::STM32H7_led::~STM32H7_led() {
	// TODO Auto-generated destructor stub
}

void myhal::STM32H7_led::toggleLED(void) {
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_TogglePin(Port, Pin);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	891b      	ldrh	r3, [r3, #8]
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f000 ffac 	bl	8002586 <HAL_GPIO_TogglePin>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 f982 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001644:	f001 ffaa 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8001648:	4602      	mov	r2, r0
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_Init+0x68>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	4913      	ldr	r1, [pc, #76]	; (80016a4 <HAL_Init+0x6c>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	fa22 f303 	lsr.w	r3, r2, r3
 8001660:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_Init+0x68>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_Init+0x6c>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_Init+0x70>)
 800167a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_Init+0x74>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f814 	bl	80016b0 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e002      	b.n	8001698 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001692:	f7ff fca7 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	58024400 	.word	0x58024400
 80016a4:	08007034 	.word	0x08007034
 80016a8:	24000004 	.word	0x24000004
 80016ac:	24000000 	.word	0x24000000

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_InitTick+0x60>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e021      	b.n	8001708 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_InitTick+0x64>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_InitTick+0x60>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f959 	bl	8001992 <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f931 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x68>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2400000c 	.word	0x2400000c
 8001714:	24000000 	.word	0x24000000
 8001718:	24000008 	.word	0x24000008

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2400000c 	.word	0x2400000c
 8001740:	240007d0 	.word	0x240007d0

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	240007d0 	.word	0x240007d0

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2400000c 	.word	0x2400000c

080017a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetREVID+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0c1b      	lsrs	r3, r3, #16
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	5c001000 	.word	0x5c001000

080017bc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017cc:	4904      	ldr	r1, [pc, #16]	; (80017e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	58000400 	.word	0x58000400

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <__NVIC_SetPriorityGrouping+0x40>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	4313      	orrs	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x40>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	05fa0000 	.word	0x05fa0000

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff47 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff5e 	bl	800182c <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffb2 	bl	8001904 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0cf      	b.n	8001b5e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d106      	bne.n	80019d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2223      	movs	r2, #35	; 0x23
 80019cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fb21 	bl	8001018 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_ETH_Init+0x1bc>)
 80019d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019dc:	4a62      	ldr	r2, [pc, #392]	; (8001b68 <HAL_ETH_Init+0x1bc>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019e6:	4b60      	ldr	r3, [pc, #384]	; (8001b68 <HAL_ETH_Init+0x1bc>)
 80019e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7a1b      	ldrb	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fedd 	bl	80017bc <HAL_SYSCFG_ETHInterfaceSelect>
 8001a02:	e003      	b.n	8001a0c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a08:	f7ff fed8 	bl	80017bc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a0c:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <HAL_ETH_Init+0x1c0>)
 8001a0e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff fe8c 	bl	8001744 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a2e:	e011      	b.n	8001a54 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a30:	f7ff fe88 	bl	8001744 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a3e:	d909      	bls.n	8001a54 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2204      	movs	r2, #4
 8001a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	22e0      	movs	r2, #224	; 0xe0
 8001a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e084      	b.n	8001b5e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1e4      	bne.n	8001a30 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f886 	bl	8001b78 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a6c:	f001 ff10 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a3f      	ldr	r2, [pc, #252]	; (8001b70 <HAL_ETH_Init+0x1c4>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9a      	lsrs	r2, r3, #18
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fa71 	bl	8001f6c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a96:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aa6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	22e0      	movs	r2, #224	; 0xe0
 8001ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e049      	b.n	8001b5e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_ETH_Init+0x1c8>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6952      	ldr	r2, [r2, #20]
 8001ade:	0051      	lsls	r1, r2, #1
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fad9 	bl	80020a6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fb1f 	bl	8002138 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	3305      	adds	r3, #5
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	021a      	lsls	r2, r3, #8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	061a      	lsls	r2, r3, #24
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	3302      	adds	r3, #2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	041b      	lsls	r3, r3, #16
 8001b2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	3301      	adds	r3, #1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b46:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b48:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2210      	movs	r2, #16
 8001b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	58000400 	.word	0x58000400
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	ffff8001 	.word	0xffff8001

08001b78 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b92:	f001 fe7d 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 8001b96:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d908      	bls.n	8001bb2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d804      	bhi.n	8001bb2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e027      	b.n	8001c02 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d908      	bls.n	8001bcc <HAL_ETH_SetMDIOClockRange+0x54>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d204      	bcs.n	8001bcc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e01a      	b.n	8001c02 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d303      	bcc.n	8001bdc <HAL_ETH_SetMDIOClockRange+0x64>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d911      	bls.n	8001c00 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d908      	bls.n	8001bf6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d804      	bhi.n	8001bf6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e005      	b.n	8001c02 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e000      	b.n	8001c02 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c00:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	01312cff 	.word	0x01312cff
 8001c18:	02160ebf 	.word	0x02160ebf
 8001c1c:	03938700 	.word	0x03938700
 8001c20:	05f5e0ff 	.word	0x05f5e0ff
 8001c24:	08f0d17f 	.word	0x08f0d17f

08001c28 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001c3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001c42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	7b1b      	ldrb	r3, [r3, #12]
 8001c48:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	7b5b      	ldrb	r3, [r3, #13]
 8001c50:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	7b9b      	ldrb	r3, [r3, #14]
 8001c58:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	7bdb      	ldrb	r3, [r3, #15]
 8001c60:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	7c12      	ldrb	r2, [r2, #16]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d102      	bne.n	8001c72 <ETH_SetMACConfig+0x4a>
 8001c6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c70:	e000      	b.n	8001c74 <ETH_SetMACConfig+0x4c>
 8001c72:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	7c52      	ldrb	r2, [r2, #17]
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d102      	bne.n	8001c84 <ETH_SetMACConfig+0x5c>
 8001c7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c82:	e000      	b.n	8001c86 <ETH_SetMACConfig+0x5e>
 8001c84:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	7c9b      	ldrb	r3, [r3, #18]
 8001c8c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c8e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c94:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001c9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	7f1b      	ldrb	r3, [r3, #28]
 8001ca0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	7f5b      	ldrb	r3, [r3, #29]
 8001ca8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001caa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	7f92      	ldrb	r2, [r2, #30]
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	d102      	bne.n	8001cba <ETH_SetMACConfig+0x92>
 8001cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb8:	e000      	b.n	8001cbc <ETH_SetMACConfig+0x94>
 8001cba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	7fdb      	ldrb	r3, [r3, #31]
 8001cc2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	d102      	bne.n	8001cd6 <ETH_SetMACConfig+0xae>
 8001cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd4:	e000      	b.n	8001cd8 <ETH_SetMACConfig+0xb0>
 8001cd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cd8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ce6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001ce8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <ETH_SetMACConfig+0x22c>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	430b      	orrs	r3, r1
 8001d04:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d12:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d14:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d1c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d26:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d30:	2a00      	cmp	r2, #0
 8001d32:	d102      	bne.n	8001d3a <ETH_SetMACConfig+0x112>
 8001d34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d38:	e000      	b.n	8001d3c <ETH_SetMACConfig+0x114>
 8001d3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d3c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <ETH_SetMACConfig+0x230>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d60:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <ETH_SetMACConfig+0x234>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d84:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	d101      	bne.n	8001d9a <ETH_SetMACConfig+0x172>
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	e000      	b.n	8001d9c <ETH_SetMACConfig+0x174>
 8001d9a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d9c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001dc4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001dcc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f023 0103 	bic.w	r1, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001df2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d101      	bne.n	8001e16 <ETH_SetMACConfig+0x1ee>
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	e000      	b.n	8001e18 <ETH_SetMACConfig+0x1f0>
 8001e16:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e18:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e20:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e2a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e38:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	00048083 	.word	0x00048083
 8001e58:	c0f88000 	.word	0xc0f88000
 8001e5c:	fffffef0 	.word	0xfffffef0

08001e60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <ETH_SetDMAConfig+0xf8>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6811      	ldr	r1, [r2, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e86:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e92:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	7b1b      	ldrb	r3, [r3, #12]
 8001e98:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <ETH_SetDMAConfig+0xfc>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eb8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7b5b      	ldrb	r3, [r3, #13]
 8001ebe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <ETH_SetDMAConfig+0x100>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68f9      	ldr	r1, [r7, #12]
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ee4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	7d1b      	ldrb	r3, [r3, #20]
 8001ef0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ef2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7f5b      	ldrb	r3, [r3, #29]
 8001ef8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <ETH_SetDMAConfig+0x104>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	7f1b      	ldrb	r3, [r3, #28]
 8001f22:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <ETH_SetDMAConfig+0x108>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	68f9      	ldr	r1, [r7, #12]
 8001f42:	430b      	orrs	r3, r1
 8001f44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f48:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	ffff87fd 	.word	0xffff87fd
 8001f5c:	ffff2ffe 	.word	0xffff2ffe
 8001f60:	fffec000 	.word	0xfffec000
 8001f64:	ffc0efef 	.word	0xffc0efef
 8001f68:	7fc0ffff 	.word	0x7fc0ffff

08001f6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0a4      	sub	sp, #144	; 0x90
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001fc4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001fc8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002004:	2320      	movs	r3, #32
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002016:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800201c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002020:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002046:	2300      	movs	r3, #0
 8002048:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fde6 	bl	8001c28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800205c:	2301      	movs	r3, #1
 800205e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002060:	2301      	movs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002076:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800207a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002080:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002084:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800208c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fee1 	bl	8001e60 <ETH_SetDMAConfig>
}
 800209e:	bf00      	nop
 80020a0:	3790      	adds	r7, #144	; 0x90
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e01d      	b.n	80020f0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68d9      	ldr	r1, [r3, #12]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	3206      	adds	r2, #6
 80020e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d9de      	bls.n	80020b4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002104:	461a      	mov	r2, r3
 8002106:	2303      	movs	r3, #3
 8002108:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002118:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002128:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e023      	b.n	800218e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	3212      	adds	r2, #18
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d9d8      	bls.n	8002146 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	461a      	mov	r2, r3
 80021bc:	2303      	movs	r3, #3
 80021be:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_GPIO_Init+0x234>)
 8002204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002206:	e194      	b.n	8002532 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8186 	beq.w	800252c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d005      	beq.n	8002238 <HAL_GPIO_Init+0x44>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d130      	bne.n	800229a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226e:	2201      	movs	r2, #1
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 0201 	and.w	r2, r3, #1
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d017      	beq.n	80022d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d123      	bne.n	800232a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	69b9      	ldr	r1, [r7, #24]
 8002326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0203 	and.w	r2, r3, #3
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80e0 	beq.w	800252c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_GPIO_Init+0x238>)
 800236e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002372:	4a2e      	ldr	r2, [pc, #184]	; (800242c <HAL_GPIO_Init+0x238>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_GPIO_Init+0x238>)
 800237e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238a:	4a29      	ldr	r2, [pc, #164]	; (8002430 <HAL_GPIO_Init+0x23c>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <HAL_GPIO_Init+0x240>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d052      	beq.n	800245c <HAL_GPIO_Init+0x268>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_GPIO_Init+0x244>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d031      	beq.n	8002422 <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_GPIO_Init+0x248>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_GPIO_Init+0x24c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_GPIO_Init+0x250>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <HAL_GPIO_Init+0x254>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	; (800244c <HAL_GPIO_Init+0x258>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_GPIO_Init+0x25c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a18      	ldr	r2, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x260>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a17      	ldr	r2, [pc, #92]	; (8002458 <HAL_GPIO_Init+0x264>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20e>
 80023fe:	2309      	movs	r3, #9
 8002400:	e02d      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002402:	230a      	movs	r3, #10
 8002404:	e02b      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002406:	2308      	movs	r3, #8
 8002408:	e029      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800240a:	2307      	movs	r3, #7
 800240c:	e027      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800240e:	2306      	movs	r3, #6
 8002410:	e025      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002412:	2305      	movs	r3, #5
 8002414:	e023      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002416:	2304      	movs	r3, #4
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800241a:	2303      	movs	r3, #3
 800241c:	e01f      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800241e:	2302      	movs	r3, #2
 8002420:	e01d      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002422:	2301      	movs	r3, #1
 8002424:	e01b      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002426:	bf00      	nop
 8002428:	58000080 	.word	0x58000080
 800242c:	58024400 	.word	0x58024400
 8002430:	58000400 	.word	0x58000400
 8002434:	58020000 	.word	0x58020000
 8002438:	58020400 	.word	0x58020400
 800243c:	58020800 	.word	0x58020800
 8002440:	58020c00 	.word	0x58020c00
 8002444:	58021000 	.word	0x58021000
 8002448:	58021400 	.word	0x58021400
 800244c:	58021800 	.word	0x58021800
 8002450:	58021c00 	.word	0x58021c00
 8002454:	58022000 	.word	0x58022000
 8002458:	58022400 	.word	0x58022400
 800245c:	2300      	movs	r3, #0
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246e:	4938      	ldr	r1, [pc, #224]	; (8002550 <HAL_GPIO_Init+0x35c>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3301      	adds	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae63 	bne.w	8002208 <HAL_GPIO_Init+0x14>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3724      	adds	r7, #36	; 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	58000400 	.word	0x58000400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002598:	887a      	ldrh	r2, [r7, #2]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	041a      	lsls	r2, r3, #16
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	400b      	ands	r3, r1
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_HSEM_FastTake+0x2c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3320      	adds	r3, #32
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_HSEM_FastTake+0x30>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	58026400 	.word	0x58026400
 80025ec:	80000300 	.word	0x80000300

080025f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80025fa:	4906      	ldr	r1, [pc, #24]	; (8002614 <HAL_HSEM_Release+0x24>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	58026400 	.word	0x58026400

08002618 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b08f      	sub	sp, #60	; 0x3c
 800261c:	af0a      	add	r7, sp, #40	; 0x28
 800261e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e116      	b.n	8002858 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7fe fe1f 	bl	8001288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f004 f8dd 	bl	8006828 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	687e      	ldr	r6, [r7, #4]
 8002676:	466d      	mov	r5, sp
 8002678:	f106 0410 	add.w	r4, r6, #16
 800267c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002688:	e885 0003 	stmia.w	r5, {r0, r1}
 800268c:	1d33      	adds	r3, r6, #4
 800268e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	f004 f85b 	bl	800674c <USB_CoreInit>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0d7      	b.n	8002858 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f004 f8cb 	bl	800684a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e04a      	b.n	8002750 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	333d      	adds	r3, #61	; 0x3d
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	333c      	adds	r3, #60	; 0x3c
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	b298      	uxth	r0, r3
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3356      	adds	r3, #86	; 0x56
 80026f6:	4602      	mov	r2, r0
 80026f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3340      	adds	r3, #64	; 0x40
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3344      	adds	r3, #68	; 0x44
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3348      	adds	r3, #72	; 0x48
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	334c      	adds	r3, #76	; 0x4c
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3af      	bcc.n	80026ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e044      	b.n	80027ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	3301      	adds	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3b5      	bcc.n	8002760 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	687e      	ldr	r6, [r7, #4]
 80027fc:	466d      	mov	r5, sp
 80027fe:	f106 0410 	add.w	r4, r6, #16
 8002802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800280e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002812:	1d33      	adds	r3, r6, #4
 8002814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f004 f864 	bl	80068e4 <USB_DevInit>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e014      	b.n	8002858 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f80a 	bl	8002860 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fa22 	bl	8006c9a <USB_DevDisconnect>

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002860 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002890:	4313      	orrs	r3, r2
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	10000003 	.word	0x10000003

080028a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <HAL_PWREx_ConfigSupply+0xb0>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d00a      	beq.n	80028d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_PWREx_ConfigSupply+0xb0>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e040      	b.n	8002950 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e03e      	b.n	8002950 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_PWREx_ConfigSupply+0xb0>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028da:	491f      	ldr	r1, [pc, #124]	; (8002958 <HAL_PWREx_ConfigSupply+0xb0>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028e2:	f7fe ff2f 	bl	8001744 <HAL_GetTick>
 80028e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028e8:	e009      	b.n	80028fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028ea:	f7fe ff2b 	bl	8001744 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f8:	d901      	bls.n	80028fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e028      	b.n	8002950 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <HAL_PWREx_ConfigSupply+0xb0>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290a:	d1ee      	bne.n	80028ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b1e      	cmp	r3, #30
 8002910:	d008      	beq.n	8002924 <HAL_PWREx_ConfigSupply+0x7c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b2e      	cmp	r3, #46	; 0x2e
 8002916:	d005      	beq.n	8002924 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b1d      	cmp	r3, #29
 800291c:	d002      	beq.n	8002924 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b2d      	cmp	r3, #45	; 0x2d
 8002922:	d114      	bne.n	800294e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002924:	f7fe ff0e 	bl	8001744 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800292a:	e009      	b.n	8002940 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800292c:	f7fe ff0a 	bl	8001744 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293a:	d901      	bls.n	8002940 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e007      	b.n	8002950 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_PWREx_ConfigSupply+0xb0>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d1ee      	bne.n	800292c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024800 	.word	0x58024800

0800295c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	58024800 	.word	0x58024800

0800297c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f000 bc48 	b.w	8003220 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8088 	beq.w	8002aae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4b99      	ldr	r3, [pc, #612]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029a8:	4b96      	ldr	r3, [pc, #600]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d007      	beq.n	80029c4 <HAL_RCC_OscConfig+0x48>
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b18      	cmp	r3, #24
 80029b8:	d111      	bne.n	80029de <HAL_RCC_OscConfig+0x62>
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d06d      	beq.n	8002aac <HAL_RCC_OscConfig+0x130>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d169      	bne.n	8002aac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f000 bc21 	b.w	8003220 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x7a>
 80029e8:	4b86      	ldr	r3, [pc, #536]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a85      	ldr	r2, [pc, #532]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e02e      	b.n	8002a54 <HAL_RCC_OscConfig+0xd8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x9c>
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b7e      	ldr	r3, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xd8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0xc0>
 8002a22:	4b78      	ldr	r3, [pc, #480]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a77      	ldr	r2, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a74      	ldr	r2, [pc, #464]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xd8>
 8002a3c:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a70      	ldr	r2, [pc, #448]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b6e      	ldr	r3, [pc, #440]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6d      	ldr	r2, [pc, #436]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fe72 	bl	8001744 <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fe6e 	bl	8001744 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e3d4      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a76:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xe8>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fe5e 	bl	8001744 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fe5a 	bl	8001744 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e3c0      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a9e:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x110>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80ca 	beq.w	8002c50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abc:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x166>
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	2b18      	cmp	r3, #24
 8002ad6:	d156      	bne.n	8002b86 <HAL_RCC_OscConfig+0x20a>
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d151      	bne.n	8002b86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae2:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x17e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e392      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0219 	bic.w	r2, r3, #25
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	493f      	ldr	r1, [pc, #252]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fe1a 	bl	8001744 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b14:	f7fe fe16 	bl	8001744 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e37c      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	f7fe fe37 	bl	80017a4 <HAL_GetREVID>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d817      	bhi.n	8002b70 <HAL_RCC_OscConfig+0x1f4>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d108      	bne.n	8002b5a <HAL_RCC_OscConfig+0x1de>
 8002b48:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b50:	4a2c      	ldr	r2, [pc, #176]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b58:	e07a      	b.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	031b      	lsls	r3, r3, #12
 8002b68:	4926      	ldr	r1, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b6e:	e06f      	b.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	4921      	ldr	r1, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b84:	e064      	b.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d047      	beq.n	8002c1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0219 	bic.w	r2, r3, #25
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	491a      	ldr	r1, [pc, #104]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fdd0 	bl	8001744 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fdcc 	bl	8001744 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e332      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	f7fe fded 	bl	80017a4 <HAL_GetREVID>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d819      	bhi.n	8002c08 <HAL_RCC_OscConfig+0x28c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d108      	bne.n	8002bee <HAL_RCC_OscConfig+0x272>
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bea:	6053      	str	r3, [r2, #4]
 8002bec:	e030      	b.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	031b      	lsls	r3, r3, #12
 8002bfc:	4901      	ldr	r1, [pc, #4]	; (8002c04 <HAL_RCC_OscConfig+0x288>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
 8002c02:	e025      	b.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
 8002c04:	58024400 	.word	0x58024400
 8002c08:	4b9a      	ldr	r3, [pc, #616]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4997      	ldr	r1, [pc, #604]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b95      	ldr	r3, [pc, #596]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a94      	ldr	r2, [pc, #592]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fd8b 	bl	8001744 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe fd87 	bl	8001744 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e2ed      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c44:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a9 	beq.w	8002db0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c68:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d007      	beq.n	8002c84 <HAL_RCC_OscConfig+0x308>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b18      	cmp	r3, #24
 8002c78:	d13a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x374>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d135      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c84:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x320>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e2c1      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c9c:	f7fe fd82 	bl	80017a4 <HAL_GetREVID>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d817      	bhi.n	8002cda <HAL_RCC_OscConfig+0x35e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d108      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x348>
 8002cb2:	4b70      	ldr	r3, [pc, #448]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cba:	4a6e      	ldr	r2, [pc, #440]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cc2:	e075      	b.n	8002db0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cc4:	4b6b      	ldr	r3, [pc, #428]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	069b      	lsls	r3, r3, #26
 8002cd2:	4968      	ldr	r1, [pc, #416]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cd8:	e06a      	b.n	8002db0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cda:	4b66      	ldr	r3, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	4962      	ldr	r1, [pc, #392]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cee:	e05f      	b.n	8002db0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d042      	beq.n	8002d7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fd1e 	bl	8001744 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fd1a 	bl	8001744 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e280      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d2a:	f7fe fd3b 	bl	80017a4 <HAL_GetREVID>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d817      	bhi.n	8002d68 <HAL_RCC_OscConfig+0x3ec>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d108      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3d6>
 8002d40:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d48:	4a4a      	ldr	r2, [pc, #296]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d4e:	6053      	str	r3, [r2, #4]
 8002d50:	e02e      	b.n	8002db0 <HAL_RCC_OscConfig+0x434>
 8002d52:	4b48      	ldr	r3, [pc, #288]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	069b      	lsls	r3, r3, #26
 8002d60:	4944      	ldr	r1, [pc, #272]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
 8002d66:	e023      	b.n	8002db0 <HAL_RCC_OscConfig+0x434>
 8002d68:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	493f      	ldr	r1, [pc, #252]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
 8002d7c:	e018      	b.n	8002db0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a3c      	ldr	r2, [pc, #240]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fcdb 	bl	8001744 <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d92:	f7fe fcd7 	bl	8001744 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e23d      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d036      	beq.n	8002e2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d019      	beq.n	8002df8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc8:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fcb8 	bl	8001744 <HAL_GetTick>
 8002dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fcb4 	bl	8001744 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e21a      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dea:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x45c>
 8002df6:	e018      	b.n	8002e2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df8:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe fc9e 	bl	8001744 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fe fc9a 	bl	8001744 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e200      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d039      	beq.n	8002eaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fc7b 	bl	8001744 <HAL_GetTick>
 8002e4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e52:	f7fe fc77 	bl	8001744 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1dd      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4d6>
 8002e70:	e01b      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e78:	4b9b      	ldr	r3, [pc, #620]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a9a      	ldr	r2, [pc, #616]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fc5e 	bl	8001744 <HAL_GetTick>
 8002e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8c:	f7fe fc5a 	bl	8001744 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1c0      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e9e:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8081 	beq.w	8002fba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002eb8:	4b8c      	ldr	r3, [pc, #560]	; (80030ec <HAL_RCC_OscConfig+0x770>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a8b      	ldr	r2, [pc, #556]	; (80030ec <HAL_RCC_OscConfig+0x770>)
 8002ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe fc3e 	bl	8001744 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fe fc3a 	bl	8001744 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1a0      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ede:	4b83      	ldr	r3, [pc, #524]	; (80030ec <HAL_RCC_OscConfig+0x770>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <HAL_RCC_OscConfig+0x584>
 8002ef2:	4b7d      	ldr	r3, [pc, #500]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a7c      	ldr	r2, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	e02d      	b.n	8002f5c <HAL_RCC_OscConfig+0x5e0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5a6>
 8002f08:	4b77      	ldr	r3, [pc, #476]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a76      	ldr	r2, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	4b74      	ldr	r3, [pc, #464]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a73      	ldr	r2, [pc, #460]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f20:	e01c      	b.n	8002f5c <HAL_RCC_OscConfig+0x5e0>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5c8>
 8002f2a:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a6e      	ldr	r2, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	4b6c      	ldr	r3, [pc, #432]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a6b      	ldr	r2, [pc, #428]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0x5e0>
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a67      	ldr	r2, [pc, #412]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a64      	ldr	r2, [pc, #400]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d015      	beq.n	8002f90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fbee 	bl	8001744 <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fbea 	bl	8001744 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e14e      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f82:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ee      	beq.n	8002f6c <HAL_RCC_OscConfig+0x5f0>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fbd8 	bl	8001744 <HAL_GetTick>
 8002f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fbd4 	bl	8001744 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e138      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fae:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ee      	bne.n	8002f98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 812d 	beq.w	800321e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fc4:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fcc:	2b18      	cmp	r3, #24
 8002fce:	f000 80bd 	beq.w	800314c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	f040 809e 	bne.w	8003118 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a41      	ldr	r2, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8002fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fbac 	bl	8001744 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fba8 	bl	8001744 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e10e      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8003010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x774>)
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	430a      	orrs	r2, r1
 8003022:	4931      	ldr	r1, [pc, #196]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8003024:	4313      	orrs	r3, r2
 8003026:	628b      	str	r3, [r1, #40]	; 0x28
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	3b01      	subs	r3, #1
 800302e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	3b01      	subs	r3, #1
 8003038:	025b      	lsls	r3, r3, #9
 800303a:	b29b      	uxth	r3, r3
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	3b01      	subs	r3, #1
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	3b01      	subs	r3, #1
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003058:	4923      	ldr	r1, [pc, #140]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800306a:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 800306c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306e:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCC_OscConfig+0x778>)
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003076:	00d2      	lsls	r2, r2, #3
 8003078:	491b      	ldr	r1, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f023 020c 	bic.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4917      	ldr	r1, [pc, #92]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	f023 0202 	bic.w	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	4912      	ldr	r1, [pc, #72]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_RCC_OscConfig+0x76c>)
 80030d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe fb31 	bl	8001744 <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030e4:	e011      	b.n	800310a <HAL_RCC_OscConfig+0x78e>
 80030e6:	bf00      	nop
 80030e8:	58024400 	.word	0x58024400
 80030ec:	58024800 	.word	0x58024800
 80030f0:	fffffc0c 	.word	0xfffffc0c
 80030f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe fb24 	bl	8001744 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e08a      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x77c>
 8003116:	e082      	b.n	800321e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a42      	ldr	r2, [pc, #264]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 800311e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fb0e 	bl	8001744 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe fb0a 	bl	8001744 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e070      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800313e:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x7b0>
 800314a:	e068      	b.n	800321e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003152:	4b35      	ldr	r3, [pc, #212]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b01      	cmp	r3, #1
 800315e:	d031      	beq.n	80031c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0203 	and.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d12a      	bne.n	80031c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d122      	bne.n	80031c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d11a      	bne.n	80031c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	0a5b      	lsrs	r3, r3, #9
 8003192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d111      	bne.n	80031c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d108      	bne.n	80031c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	0e1b      	lsrs	r3, r3, #24
 80031b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e02b      	b.n	8003220 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	08db      	lsrs	r3, r3, #3
 80031ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d01f      	beq.n	800321e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ea:	f7fe faab 	bl	8001744 <HAL_GetTick>
 80031ee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031f0:	bf00      	nop
 80031f2:	f7fe faa7 	bl	8001744 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d0f9      	beq.n	80031f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 8003200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCC_OscConfig+0x8b0>)
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800320a:	00d2      	lsls	r2, r2, #3
 800320c:	4906      	ldr	r1, [pc, #24]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 800320e:	4313      	orrs	r3, r2
 8003210:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_RCC_OscConfig+0x8ac>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3730      	adds	r7, #48	; 0x30
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	58024400 	.word	0x58024400
 800322c:	ffff0007 	.word	0xffff0007

08003230 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e19c      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d910      	bls.n	8003274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b87      	ldr	r3, [pc, #540]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 020f 	bic.w	r2, r3, #15
 800325a:	4985      	ldr	r1, [pc, #532]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b83      	ldr	r3, [pc, #524]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e184      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800328c:	429a      	cmp	r2, r3
 800328e:	d908      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003290:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4975      	ldr	r1, [pc, #468]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d908      	bls.n	80032d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	496a      	ldr	r1, [pc, #424]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	4b64      	ldr	r3, [pc, #400]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d908      	bls.n	80032fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032ec:	4b61      	ldr	r3, [pc, #388]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	495e      	ldr	r1, [pc, #376]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003316:	429a      	cmp	r2, r3
 8003318:	d908      	bls.n	800332c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800331a:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4953      	ldr	r1, [pc, #332]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003328:	4313      	orrs	r3, r2
 800332a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	4b4d      	ldr	r3, [pc, #308]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	429a      	cmp	r2, r3
 8003346:	d908      	bls.n	800335a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f023 020f 	bic.w	r2, r3, #15
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4947      	ldr	r1, [pc, #284]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003356:	4313      	orrs	r3, r2
 8003358:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d055      	beq.n	8003412 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003366:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	4940      	ldr	r1, [pc, #256]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003374:	4313      	orrs	r3, r2
 8003376:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d107      	bne.n	8003390 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003380:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d121      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0f6      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d115      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0ea      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033b0:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0de      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c0:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d6      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f023 0207 	bic.w	r2, r3, #7
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4925      	ldr	r1, [pc, #148]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e2:	f7fe f9af 	bl	8001744 <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ea:	f7fe f9ab 	bl	8001744 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0be      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003400:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	429a      	cmp	r2, r3
 8003410:	d1eb      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	429a      	cmp	r2, r3
 800342c:	d208      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f023 020f 	bic.w	r2, r3, #15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	490e      	ldr	r1, [pc, #56]	; (8003474 <HAL_RCC_ClockConfig+0x244>)
 800343c:	4313      	orrs	r3, r2
 800343e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d214      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 020f 	bic.w	r2, r3, #15
 8003456:	4906      	ldr	r1, [pc, #24]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCC_ClockConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e086      	b.n	800357e <HAL_RCC_ClockConfig+0x34e>
 8003470:	52002000 	.word	0x52002000
 8003474:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003490:	429a      	cmp	r2, r3
 8003492:	d208      	bcs.n	80034a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003494:	4b3c      	ldr	r3, [pc, #240]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	4939      	ldr	r1, [pc, #228]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034be:	429a      	cmp	r2, r3
 80034c0:	d208      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034c2:	4b31      	ldr	r3, [pc, #196]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	492e      	ldr	r1, [pc, #184]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	4b28      	ldr	r3, [pc, #160]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d208      	bcs.n	8003502 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800351a:	429a      	cmp	r2, r3
 800351c:	d208      	bcs.n	8003530 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4917      	ldr	r1, [pc, #92]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 800352c:	4313      	orrs	r3, r2
 800352e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003530:	f000 f834 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	4912      	ldr	r1, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x35c>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
 800354c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x358>)
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	4a0d      	ldr	r2, [pc, #52]	; (800358c <HAL_RCC_ClockConfig+0x35c>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x360>)
 8003566:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <HAL_RCC_ClockConfig+0x364>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x368>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe f89c 	bl	80016b0 <HAL_InitTick>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	58024400 	.word	0x58024400
 800358c:	08007034 	.word	0x08007034
 8003590:	24000004 	.word	0x24000004
 8003594:	24000000 	.word	0x24000000
 8003598:	24000008 	.word	0x24000008

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a2:	4bb3      	ldr	r3, [pc, #716]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035aa:	2b18      	cmp	r3, #24
 80035ac:	f200 8155 	bhi.w	800385a <HAL_RCC_GetSysClockFreq+0x2be>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	0800361d 	.word	0x0800361d
 80035bc:	0800385b 	.word	0x0800385b
 80035c0:	0800385b 	.word	0x0800385b
 80035c4:	0800385b 	.word	0x0800385b
 80035c8:	0800385b 	.word	0x0800385b
 80035cc:	0800385b 	.word	0x0800385b
 80035d0:	0800385b 	.word	0x0800385b
 80035d4:	0800385b 	.word	0x0800385b
 80035d8:	08003643 	.word	0x08003643
 80035dc:	0800385b 	.word	0x0800385b
 80035e0:	0800385b 	.word	0x0800385b
 80035e4:	0800385b 	.word	0x0800385b
 80035e8:	0800385b 	.word	0x0800385b
 80035ec:	0800385b 	.word	0x0800385b
 80035f0:	0800385b 	.word	0x0800385b
 80035f4:	0800385b 	.word	0x0800385b
 80035f8:	08003649 	.word	0x08003649
 80035fc:	0800385b 	.word	0x0800385b
 8003600:	0800385b 	.word	0x0800385b
 8003604:	0800385b 	.word	0x0800385b
 8003608:	0800385b 	.word	0x0800385b
 800360c:	0800385b 	.word	0x0800385b
 8003610:	0800385b 	.word	0x0800385b
 8003614:	0800385b 	.word	0x0800385b
 8003618:	0800364f 	.word	0x0800364f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800361c:	4b94      	ldr	r3, [pc, #592]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003628:	4b91      	ldr	r3, [pc, #580]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	4a90      	ldr	r2, [pc, #576]	; (8003874 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800363a:	e111      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800363c:	4b8d      	ldr	r3, [pc, #564]	; (8003874 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800363e:	61bb      	str	r3, [r7, #24]
      break;
 8003640:	e10e      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003642:	4b8d      	ldr	r3, [pc, #564]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003644:	61bb      	str	r3, [r7, #24]
      break;
 8003646:	e10b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003648:	4b8c      	ldr	r3, [pc, #560]	; (800387c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800364a:	61bb      	str	r3, [r7, #24]
      break;
 800364c:	e108      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800364e:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003658:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003662:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003664:	4b82      	ldr	r3, [pc, #520]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800366e:	4b80      	ldr	r3, [pc, #512]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003686:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80e1 	beq.w	8003854 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b02      	cmp	r3, #2
 8003696:	f000 8083 	beq.w	80037a0 <HAL_RCC_GetSysClockFreq+0x204>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b02      	cmp	r3, #2
 800369e:	f200 80a1 	bhi.w	80037e4 <HAL_RCC_GetSysClockFreq+0x248>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x114>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d056      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x1c0>
 80036ae:	e099      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b0:	4b6f      	ldr	r3, [pc, #444]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02d      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036bc:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	4a6b      	ldr	r2, [pc, #428]	; (8003874 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e6:	4b62      	ldr	r3, [pc, #392]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003880 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003716:	e087      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003884 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372a:	4b51      	ldr	r3, [pc, #324]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	ed97 6a02 	vldr	s12, [r7, #8]
 800373e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003880 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800375a:	e065      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2ec>
 800376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376e:	4b40      	ldr	r3, [pc, #256]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003782:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003880 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800379e:	e043      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800388c <HAL_RCC_GetSysClockFreq+0x2f0>
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b2f      	ldr	r3, [pc, #188]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003880 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037e2:	e021      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003806:	ed97 6a02 	vldr	s12, [r7, #8]
 800380a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003880 <HAL_RCC_GetSysClockFreq+0x2e4>
 800380e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003826:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	0a5b      	lsrs	r3, r3, #9
 800382e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003832:	3301      	adds	r3, #1
 8003834:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003840:	edd7 6a07 	vldr	s13, [r7, #28]
 8003844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800384c:	ee17 3a90 	vmov	r3, s15
 8003850:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003852:	e005      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
      break;
 8003858:	e002      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800385c:	61bb      	str	r3, [r7, #24]
      break;
 800385e:	bf00      	nop
  }

  return sysclockfreq;
 8003860:	69bb      	ldr	r3, [r7, #24]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	58024400 	.word	0x58024400
 8003874:	03d09000 	.word	0x03d09000
 8003878:	003d0900 	.word	0x003d0900
 800387c:	007a1200 	.word	0x007a1200
 8003880:	46000000 	.word	0x46000000
 8003884:	4c742400 	.word	0x4c742400
 8003888:	4a742400 	.word	0x4a742400
 800388c:	4af42400 	.word	0x4af42400

08003890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003896:	f7ff fe81 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	490f      	ldr	r1, [pc, #60]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80038cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ce:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	58024400 	.word	0x58024400
 80038e4:	08007034 	.word	0x08007034
 80038e8:	24000004 	.word	0x24000004
 80038ec:	24000000 	.word	0x24000000

080038f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038f4:	f7ff ffcc 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	58024400 	.word	0x58024400
 8003918:	08007034 	.word	0x08007034

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003920:	f7ff ffb6 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58024400 	.word	0x58024400
 8003944:	08007034 	.word	0x08007034

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b0ca      	sub	sp, #296	; 0x128
 800394e:	af00      	add	r7, sp, #0
 8003950:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003954:	2300      	movs	r3, #0
 8003956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800395a:	2300      	movs	r3, #0
 800395c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800396c:	2500      	movs	r5, #0
 800396e:	ea54 0305 	orrs.w	r3, r4, r5
 8003972:	d049      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800397e:	d02f      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003984:	d828      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800398a:	d01a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800398c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003990:	d822      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d007      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800399c:	e01c      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399e:	4bb8      	ldr	r3, [pc, #736]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4ab7      	ldr	r2, [pc, #732]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039aa:	e01a      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b0:	3308      	adds	r3, #8
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fc8f 	bl	80052d8 <RCCEx_PLL2_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c0:	e00f      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c6:	3328      	adds	r3, #40	; 0x28
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fd36 	bl	800543c <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039d6:	e004      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039ea:	4ba5      	ldr	r3, [pc, #660]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f8:	4aa1      	ldr	r2, [pc, #644]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6513      	str	r3, [r2, #80]	; 0x50
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a14:	f04f 0900 	mov.w	r9, #0
 8003a18:	ea58 0309 	orrs.w	r3, r8, r9
 8003a1c:	d047      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d82a      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a45 	.word	0x08003a45
 8003a34:	08003a53 	.word	0x08003a53
 8003a38:	08003a69 	.word	0x08003a69
 8003a3c:	08003a87 	.word	0x08003a87
 8003a40:	08003a87 	.word	0x08003a87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b8e      	ldr	r3, [pc, #568]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a8d      	ldr	r2, [pc, #564]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a50:	e01a      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	3308      	adds	r3, #8
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 fc3c 	bl	80052d8 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a66:	e00f      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6c:	3328      	adds	r3, #40	; 0x28
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 fce3 	bl	800543c <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e004      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a90:	4b7b      	ldr	r3, [pc, #492]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	f023 0107 	bic.w	r1, r3, #7
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	4a78      	ldr	r2, [pc, #480]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6513      	str	r3, [r2, #80]	; 0x50
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003aba:	f04f 0b00 	mov.w	fp, #0
 8003abe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ac2:	d04c      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d030      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	d829      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad8:	d02d      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ada:	2bc0      	cmp	r3, #192	; 0xc0
 8003adc:	d825      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ade:	2b80      	cmp	r3, #128	; 0x80
 8003ae0:	d018      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d821      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d007      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003aee:	e01c      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af0:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a62      	ldr	r2, [pc, #392]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003afc:	e01c      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b02:	3308      	adds	r3, #8
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 fbe6 	bl	80052d8 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b12:	e011      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b18:	3328      	adds	r3, #40	; 0x28
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 fc8d 	bl	800543c <RCCEx_PLL3_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b30:	e002      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b40:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6513      	str	r3, [r2, #80]	; 0x50
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003b6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d053      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b8a:	d035      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b90:	d82e      	bhi.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b96:	d031      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b9c:	d828      	bhi.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d01a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba8:	d822      	bhi.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bb2:	d007      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bb4:	e01c      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb6:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bc2:	e01c      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	3308      	adds	r3, #8
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 fb83 	bl	80052d8 <RCCEx_PLL2_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bd8:	e011      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bde:	3328      	adds	r3, #40	; 0x28
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fc2a 	bl	800543c <RCCEx_PLL3_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bee:	e006      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1c:	e003      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003c40:	460b      	mov	r3, r1
 8003c42:	4313      	orrs	r3, r2
 8003c44:	d056      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c52:	d038      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c58:	d831      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c5e:	d034      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c64:	d82b      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6a:	d01d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c70:	d825      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d006      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c7c:	e01f      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c7e:	bf00      	nop
 8003c80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4ba2      	ldr	r3, [pc, #648]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4aa1      	ldr	r2, [pc, #644]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c90:	e01c      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	3308      	adds	r3, #8
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 fb1c 	bl	80052d8 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ca6:	e011      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cac:	3328      	adds	r3, #40	; 0x28
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 fbc3 	bl	800543c <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e006      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cc4:	e002      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cd4:	4b8e      	ldr	r3, [pc, #568]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce4:	4a8a      	ldr	r2, [pc, #552]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4313      	orrs	r3, r2
 8003d12:	d03a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1a:	2b30      	cmp	r3, #48	; 0x30
 8003d1c:	d01f      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d1e:	2b30      	cmp	r3, #48	; 0x30
 8003d20:	d819      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d00c      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d815      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d019      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	d111      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d32:	4b77      	ldr	r3, [pc, #476]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4a76      	ldr	r2, [pc, #472]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d3e:	e011      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d44:	3308      	adds	r3, #8
 8003d46:	2102      	movs	r1, #2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fac5 	bl	80052d8 <RCCEx_PLL2_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d54:	e006      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d5c:	e002      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	4a65      	ldr	r2, [pc, #404]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003da0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	d051      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db4:	d035      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dba:	d82e      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dc0:	d031      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dc6:	d828      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d01a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	d822      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ddc:	d007      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003dde:	e01c      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4b4b      	ldr	r3, [pc, #300]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a4a      	ldr	r2, [pc, #296]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dec:	e01c      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df2:	3308      	adds	r3, #8
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fa6e 	bl	80052d8 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e02:	e011      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e08:	3328      	adds	r3, #40	; 0x28
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fb15 	bl	800543c <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e30:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6513      	str	r3, [r2, #80]	; 0x50
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d056      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e78:	d033      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7e:	d82c      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e84:	d02f      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e8a:	d826      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e90:	d02b      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e96:	d820      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e9c:	d012      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea2:	d81a      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d022      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eac:	d115      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 fa0e 	bl	80052d8 <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ec2:	e015      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	3328      	adds	r3, #40	; 0x28
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 fab5 	bl	800543c <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ee0:	e006      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e004      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e002      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f06:	4a02      	ldr	r2, [pc, #8]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f0c:	e006      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d055      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f48:	d033      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f4e:	d82c      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d02f      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d826      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f60:	d02b      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f66:	d820      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d012      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f72:	d81a      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d022      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f7c:	d115      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	3308      	adds	r3, #8
 8003f84:	2101      	movs	r1, #1
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 f9a6 	bl	80052d8 <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f92:	e015      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f98:	3328      	adds	r3, #40	; 0x28
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fa4d 	bl	800543c <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fb0:	e006      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e004      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fc8:	4ba3      	ldr	r3, [pc, #652]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd8:	4a9f      	ldr	r2, [pc, #636]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d037      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004012:	d00e      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004018:	d816      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d018      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800401e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004022:	d111      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004024:	4b8c      	ldr	r3, [pc, #560]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4a8b      	ldr	r2, [pc, #556]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004030:	e00f      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	3308      	adds	r3, #8
 8004038:	2101      	movs	r1, #1
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f94c 	bl	80052d8 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004046:	e004      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800404e:	e000      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800405a:	4b7f      	ldr	r3, [pc, #508]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4a7b      	ldr	r2, [pc, #492]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406a:	430b      	orrs	r3, r1
 800406c:	6513      	str	r3, [r2, #80]	; 0x50
 800406e:	e003      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800408e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004092:	460b      	mov	r3, r1
 8004094:	4313      	orrs	r3, r2
 8004096:	d039      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d81c      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040e5 	.word	0x080040e5
 80040ac:	080040b9 	.word	0x080040b9
 80040b0:	080040c7 	.word	0x080040c7
 80040b4:	080040e5 	.word	0x080040e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b8:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4a66      	ldr	r2, [pc, #408]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040c4:	e00f      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	3308      	adds	r3, #8
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f902 	bl	80052d8 <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040ee:	4b5a      	ldr	r3, [pc, #360]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	f023 0103 	bic.w	r1, r3, #3
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fc:	4a56      	ldr	r2, [pc, #344]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004122:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	f000 809f 	beq.w	800426c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800413a:	f7fd fb03 	bl	8001744 <HAL_GetTick>
 800413e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004142:	e00b      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004144:	f7fd fafe 	bl	8001744 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b64      	cmp	r3, #100	; 0x64
 8004152:	d903      	bls.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800415a:	e005      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415c:	4b3f      	ldr	r3, [pc, #252]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ed      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800416c:	2b00      	cmp	r3, #0
 800416e:	d179      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004170:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004178:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800417c:	4053      	eors	r3, r2
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	2b00      	cmp	r3, #0
 8004184:	d015      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004192:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a30      	ldr	r2, [pc, #192]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041aa:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041be:	d118      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd fac0 	bl	8001744 <HAL_GetTick>
 80041c4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c8:	e00d      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd fabb 	bl	8001744 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041d4:	1ad2      	subs	r2, r2, r3
 80041d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80041da:	429a      	cmp	r2, r3
 80041dc:	d903      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80041e4:	e005      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0eb      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d129      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420a:	d10e      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800421c:	091a      	lsrs	r2, r3, #4
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004220:	4013      	ands	r3, r2
 8004222:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004224:	430b      	orrs	r3, r1
 8004226:	6113      	str	r3, [r2, #16]
 8004228:	e005      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004230:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004234:	6113      	str	r3, [r2, #16]
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004238:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	e00e      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004256:	e009      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004258:	58024400 	.word	0x58024400
 800425c:	58024800 	.word	0x58024800
 8004260:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004268:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f002 0301 	and.w	r3, r2, #1
 8004278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004282:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004286:	460b      	mov	r3, r1
 8004288:	4313      	orrs	r3, r2
 800428a:	f000 8089 	beq.w	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004294:	2b28      	cmp	r3, #40	; 0x28
 8004296:	d86b      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	08004379 	.word	0x08004379
 80042a4:	08004371 	.word	0x08004371
 80042a8:	08004371 	.word	0x08004371
 80042ac:	08004371 	.word	0x08004371
 80042b0:	08004371 	.word	0x08004371
 80042b4:	08004371 	.word	0x08004371
 80042b8:	08004371 	.word	0x08004371
 80042bc:	08004371 	.word	0x08004371
 80042c0:	08004345 	.word	0x08004345
 80042c4:	08004371 	.word	0x08004371
 80042c8:	08004371 	.word	0x08004371
 80042cc:	08004371 	.word	0x08004371
 80042d0:	08004371 	.word	0x08004371
 80042d4:	08004371 	.word	0x08004371
 80042d8:	08004371 	.word	0x08004371
 80042dc:	08004371 	.word	0x08004371
 80042e0:	0800435b 	.word	0x0800435b
 80042e4:	08004371 	.word	0x08004371
 80042e8:	08004371 	.word	0x08004371
 80042ec:	08004371 	.word	0x08004371
 80042f0:	08004371 	.word	0x08004371
 80042f4:	08004371 	.word	0x08004371
 80042f8:	08004371 	.word	0x08004371
 80042fc:	08004371 	.word	0x08004371
 8004300:	08004379 	.word	0x08004379
 8004304:	08004371 	.word	0x08004371
 8004308:	08004371 	.word	0x08004371
 800430c:	08004371 	.word	0x08004371
 8004310:	08004371 	.word	0x08004371
 8004314:	08004371 	.word	0x08004371
 8004318:	08004371 	.word	0x08004371
 800431c:	08004371 	.word	0x08004371
 8004320:	08004379 	.word	0x08004379
 8004324:	08004371 	.word	0x08004371
 8004328:	08004371 	.word	0x08004371
 800432c:	08004371 	.word	0x08004371
 8004330:	08004371 	.word	0x08004371
 8004334:	08004371 	.word	0x08004371
 8004338:	08004371 	.word	0x08004371
 800433c:	08004371 	.word	0x08004371
 8004340:	08004379 	.word	0x08004379
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	3308      	adds	r3, #8
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f000 ffc3 	bl	80052d8 <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004358:	e00f      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	3328      	adds	r3, #40	; 0x28
 8004360:	2101      	movs	r1, #1
 8004362:	4618      	mov	r0, r3
 8004364:	f001 f86a 	bl	800543c <RCCEx_PLL3_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800436e:	e004      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004376:	e000      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004382:	4bbf      	ldr	r3, [pc, #764]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004390:	4abb      	ldr	r2, [pc, #748]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004392:	430b      	orrs	r3, r1
 8004394:	6553      	str	r3, [r2, #84]	; 0x54
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800439c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f002 0302 	and.w	r3, r2, #2
 80043ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d041      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c6:	2b05      	cmp	r3, #5
 80043c8:	d824      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	0800441d 	.word	0x0800441d
 80043d4:	080043e9 	.word	0x080043e9
 80043d8:	080043ff 	.word	0x080043ff
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	0800441d 	.word	0x0800441d
 80043e4:	0800441d 	.word	0x0800441d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ec:	3308      	adds	r3, #8
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 ff71 	bl	80052d8 <RCCEx_PLL2_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043fc:	e00f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004402:	3328      	adds	r3, #40	; 0x28
 8004404:	2101      	movs	r1, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f818 	bl	800543c <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004412:	e004      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800441c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004426:	4b96      	ldr	r3, [pc, #600]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f023 0107 	bic.w	r1, r3, #7
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004434:	4a92      	ldr	r2, [pc, #584]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004436:	430b      	orrs	r3, r1
 8004438:	6553      	str	r3, [r2, #84]	; 0x54
 800443a:	e003      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f002 0304 	and.w	r3, r2, #4
 8004450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800445a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d044      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446c:	2b05      	cmp	r3, #5
 800446e:	d825      	bhi.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	080044c5 	.word	0x080044c5
 800447c:	08004491 	.word	0x08004491
 8004480:	080044a7 	.word	0x080044a7
 8004484:	080044c5 	.word	0x080044c5
 8004488:	080044c5 	.word	0x080044c5
 800448c:	080044c5 	.word	0x080044c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004494:	3308      	adds	r3, #8
 8004496:	2101      	movs	r1, #1
 8004498:	4618      	mov	r0, r3
 800449a:	f000 ff1d 	bl	80052d8 <RCCEx_PLL2_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044a4:	e00f      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	3328      	adds	r3, #40	; 0x28
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 ffc4 	bl	800543c <RCCEx_PLL3_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044ba:	e004      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044c2:	e000      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ce:	4b6c      	ldr	r3, [pc, #432]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	f023 0107 	bic.w	r1, r3, #7
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044de:	4a68      	ldr	r2, [pc, #416]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6593      	str	r3, [r2, #88]	; 0x58
 80044e4:	e003      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f002 0320 	and.w	r3, r2, #32
 80044fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044fe:	2300      	movs	r3, #0
 8004500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004508:	460b      	mov	r3, r1
 800450a:	4313      	orrs	r3, r2
 800450c:	d055      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800451a:	d033      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800451c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004520:	d82c      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004526:	d02f      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d826      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800452e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004532:	d02b      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004534:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004538:	d820      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800453a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800453e:	d012      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004544:	d81a      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d022      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800454a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454e:	d115      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004554:	3308      	adds	r3, #8
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f000 febd 	bl	80052d8 <RCCEx_PLL2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004564:	e015      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	3328      	adds	r3, #40	; 0x28
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ff64 	bl	800543c <RCCEx_PLL3_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800457a:	e00a      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004582:	e006      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004584:	bf00      	nop
 8004586:	e004      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004588:	bf00      	nop
 800458a:	e002      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800458c:	bf00      	nop
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800459a:	4b39      	ldr	r3, [pc, #228]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	4a35      	ldr	r2, [pc, #212]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6553      	str	r3, [r2, #84]	; 0x54
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80045c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d058      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045e6:	d033      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80045e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ec:	d82c      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f2:	d02f      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d826      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045fe:	d02b      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004604:	d820      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460a:	d012      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004610:	d81a      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d022      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d115      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	3308      	adds	r3, #8
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fe57 	bl	80052d8 <RCCEx_PLL2_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004630:	e015      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004636:	3328      	adds	r3, #40	; 0x28
 8004638:	2102      	movs	r1, #2
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fefe 	bl	800543c <RCCEx_PLL3_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004646:	e00a      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800464e:	e006      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004650:	bf00      	nop
 8004652:	e004      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004654:	bf00      	nop
 8004656:	e002      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004658:	bf00      	nop
 800465a:	e000      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800465c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10e      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004676:	4a02      	ldr	r2, [pc, #8]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004678:	430b      	orrs	r3, r1
 800467a:	6593      	str	r3, [r2, #88]	; 0x58
 800467c:	e006      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800467e:	bf00      	nop
 8004680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d055      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046b8:	d033      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046be:	d82c      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c4:	d02f      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ca:	d826      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046d0:	d02b      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80046d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046d6:	d820      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046dc:	d012      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80046de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e2:	d81a      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d022      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ec:	d115      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f2:	3308      	adds	r3, #8
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fdee 	bl	80052d8 <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004702:	e015      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004708:	3328      	adds	r3, #40	; 0x28
 800470a:	2102      	movs	r1, #2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fe95 	bl	800543c <RCCEx_PLL3_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004718:	e00a      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004720:	e006      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004722:	bf00      	nop
 8004724:	e004      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800472e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004738:	4ba1      	ldr	r3, [pc, #644]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004748:	4a9d      	ldr	r2, [pc, #628]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474a:	430b      	orrs	r3, r1
 800474c:	6593      	str	r3, [r2, #88]	; 0x58
 800474e:	e003      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f002 0308 	and.w	r3, r2, #8
 8004764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004768:	2300      	movs	r3, #0
 800476a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800476e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	d01e      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478a:	3328      	adds	r3, #40	; 0x28
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fe54 	bl	800543c <RCCEx_PLL3_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047a0:	4b87      	ldr	r3, [pc, #540]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b0:	4a83      	ldr	r2, [pc, #524]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f002 0310 	and.w	r3, r2, #16
 80047c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047c6:	2300      	movs	r3, #0
 80047c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d01e      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	d10c      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e8:	3328      	adds	r3, #40	; 0x28
 80047ea:	2102      	movs	r1, #2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fe25 	bl	800543c <RCCEx_PLL3_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fe:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800480e:	4a6c      	ldr	r2, [pc, #432]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004810:	430b      	orrs	r3, r1
 8004812:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004824:	2300      	movs	r3, #0
 8004826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800482a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d03e      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800483c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004840:	d022      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004846:	d81b      	bhi.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004850:	d00b      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004852:	e015      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004858:	3308      	adds	r3, #8
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fd3b 	bl	80052d8 <RCCEx_PLL2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004868:	e00f      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486e:	3328      	adds	r3, #40	; 0x28
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fde2 	bl	800543c <RCCEx_PLL3_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800487e:	e004      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048a2:	4a47      	ldr	r2, [pc, #284]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6593      	str	r3, [r2, #88]	; 0x58
 80048a8:	e003      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80048be:	67bb      	str	r3, [r7, #120]	; 0x78
 80048c0:	2300      	movs	r3, #0
 80048c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80048c8:	460b      	mov	r3, r1
 80048ca:	4313      	orrs	r3, r2
 80048cc:	d03b      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048da:	d01f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80048dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048e0:	d818      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80048e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e6:	d003      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80048e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ec:	d007      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80048ee:	e011      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f0:	4b33      	ldr	r3, [pc, #204]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	4a32      	ldr	r2, [pc, #200]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048fc:	e00f      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	3328      	adds	r3, #40	; 0x28
 8004904:	2101      	movs	r1, #1
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fd98 	bl	800543c <RCCEx_PLL3_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004912:	e004      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800491a:	e000      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800491c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004938:	430b      	orrs	r3, r1
 800493a:	6553      	str	r3, [r2, #84]	; 0x54
 800493c:	e003      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004952:	673b      	str	r3, [r7, #112]	; 0x70
 8004954:	2300      	movs	r3, #0
 8004956:	677b      	str	r3, [r7, #116]	; 0x74
 8004958:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800495c:	460b      	mov	r3, r1
 800495e:	4313      	orrs	r3, r2
 8004960:	d034      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d007      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004980:	e00e      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	3308      	adds	r3, #8
 8004988:	2102      	movs	r1, #2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fca4 	bl	80052d8 <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004996:	e003      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800499e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10d      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b6:	4a02      	ldr	r2, [pc, #8]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049bc:	e006      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049be:	bf00      	nop
 80049c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80049d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049da:	2300      	movs	r3, #0
 80049dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80049e2:	460b      	mov	r3, r1
 80049e4:	4313      	orrs	r3, r2
 80049e6:	d00c      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ec:	3328      	adds	r3, #40	; 0x28
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fd23 	bl	800543c <RCCEx_PLL3_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a10:	2300      	movs	r3, #0
 8004a12:	667b      	str	r3, [r7, #100]	; 0x64
 8004a14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d038      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2a:	d018      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a30:	d811      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a36:	d014      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3c:	d80b      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d011      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	d106      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a48:	4bc3      	ldr	r3, [pc, #780]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	4ac2      	ldr	r2, [pc, #776]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a70:	4bb9      	ldr	r3, [pc, #740]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a80:	4ab5      	ldr	r2, [pc, #724]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a82:	430b      	orrs	r3, r1
 8004a84:	6553      	str	r3, [r2, #84]	; 0x54
 8004a86:	e003      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aac:	4baa      	ldr	r3, [pc, #680]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aba:	4aa7      	ldr	r2, [pc, #668]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004acc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ace:	2300      	movs	r3, #0
 8004ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004adc:	4b9e      	ldr	r3, [pc, #632]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004aec:	4a9a      	ldr	r2, [pc, #616]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aee:	430b      	orrs	r3, r1
 8004af0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b00:	2300      	movs	r3, #0
 8004b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b0e:	4b92      	ldr	r3, [pc, #584]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1c:	4a8e      	ldr	r2, [pc, #568]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b30:	2300      	movs	r3, #0
 8004b32:	647b      	str	r3, [r7, #68]	; 0x44
 8004b34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b3e:	4b86      	ldr	r3, [pc, #536]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	4a85      	ldr	r2, [pc, #532]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b48:	6113      	str	r3, [r2, #16]
 8004b4a:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b4c:	6919      	ldr	r1, [r3, #16]
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b56:	4a80      	ldr	r2, [pc, #512]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b78:	4b77      	ldr	r3, [pc, #476]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	4a74      	ldr	r2, [pc, #464]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ba8:	4b6b      	ldr	r3, [pc, #428]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb8:	4a67      	ldr	r2, [pc, #412]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	d011      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bde:	3308      	adds	r3, #8
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fb78 	bl	80052d8 <RCCEx_PLL2_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	2100      	movs	r1, #0
 8004c08:	6239      	str	r1, [r7, #32]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c14:	460b      	mov	r3, r1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	d011      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	3308      	adds	r3, #8
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb58 	bl	80052d8 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	2100      	movs	r1, #0
 8004c48:	61b9      	str	r1, [r7, #24]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c54:	460b      	mov	r3, r1
 8004c56:	4313      	orrs	r3, r2
 8004c58:	d011      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2102      	movs	r1, #2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fb38 	bl	80052d8 <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	2100      	movs	r1, #0
 8004c88:	6139      	str	r1, [r7, #16]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d011      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	3328      	adds	r3, #40	; 0x28
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fbca 	bl	800543c <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d011      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cde:	3328      	adds	r3, #40	; 0x28
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fbaa 	bl	800543c <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	2100      	movs	r1, #0
 8004d08:	6039      	str	r1, [r7, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d14:	460b      	mov	r3, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	d011      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1e:	3328      	adds	r3, #40	; 0x28
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fb8a 	bl	800543c <RCCEx_PLL3_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004d3e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004d52:	46bd      	mov	sp, r7
 8004d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d58:	58024400 	.word	0x58024400

08004d5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d60:	f7fe fd96 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4904      	ldr	r1, [pc, #16]	; (8004d84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	58024400 	.word	0x58024400
 8004d84:	08007034 	.word	0x08007034

08004d88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d90:	4ba1      	ldr	r3, [pc, #644]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d9a:	4b9f      	ldr	r3, [pc, #636]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	0b1b      	lsrs	r3, r3, #12
 8004da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004da6:	4b9c      	ldr	r3, [pc, #624]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004db2:	4b99      	ldr	r3, [pc, #612]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	08db      	lsrs	r3, r3, #3
 8004db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8111 	beq.w	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f000 8083 	beq.w	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	f200 80a1 	bhi.w	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d056      	beq.n	8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004df2:	e099      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df4:	4b88      	ldr	r3, [pc, #544]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02d      	beq.n	8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e00:	4b85      	ldr	r3, [pc, #532]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	08db      	lsrs	r3, r3, #3
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	4a84      	ldr	r2, [pc, #528]	; (800501c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b7b      	ldr	r3, [pc, #492]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e5a:	e087      	b.n	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9e:	e065      	b.n	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ee2:	e043      	b.n	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800502c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b48      	ldr	r3, [pc, #288]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f26:	e021      	b.n	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3a:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f6c:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	0a5b      	lsrs	r3, r3, #9
 8004f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f92:	ee17 2a90 	vmov	r2, s15
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	0c1b      	lsrs	r3, r3, #16
 8004fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc0:	ee17 2a90 	vmov	r2, s15
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fc8:	4b13      	ldr	r3, [pc, #76]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	0e1b      	lsrs	r3, r3, #24
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fee:	ee17 2a90 	vmov	r2, s15
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ff6:	e008      	b.n	800500a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	609a      	str	r2, [r3, #8]
}
 800500a:	bf00      	nop
 800500c:	3724      	adds	r7, #36	; 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	03d09000 	.word	0x03d09000
 8005020:	46000000 	.word	0x46000000
 8005024:	4c742400 	.word	0x4c742400
 8005028:	4a742400 	.word	0x4a742400
 800502c:	4af42400 	.word	0x4af42400

08005030 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005030:	b480      	push	{r7}
 8005032:	b089      	sub	sp, #36	; 0x24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005038:	4ba1      	ldr	r3, [pc, #644]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005042:	4b9f      	ldr	r3, [pc, #636]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	0d1b      	lsrs	r3, r3, #20
 8005048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800504e:	4b9c      	ldr	r3, [pc, #624]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800505a:	4b99      	ldr	r3, [pc, #612]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	08db      	lsrs	r3, r3, #3
 8005060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8111 	beq.w	80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b02      	cmp	r3, #2
 8005082:	f000 8083 	beq.w	800518c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b02      	cmp	r3, #2
 800508a:	f200 80a1 	bhi.w	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d056      	beq.n	8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800509a:	e099      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509c:	4b88      	ldr	r3, [pc, #544]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02d      	beq.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050a8:	4b85      	ldr	r3, [pc, #532]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	4a84      	ldr	r2, [pc, #528]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
 80050b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b7b      	ldr	r3, [pc, #492]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005102:	e087      	b.n	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005116:	4b6a      	ldr	r3, [pc, #424]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	ed97 6a03 	vldr	s12, [r7, #12]
 800512a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800512e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005146:	e065      	b.n	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515a:	4b59      	ldr	r3, [pc, #356]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a03 	vldr	s12, [r7, #12]
 800516e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518a:	e043      	b.n	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b48      	ldr	r3, [pc, #288]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ce:	e021      	b.n	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005212:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005214:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	0a5b      	lsrs	r3, r3, #9
 800521a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800522a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800522e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800523a:	ee17 2a90 	vmov	r2, s15
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005242:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	0c1b      	lsrs	r3, r3, #16
 8005248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800525c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005268:	ee17 2a90 	vmov	r2, s15
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005270:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	0e1b      	lsrs	r3, r3, #24
 8005276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800528a:	edd7 6a07 	vldr	s13, [r7, #28]
 800528e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005296:	ee17 2a90 	vmov	r2, s15
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800529e:	e008      	b.n	80052b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	609a      	str	r2, [r3, #8]
}
 80052b2:	bf00      	nop
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	58024400 	.word	0x58024400
 80052c4:	03d09000 	.word	0x03d09000
 80052c8:	46000000 	.word	0x46000000
 80052cc:	4c742400 	.word	0x4c742400
 80052d0:	4a742400 	.word	0x4a742400
 80052d4:	4af42400 	.word	0x4af42400

080052d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052e6:	4b53      	ldr	r3, [pc, #332]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d101      	bne.n	80052f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e099      	b.n	800542a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052f6:	4b4f      	ldr	r3, [pc, #316]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a4e      	ldr	r2, [pc, #312]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80052fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005302:	f7fc fa1f 	bl	8001744 <HAL_GetTick>
 8005306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005308:	e008      	b.n	800531c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800530a:	f7fc fa1b 	bl	8001744 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e086      	b.n	800542a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800531c:	4b45      	ldr	r3, [pc, #276]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005328:	4b42      	ldr	r3, [pc, #264]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	493f      	ldr	r1, [pc, #252]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	628b      	str	r3, [r1, #40]	; 0x28
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	3b01      	subs	r3, #1
 8005342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	3b01      	subs	r3, #1
 800534c:	025b      	lsls	r3, r3, #9
 800534e:	b29b      	uxth	r3, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	3b01      	subs	r3, #1
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	3b01      	subs	r3, #1
 8005366:	061b      	lsls	r3, r3, #24
 8005368:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800536c:	4931      	ldr	r1, [pc, #196]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005372:	4b30      	ldr	r3, [pc, #192]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	492d      	ldr	r1, [pc, #180]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005380:	4313      	orrs	r3, r2
 8005382:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f023 0220 	bic.w	r2, r3, #32
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	4928      	ldr	r1, [pc, #160]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005396:	4b27      	ldr	r3, [pc, #156]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4a26      	ldr	r2, [pc, #152]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800539c:	f023 0310 	bic.w	r3, r3, #16
 80053a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a6:	4b24      	ldr	r3, [pc, #144]	; (8005438 <RCCEx_PLL2_Config+0x160>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	69d2      	ldr	r2, [r2, #28]
 80053ae:	00d2      	lsls	r2, r2, #3
 80053b0:	4920      	ldr	r1, [pc, #128]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053b6:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	f043 0310 	orr.w	r3, r3, #16
 80053c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053c8:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053d4:	e00f      	b.n	80053f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d106      	bne.n	80053ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053dc:	4b15      	ldr	r3, [pc, #84]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053e8:	e005      	b.n	80053f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	4a11      	ldr	r2, [pc, #68]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 80053fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005402:	f7fc f99f 	bl	8001744 <HAL_GetTick>
 8005406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005408:	e008      	b.n	800541c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800540a:	f7fc f99b 	bl	8001744 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e006      	b.n	800542a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <RCCEx_PLL2_Config+0x15c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005428:	7bfb      	ldrb	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
 8005438:	ffff0007 	.word	0xffff0007

0800543c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800544a:	4b53      	ldr	r3, [pc, #332]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b03      	cmp	r3, #3
 8005454:	d101      	bne.n	800545a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e099      	b.n	800558e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800545a:	4b4f      	ldr	r3, [pc, #316]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a4e      	ldr	r2, [pc, #312]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005466:	f7fc f96d 	bl	8001744 <HAL_GetTick>
 800546a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800546c:	e008      	b.n	8005480 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800546e:	f7fc f969 	bl	8001744 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e086      	b.n	800558e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005480:	4b45      	ldr	r3, [pc, #276]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800548c:	4b42      	ldr	r3, [pc, #264]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	051b      	lsls	r3, r3, #20
 800549a:	493f      	ldr	r1, [pc, #252]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	628b      	str	r3, [r1, #40]	; 0x28
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	025b      	lsls	r3, r3, #9
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	061b      	lsls	r3, r3, #24
 80054cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054d0:	4931      	ldr	r1, [pc, #196]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	492d      	ldr	r1, [pc, #180]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054e8:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4928      	ldr	r1, [pc, #160]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054fa:	4b27      	ldr	r3, [pc, #156]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4a26      	ldr	r2, [pc, #152]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550a:	4b24      	ldr	r3, [pc, #144]	; (800559c <RCCEx_PLL3_Config+0x160>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	69d2      	ldr	r2, [r2, #28]
 8005512:	00d2      	lsls	r2, r2, #3
 8005514:	4920      	ldr	r1, [pc, #128]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800551a:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005532:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005538:	e00f      	b.n	800555a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d106      	bne.n	800554e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800554a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800554c:	e005      	b.n	800555a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	4a11      	ldr	r2, [pc, #68]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005558:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005566:	f7fc f8ed 	bl	8001744 <HAL_GetTick>
 800556a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800556c:	e008      	b.n	8005580 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800556e:	f7fc f8e9 	bl	8001744 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e006      	b.n	800558e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <RCCEx_PLL3_Config+0x15c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	ffff0007 	.word	0xffff0007

080055a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e042      	b.n	8005638 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fb fdf5 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2224      	movs	r2, #36	; 0x24
 80055ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f82c 	bl	8005640 <UART_SetConfig>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e022      	b.n	8005638 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fd88 	bl	8006110 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800560e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800561e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fe0f 	bl	8006254 <UART_CheckIdleState>
 8005636:	4603      	mov	r3, r0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005644:	b092      	sub	sp, #72	; 0x48
 8005646:	af00      	add	r7, sp, #0
 8005648:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	431a      	orrs	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	431a      	orrs	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	4313      	orrs	r3, r2
 8005666:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4bbe      	ldr	r3, [pc, #760]	; (8005968 <UART_SetConfig+0x328>)
 8005670:	4013      	ands	r3, r2
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005678:	430b      	orrs	r3, r1
 800567a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4ab3      	ldr	r2, [pc, #716]	; (800596c <UART_SetConfig+0x32c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a8:	4313      	orrs	r3, r2
 80056aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	4baf      	ldr	r3, [pc, #700]	; (8005970 <UART_SetConfig+0x330>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056bc:	430b      	orrs	r3, r1
 80056be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	f023 010f 	bic.w	r1, r3, #15
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4aa6      	ldr	r2, [pc, #664]	; (8005974 <UART_SetConfig+0x334>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d177      	bne.n	80057d0 <UART_SetConfig+0x190>
 80056e0:	4ba5      	ldr	r3, [pc, #660]	; (8005978 <UART_SetConfig+0x338>)
 80056e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e8:	2b28      	cmp	r3, #40	; 0x28
 80056ea:	d86d      	bhi.n	80057c8 <UART_SetConfig+0x188>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0xb4>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005799 	.word	0x08005799
 80056f8:	080057c9 	.word	0x080057c9
 80056fc:	080057c9 	.word	0x080057c9
 8005700:	080057c9 	.word	0x080057c9
 8005704:	080057c9 	.word	0x080057c9
 8005708:	080057c9 	.word	0x080057c9
 800570c:	080057c9 	.word	0x080057c9
 8005710:	080057c9 	.word	0x080057c9
 8005714:	080057a1 	.word	0x080057a1
 8005718:	080057c9 	.word	0x080057c9
 800571c:	080057c9 	.word	0x080057c9
 8005720:	080057c9 	.word	0x080057c9
 8005724:	080057c9 	.word	0x080057c9
 8005728:	080057c9 	.word	0x080057c9
 800572c:	080057c9 	.word	0x080057c9
 8005730:	080057c9 	.word	0x080057c9
 8005734:	080057a9 	.word	0x080057a9
 8005738:	080057c9 	.word	0x080057c9
 800573c:	080057c9 	.word	0x080057c9
 8005740:	080057c9 	.word	0x080057c9
 8005744:	080057c9 	.word	0x080057c9
 8005748:	080057c9 	.word	0x080057c9
 800574c:	080057c9 	.word	0x080057c9
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057b1 	.word	0x080057b1
 8005758:	080057c9 	.word	0x080057c9
 800575c:	080057c9 	.word	0x080057c9
 8005760:	080057c9 	.word	0x080057c9
 8005764:	080057c9 	.word	0x080057c9
 8005768:	080057c9 	.word	0x080057c9
 800576c:	080057c9 	.word	0x080057c9
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057b9 	.word	0x080057b9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057c9 	.word	0x080057c9
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057c9 	.word	0x080057c9
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057c1 	.word	0x080057c1
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e222      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e21e      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e21a      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e216      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80057b8:	2320      	movs	r3, #32
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057be:	e212      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80057c0:	2340      	movs	r3, #64	; 0x40
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c6:	e20e      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ce:	e20a      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a69      	ldr	r2, [pc, #420]	; (800597c <UART_SetConfig+0x33c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d130      	bne.n	800583c <UART_SetConfig+0x1fc>
 80057da:	4b67      	ldr	r3, [pc, #412]	; (8005978 <UART_SetConfig+0x338>)
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d826      	bhi.n	8005834 <UART_SetConfig+0x1f4>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x1ac>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005805 	.word	0x08005805
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	08005815 	.word	0x08005815
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e1ec      	b.n	8005be6 <UART_SetConfig+0x5a6>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e1e8      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581a:	e1e4      	b.n	8005be6 <UART_SetConfig+0x5a6>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005822:	e1e0      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005824:	2320      	movs	r3, #32
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582a:	e1dc      	b.n	8005be6 <UART_SetConfig+0x5a6>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005832:	e1d8      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583a:	e1d4      	b.n	8005be6 <UART_SetConfig+0x5a6>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a4f      	ldr	r2, [pc, #316]	; (8005980 <UART_SetConfig+0x340>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d130      	bne.n	80058a8 <UART_SetConfig+0x268>
 8005846:	4b4c      	ldr	r3, [pc, #304]	; (8005978 <UART_SetConfig+0x338>)
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b05      	cmp	r3, #5
 8005850:	d826      	bhi.n	80058a0 <UART_SetConfig+0x260>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x218>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005871 	.word	0x08005871
 800585c:	08005879 	.word	0x08005879
 8005860:	08005881 	.word	0x08005881
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	2300      	movs	r3, #0
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e1b6      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005878:	2304      	movs	r3, #4
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587e:	e1b2      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005880:	2308      	movs	r3, #8
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005886:	e1ae      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005888:	2310      	movs	r3, #16
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588e:	e1aa      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005890:	2320      	movs	r3, #32
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005896:	e1a6      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005898:	2340      	movs	r3, #64	; 0x40
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589e:	e1a2      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a6:	e19e      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a35      	ldr	r2, [pc, #212]	; (8005984 <UART_SetConfig+0x344>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d130      	bne.n	8005914 <UART_SetConfig+0x2d4>
 80058b2:	4b31      	ldr	r3, [pc, #196]	; (8005978 <UART_SetConfig+0x338>)
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d826      	bhi.n	800590c <UART_SetConfig+0x2cc>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x284>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058dd 	.word	0x080058dd
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	080058ed 	.word	0x080058ed
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005905 	.word	0x08005905
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e2:	e180      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ea:	e17c      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f2:	e178      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fa:	e174      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80058fc:	2320      	movs	r3, #32
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005902:	e170      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590a:	e16c      	b.n	8005be6 <UART_SetConfig+0x5a6>
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005912:	e168      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <UART_SetConfig+0x348>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d142      	bne.n	80059a4 <UART_SetConfig+0x364>
 800591e:	4b16      	ldr	r3, [pc, #88]	; (8005978 <UART_SetConfig+0x338>)
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b05      	cmp	r3, #5
 8005928:	d838      	bhi.n	800599c <UART_SetConfig+0x35c>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x2f0>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005949 	.word	0x08005949
 8005934:	08005951 	.word	0x08005951
 8005938:	08005959 	.word	0x08005959
 800593c:	08005961 	.word	0x08005961
 8005940:	0800598d 	.word	0x0800598d
 8005944:	08005995 	.word	0x08005995
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594e:	e14a      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005950:	2304      	movs	r3, #4
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005956:	e146      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005958:	2308      	movs	r3, #8
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595e:	e142      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005960:	2310      	movs	r3, #16
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005966:	e13e      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005968:	cfff69f3 	.word	0xcfff69f3
 800596c:	58000c00 	.word	0x58000c00
 8005970:	11fff4ff 	.word	0x11fff4ff
 8005974:	40011000 	.word	0x40011000
 8005978:	58024400 	.word	0x58024400
 800597c:	40004400 	.word	0x40004400
 8005980:	40004800 	.word	0x40004800
 8005984:	40004c00 	.word	0x40004c00
 8005988:	40005000 	.word	0x40005000
 800598c:	2320      	movs	r3, #32
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005992:	e128      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e124      	b.n	8005be6 <UART_SetConfig+0x5a6>
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a2:	e120      	b.n	8005be6 <UART_SetConfig+0x5a6>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4acb      	ldr	r2, [pc, #812]	; (8005cd8 <UART_SetConfig+0x698>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d176      	bne.n	8005a9c <UART_SetConfig+0x45c>
 80059ae:	4bcb      	ldr	r3, [pc, #812]	; (8005cdc <UART_SetConfig+0x69c>)
 80059b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059b6:	2b28      	cmp	r3, #40	; 0x28
 80059b8:	d86c      	bhi.n	8005a94 <UART_SetConfig+0x454>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0x380>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	08005a65 	.word	0x08005a65
 80059c4:	08005a95 	.word	0x08005a95
 80059c8:	08005a95 	.word	0x08005a95
 80059cc:	08005a95 	.word	0x08005a95
 80059d0:	08005a95 	.word	0x08005a95
 80059d4:	08005a95 	.word	0x08005a95
 80059d8:	08005a95 	.word	0x08005a95
 80059dc:	08005a95 	.word	0x08005a95
 80059e0:	08005a6d 	.word	0x08005a6d
 80059e4:	08005a95 	.word	0x08005a95
 80059e8:	08005a95 	.word	0x08005a95
 80059ec:	08005a95 	.word	0x08005a95
 80059f0:	08005a95 	.word	0x08005a95
 80059f4:	08005a95 	.word	0x08005a95
 80059f8:	08005a95 	.word	0x08005a95
 80059fc:	08005a95 	.word	0x08005a95
 8005a00:	08005a75 	.word	0x08005a75
 8005a04:	08005a95 	.word	0x08005a95
 8005a08:	08005a95 	.word	0x08005a95
 8005a0c:	08005a95 	.word	0x08005a95
 8005a10:	08005a95 	.word	0x08005a95
 8005a14:	08005a95 	.word	0x08005a95
 8005a18:	08005a95 	.word	0x08005a95
 8005a1c:	08005a95 	.word	0x08005a95
 8005a20:	08005a7d 	.word	0x08005a7d
 8005a24:	08005a95 	.word	0x08005a95
 8005a28:	08005a95 	.word	0x08005a95
 8005a2c:	08005a95 	.word	0x08005a95
 8005a30:	08005a95 	.word	0x08005a95
 8005a34:	08005a95 	.word	0x08005a95
 8005a38:	08005a95 	.word	0x08005a95
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005a85 	.word	0x08005a85
 8005a44:	08005a95 	.word	0x08005a95
 8005a48:	08005a95 	.word	0x08005a95
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005a95 	.word	0x08005a95
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a95 	.word	0x08005a95
 8005a5c:	08005a95 	.word	0x08005a95
 8005a60:	08005a8d 	.word	0x08005a8d
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e0bc      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e0b8      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005a74:	2308      	movs	r3, #8
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7a:	e0b4      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a82:	e0b0      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005a84:	2320      	movs	r3, #32
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8a:	e0ac      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005a8c:	2340      	movs	r3, #64	; 0x40
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a92:	e0a8      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9a:	e0a4      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a8f      	ldr	r2, [pc, #572]	; (8005ce0 <UART_SetConfig+0x6a0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d130      	bne.n	8005b08 <UART_SetConfig+0x4c8>
 8005aa6:	4b8d      	ldr	r3, [pc, #564]	; (8005cdc <UART_SetConfig+0x69c>)
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d826      	bhi.n	8005b00 <UART_SetConfig+0x4c0>
 8005ab2:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <UART_SetConfig+0x478>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ad1 	.word	0x08005ad1
 8005abc:	08005ad9 	.word	0x08005ad9
 8005ac0:	08005ae1 	.word	0x08005ae1
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af9 	.word	0x08005af9
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e086      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e082      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae6:	e07e      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e07a      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005af0:	2320      	movs	r3, #32
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e076      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005af8:	2340      	movs	r3, #64	; 0x40
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e072      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b06:	e06e      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <UART_SetConfig+0x6a4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d130      	bne.n	8005b74 <UART_SetConfig+0x534>
 8005b12:	4b72      	ldr	r3, [pc, #456]	; (8005cdc <UART_SetConfig+0x69c>)
 8005b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d826      	bhi.n	8005b6c <UART_SetConfig+0x52c>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x4e4>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b3d 	.word	0x08005b3d
 8005b28:	08005b45 	.word	0x08005b45
 8005b2c:	08005b4d 	.word	0x08005b4d
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e050      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b44:	2304      	movs	r3, #4
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e04c      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e048      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b54:	2310      	movs	r3, #16
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e044      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e040      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b64:	2340      	movs	r3, #64	; 0x40
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e03c      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e038      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5b      	ldr	r2, [pc, #364]	; (8005ce8 <UART_SetConfig+0x6a8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d130      	bne.n	8005be0 <UART_SetConfig+0x5a0>
 8005b7e:	4b57      	ldr	r3, [pc, #348]	; (8005cdc <UART_SetConfig+0x69c>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b05      	cmp	r3, #5
 8005b88:	d826      	bhi.n	8005bd8 <UART_SetConfig+0x598>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0x550>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005ba9 	.word	0x08005ba9
 8005b94:	08005bb1 	.word	0x08005bb1
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	2302      	movs	r3, #2
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e01a      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e016      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e012      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e00e      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005bc8:	2320      	movs	r3, #32
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e00a      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005bd0:	2340      	movs	r3, #64	; 0x40
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e006      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e002      	b.n	8005be6 <UART_SetConfig+0x5a6>
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <UART_SetConfig+0x6a8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	f040 80f8 	bne.w	8005de2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	dc46      	bgt.n	8005c88 <UART_SetConfig+0x648>
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	f2c0 8082 	blt.w	8005d04 <UART_SetConfig+0x6c4>
 8005c00:	3b02      	subs	r3, #2
 8005c02:	2b1e      	cmp	r3, #30
 8005c04:	d87e      	bhi.n	8005d04 <UART_SetConfig+0x6c4>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x5cc>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c8f 	.word	0x08005c8f
 8005c10:	08005d05 	.word	0x08005d05
 8005c14:	08005c97 	.word	0x08005c97
 8005c18:	08005d05 	.word	0x08005d05
 8005c1c:	08005d05 	.word	0x08005d05
 8005c20:	08005d05 	.word	0x08005d05
 8005c24:	08005ca7 	.word	0x08005ca7
 8005c28:	08005d05 	.word	0x08005d05
 8005c2c:	08005d05 	.word	0x08005d05
 8005c30:	08005d05 	.word	0x08005d05
 8005c34:	08005d05 	.word	0x08005d05
 8005c38:	08005d05 	.word	0x08005d05
 8005c3c:	08005d05 	.word	0x08005d05
 8005c40:	08005d05 	.word	0x08005d05
 8005c44:	08005cb7 	.word	0x08005cb7
 8005c48:	08005d05 	.word	0x08005d05
 8005c4c:	08005d05 	.word	0x08005d05
 8005c50:	08005d05 	.word	0x08005d05
 8005c54:	08005d05 	.word	0x08005d05
 8005c58:	08005d05 	.word	0x08005d05
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005d05 	.word	0x08005d05
 8005c64:	08005d05 	.word	0x08005d05
 8005c68:	08005d05 	.word	0x08005d05
 8005c6c:	08005d05 	.word	0x08005d05
 8005c70:	08005d05 	.word	0x08005d05
 8005c74:	08005d05 	.word	0x08005d05
 8005c78:	08005d05 	.word	0x08005d05
 8005c7c:	08005d05 	.word	0x08005d05
 8005c80:	08005d05 	.word	0x08005d05
 8005c84:	08005cf7 	.word	0x08005cf7
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d037      	beq.n	8005cfc <UART_SetConfig+0x6bc>
 8005c8c:	e03a      	b.n	8005d04 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c8e:	f7ff f865 	bl	8004d5c <HAL_RCCEx_GetD3PCLK1Freq>
 8005c92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c94:	e03c      	b.n	8005d10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff f874 	bl	8004d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca4:	e034      	b.n	8005d10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca6:	f107 0318 	add.w	r3, r7, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f9c0 	bl	8005030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb4:	e02c      	b.n	8005d10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <UART_SetConfig+0x69c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d016      	beq.n	8005cf0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <UART_SetConfig+0x69c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	4a07      	ldr	r2, [pc, #28]	; (8005cec <UART_SetConfig+0x6ac>)
 8005cce:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cd4:	e01c      	b.n	8005d10 <UART_SetConfig+0x6d0>
 8005cd6:	bf00      	nop
 8005cd8:	40011400 	.word	0x40011400
 8005cdc:	58024400 	.word	0x58024400
 8005ce0:	40007800 	.word	0x40007800
 8005ce4:	40007c00 	.word	0x40007c00
 8005ce8:	58000c00 	.word	0x58000c00
 8005cec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005cf0:	4b9d      	ldr	r3, [pc, #628]	; (8005f68 <UART_SetConfig+0x928>)
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf4:	e00c      	b.n	8005d10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cf6:	4b9d      	ldr	r3, [pc, #628]	; (8005f6c <UART_SetConfig+0x92c>)
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cfa:	e009      	b.n	8005d10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d02:	e005      	b.n	8005d10 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 81de 	beq.w	80060d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	4a94      	ldr	r2, [pc, #592]	; (8005f70 <UART_SetConfig+0x930>)
 8005d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d22:	461a      	mov	r2, r3
 8005d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d305      	bcc.n	8005d48 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d4e:	e1c1      	b.n	80060d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	2200      	movs	r2, #0
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	60fa      	str	r2, [r7, #12]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	4a84      	ldr	r2, [pc, #528]	; (8005f70 <UART_SetConfig+0x930>)
 8005d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2200      	movs	r2, #0
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d72:	f7fa fab1 	bl	80002d8 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	020b      	lsls	r3, r1, #8
 8005d88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d8c:	0202      	lsls	r2, r0, #8
 8005d8e:	6979      	ldr	r1, [r7, #20]
 8005d90:	6849      	ldr	r1, [r1, #4]
 8005d92:	0849      	lsrs	r1, r1, #1
 8005d94:	2000      	movs	r0, #0
 8005d96:	460c      	mov	r4, r1
 8005d98:	4605      	mov	r5, r0
 8005d9a:	eb12 0804 	adds.w	r8, r2, r4
 8005d9e:	eb43 0905 	adc.w	r9, r3, r5
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	469a      	mov	sl, r3
 8005daa:	4693      	mov	fp, r2
 8005dac:	4652      	mov	r2, sl
 8005dae:	465b      	mov	r3, fp
 8005db0:	4640      	mov	r0, r8
 8005db2:	4649      	mov	r1, r9
 8005db4:	f7fa fa90 	bl	80002d8 <__aeabi_uldivmod>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc6:	d308      	bcc.n	8005dda <UART_SetConfig+0x79a>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dce:	d204      	bcs.n	8005dda <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	e17c      	b.n	80060d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005de0:	e178      	b.n	80060d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dea:	f040 80c5 	bne.w	8005f78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005dee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	dc48      	bgt.n	8005e88 <UART_SetConfig+0x848>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	db7b      	blt.n	8005ef2 <UART_SetConfig+0x8b2>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d879      	bhi.n	8005ef2 <UART_SetConfig+0x8b2>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x7c4>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e8f 	.word	0x08005e8f
 8005e08:	08005e97 	.word	0x08005e97
 8005e0c:	08005ef3 	.word	0x08005ef3
 8005e10:	08005ef3 	.word	0x08005ef3
 8005e14:	08005e9f 	.word	0x08005e9f
 8005e18:	08005ef3 	.word	0x08005ef3
 8005e1c:	08005ef3 	.word	0x08005ef3
 8005e20:	08005ef3 	.word	0x08005ef3
 8005e24:	08005eaf 	.word	0x08005eaf
 8005e28:	08005ef3 	.word	0x08005ef3
 8005e2c:	08005ef3 	.word	0x08005ef3
 8005e30:	08005ef3 	.word	0x08005ef3
 8005e34:	08005ef3 	.word	0x08005ef3
 8005e38:	08005ef3 	.word	0x08005ef3
 8005e3c:	08005ef3 	.word	0x08005ef3
 8005e40:	08005ef3 	.word	0x08005ef3
 8005e44:	08005ebf 	.word	0x08005ebf
 8005e48:	08005ef3 	.word	0x08005ef3
 8005e4c:	08005ef3 	.word	0x08005ef3
 8005e50:	08005ef3 	.word	0x08005ef3
 8005e54:	08005ef3 	.word	0x08005ef3
 8005e58:	08005ef3 	.word	0x08005ef3
 8005e5c:	08005ef3 	.word	0x08005ef3
 8005e60:	08005ef3 	.word	0x08005ef3
 8005e64:	08005ef3 	.word	0x08005ef3
 8005e68:	08005ef3 	.word	0x08005ef3
 8005e6c:	08005ef3 	.word	0x08005ef3
 8005e70:	08005ef3 	.word	0x08005ef3
 8005e74:	08005ef3 	.word	0x08005ef3
 8005e78:	08005ef3 	.word	0x08005ef3
 8005e7c:	08005ef3 	.word	0x08005ef3
 8005e80:	08005ef3 	.word	0x08005ef3
 8005e84:	08005ee5 	.word	0x08005ee5
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d02e      	beq.n	8005eea <UART_SetConfig+0x8aa>
 8005e8c:	e031      	b.n	8005ef2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e8e:	f7fd fd2f 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8005e92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e94:	e033      	b.n	8005efe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e96:	f7fd fd41 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8005e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e9c:	e02f      	b.n	8005efe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe ff70 	bl	8004d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eac:	e027      	b.n	8005efe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eae:	f107 0318 	add.w	r3, r7, #24
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff f8bc 	bl	8005030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ebc:	e01f      	b.n	8005efe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebe:	4b2d      	ldr	r3, [pc, #180]	; (8005f74 <UART_SetConfig+0x934>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eca:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <UART_SetConfig+0x934>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	08db      	lsrs	r3, r3, #3
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <UART_SetConfig+0x928>)
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005edc:	e00f      	b.n	8005efe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005ede:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <UART_SetConfig+0x928>)
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ee2:	e00c      	b.n	8005efe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ee4:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <UART_SetConfig+0x92c>)
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ee8:	e009      	b.n	8005efe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef0:	e005      	b.n	8005efe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005efc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80e7 	beq.w	80060d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <UART_SetConfig+0x930>)
 8005f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f10:	461a      	mov	r2, r3
 8005f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f18:	005a      	lsls	r2, r3, #1
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	441a      	add	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	d916      	bls.n	8005f60 <UART_SetConfig+0x920>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f38:	d212      	bcs.n	8005f60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f023 030f 	bic.w	r3, r3, #15
 8005f42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f52:	4313      	orrs	r3, r2
 8005f54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	e0b9      	b.n	80060d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f66:	e0b5      	b.n	80060d4 <UART_SetConfig+0xa94>
 8005f68:	03d09000 	.word	0x03d09000
 8005f6c:	003d0900 	.word	0x003d0900
 8005f70:	08007044 	.word	0x08007044
 8005f74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	dc49      	bgt.n	8006014 <UART_SetConfig+0x9d4>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	db7c      	blt.n	800607e <UART_SetConfig+0xa3e>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d87a      	bhi.n	800607e <UART_SetConfig+0xa3e>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <UART_SetConfig+0x950>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	0800601b 	.word	0x0800601b
 8005f94:	08006023 	.word	0x08006023
 8005f98:	0800607f 	.word	0x0800607f
 8005f9c:	0800607f 	.word	0x0800607f
 8005fa0:	0800602b 	.word	0x0800602b
 8005fa4:	0800607f 	.word	0x0800607f
 8005fa8:	0800607f 	.word	0x0800607f
 8005fac:	0800607f 	.word	0x0800607f
 8005fb0:	0800603b 	.word	0x0800603b
 8005fb4:	0800607f 	.word	0x0800607f
 8005fb8:	0800607f 	.word	0x0800607f
 8005fbc:	0800607f 	.word	0x0800607f
 8005fc0:	0800607f 	.word	0x0800607f
 8005fc4:	0800607f 	.word	0x0800607f
 8005fc8:	0800607f 	.word	0x0800607f
 8005fcc:	0800607f 	.word	0x0800607f
 8005fd0:	0800604b 	.word	0x0800604b
 8005fd4:	0800607f 	.word	0x0800607f
 8005fd8:	0800607f 	.word	0x0800607f
 8005fdc:	0800607f 	.word	0x0800607f
 8005fe0:	0800607f 	.word	0x0800607f
 8005fe4:	0800607f 	.word	0x0800607f
 8005fe8:	0800607f 	.word	0x0800607f
 8005fec:	0800607f 	.word	0x0800607f
 8005ff0:	0800607f 	.word	0x0800607f
 8005ff4:	0800607f 	.word	0x0800607f
 8005ff8:	0800607f 	.word	0x0800607f
 8005ffc:	0800607f 	.word	0x0800607f
 8006000:	0800607f 	.word	0x0800607f
 8006004:	0800607f 	.word	0x0800607f
 8006008:	0800607f 	.word	0x0800607f
 800600c:	0800607f 	.word	0x0800607f
 8006010:	08006071 	.word	0x08006071
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d02e      	beq.n	8006076 <UART_SetConfig+0xa36>
 8006018:	e031      	b.n	800607e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601a:	f7fd fc69 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800601e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006020:	e033      	b.n	800608a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006022:	f7fd fc7b 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8006026:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006028:	e02f      	b.n	800608a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe feaa 	bl	8004d88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006038:	e027      	b.n	800608a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800603a:	f107 0318 	add.w	r3, r7, #24
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fff6 	bl	8005030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006048:	e01f      	b.n	800608a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800604a:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <UART_SetConfig+0xac0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006056:	4b2a      	ldr	r3, [pc, #168]	; (8006100 <UART_SetConfig+0xac0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	08db      	lsrs	r3, r3, #3
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <UART_SetConfig+0xac4>)
 8006062:	fa22 f303 	lsr.w	r3, r2, r3
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006068:	e00f      	b.n	800608a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <UART_SetConfig+0xac4>)
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800606e:	e00c      	b.n	800608a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006070:	4b25      	ldr	r3, [pc, #148]	; (8006108 <UART_SetConfig+0xac8>)
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006074:	e009      	b.n	800608a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800607c:	e005      	b.n	800608a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006088:	bf00      	nop
    }

    if (pclk != 0U)
 800608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d021      	beq.n	80060d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	4a1d      	ldr	r2, [pc, #116]	; (800610c <UART_SetConfig+0xacc>)
 8006096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800609a:	461a      	mov	r2, r3
 800609c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609e:	fbb3 f2f2 	udiv	r2, r3, r2
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	441a      	add	r2, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d909      	bls.n	80060ce <UART_SetConfig+0xa8e>
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c0:	d205      	bcs.n	80060ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60da      	str	r2, [r3, #12]
 80060cc:	e002      	b.n	80060d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80060f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3748      	adds	r7, #72	; 0x48
 80060f8:	46bd      	mov	sp, r7
 80060fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fe:	bf00      	nop
 8006100:	58024400 	.word	0x58024400
 8006104:	03d09000 	.word	0x03d09000
 8006108:	003d0900 	.word	0x003d0900
 800610c:	08007044 	.word	0x08007044

08006110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01a      	beq.n	8006226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800620e:	d10a      	bne.n	8006226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
  }
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b098      	sub	sp, #96	; 0x60
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006264:	f7fb fa6e 	bl	8001744 <HAL_GetTick>
 8006268:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b08      	cmp	r3, #8
 8006276:	d12f      	bne.n	80062d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006280:	2200      	movs	r2, #0
 8006282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f88e 	bl	80063a8 <UART_WaitOnFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d022      	beq.n	80062d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a6:	653b      	str	r3, [r7, #80]	; 0x50
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	647b      	str	r3, [r7, #68]	; 0x44
 80062b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e6      	bne.n	8006292 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e063      	b.n	80063a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d149      	bne.n	800637a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ee:	2200      	movs	r2, #0
 80062f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f857 	bl	80063a8 <UART_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d03c      	beq.n	800637a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	623b      	str	r3, [r7, #32]
   return(result);
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
 8006320:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e6      	bne.n	8006300 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	60fb      	str	r3, [r7, #12]
   return(result);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	64bb      	str	r3, [r7, #72]	; 0x48
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006352:	61fa      	str	r2, [r7, #28]
 8006354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	69b9      	ldr	r1, [r7, #24]
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	617b      	str	r3, [r7, #20]
   return(result);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e5      	bne.n	8006332 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e012      	b.n	80063a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3758      	adds	r7, #88	; 0x58
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b8:	e049      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d045      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c2:	f7fb f9bf 	bl	8001744 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e048      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d031      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d110      	bne.n	800641a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2208      	movs	r2, #8
 80063fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f839 	bl	8006478 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2208      	movs	r2, #8
 800640a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e029      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006428:	d111      	bne.n	800644e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f81f 	bl	8006478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e00f      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	bf0c      	ite	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	2300      	movne	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	429a      	cmp	r2, r3
 800646a:	d0a6      	beq.n	80063ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b095      	sub	sp, #84	; 0x54
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006494:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649e:	643b      	str	r3, [r7, #64]	; 0x40
 80064a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <UART_EndRxTransfer+0xc8>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e5      	bne.n	80064b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d118      	bne.n	8006520 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0310 	bic.w	r3, r3, #16
 8006502:	647b      	str	r3, [r7, #68]	; 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6979      	ldr	r1, [r7, #20]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	613b      	str	r3, [r7, #16]
   return(result);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e6      	bne.n	80064ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006534:	bf00      	nop
 8006536:	3754      	adds	r7, #84	; 0x54
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	effffffe 	.word	0xeffffffe

08006544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_UARTEx_DisableFifoMode+0x16>
 8006556:	2302      	movs	r3, #2
 8006558:	e027      	b.n	80065aa <HAL_UARTEx_DisableFifoMode+0x66>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2224      	movs	r2, #36	; 0x24
 8006566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0201 	bic.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e02d      	b.n	800662a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2224      	movs	r2, #36	; 0x24
 80065da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0201 	bic.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f850 	bl	80066b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006646:	2302      	movs	r3, #2
 8006648:	e02d      	b.n	80066a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2224      	movs	r2, #36	; 0x24
 8006656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f812 	bl	80066b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d108      	bne.n	80066d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066d0:	e031      	b.n	8006736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066d2:	2310      	movs	r3, #16
 80066d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066d6:	2310      	movs	r3, #16
 80066d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	0e5b      	lsrs	r3, r3, #25
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	0f5b      	lsrs	r3, r3, #29
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	7b3a      	ldrb	r2, [r7, #12]
 80066fe:	4911      	ldr	r1, [pc, #68]	; (8006744 <UARTEx_SetNbDataToProcess+0x94>)
 8006700:	5c8a      	ldrb	r2, [r1, r2]
 8006702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006706:	7b3a      	ldrb	r2, [r7, #12]
 8006708:	490f      	ldr	r1, [pc, #60]	; (8006748 <UARTEx_SetNbDataToProcess+0x98>)
 800670a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800670c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006710:	b29a      	uxth	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	7b7a      	ldrb	r2, [r7, #13]
 800671c:	4909      	ldr	r1, [pc, #36]	; (8006744 <UARTEx_SetNbDataToProcess+0x94>)
 800671e:	5c8a      	ldrb	r2, [r1, r2]
 8006720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006724:	7b7a      	ldrb	r2, [r7, #13]
 8006726:	4908      	ldr	r1, [pc, #32]	; (8006748 <UARTEx_SetNbDataToProcess+0x98>)
 8006728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800672a:	fb93 f3f2 	sdiv	r3, r3, r2
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	0800705c 	.word	0x0800705c
 8006748:	08007064 	.word	0x08007064

0800674c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800674c:	b084      	sub	sp, #16
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	f107 001c 	add.w	r0, r7, #28
 800675a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b01      	cmp	r3, #1
 8006762:	d120      	bne.n	80067a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	4b2a      	ldr	r3, [pc, #168]	; (8006820 <USB_CoreInit+0xd4>)
 8006776:	4013      	ands	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 faac 	bl	8006cf8 <USB_CoreReset>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
 80067a4:	e01a      	b.n	80067dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 faa0 	bl	8006cf8 <USB_CoreReset>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
 80067ce:	e005      	b.n	80067dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d116      	bne.n	8006810 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067f0:	4b0c      	ldr	r3, [pc, #48]	; (8006824 <USB_CoreInit+0xd8>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f043 0206 	orr.w	r2, r3, #6
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f043 0220 	orr.w	r2, r3, #32
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800681c:	b004      	add	sp, #16
 800681e:	4770      	bx	lr
 8006820:	ffbdffbf 	.word	0xffbdffbf
 8006824:	03ee0000 	.word	0x03ee0000

08006828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f023 0201 	bic.w	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d115      	bne.n	8006898 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006878:	2001      	movs	r0, #1
 800687a:	f7fa ff6f 	bl	800175c <HAL_Delay>
      ms++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa29 	bl	8006cdc <USB_GetMode>
 800688a:	4603      	mov	r3, r0
 800688c:	2b01      	cmp	r3, #1
 800688e:	d01e      	beq.n	80068ce <USB_SetCurrentMode+0x84>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b31      	cmp	r3, #49	; 0x31
 8006894:	d9f0      	bls.n	8006878 <USB_SetCurrentMode+0x2e>
 8006896:	e01a      	b.n	80068ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d115      	bne.n	80068ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068aa:	2001      	movs	r0, #1
 80068ac:	f7fa ff56 	bl	800175c <HAL_Delay>
      ms++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa10 	bl	8006cdc <USB_GetMode>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <USB_SetCurrentMode+0x84>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b31      	cmp	r3, #49	; 0x31
 80068c6:	d9f0      	bls.n	80068aa <USB_SetCurrentMode+0x60>
 80068c8:	e001      	b.n	80068ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e005      	b.n	80068da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b32      	cmp	r3, #50	; 0x32
 80068d2:	d101      	bne.n	80068d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068e4:	b084      	sub	sp, #16
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b086      	sub	sp, #24
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068fe:	2300      	movs	r3, #0
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	e009      	b.n	8006918 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3340      	adds	r3, #64	; 0x40
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	2200      	movs	r2, #0
 8006910:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	3301      	adds	r3, #1
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b0e      	cmp	r3, #14
 800691c:	d9f2      	bls.n	8006904 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800691e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11c      	bne.n	800695e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006932:	f043 0302 	orr.w	r3, r3, #2
 8006936:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e005      	b.n	800696a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006970:	461a      	mov	r2, r3
 8006972:	2300      	movs	r3, #0
 8006974:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	4619      	mov	r1, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006984:	461a      	mov	r2, r3
 8006986:	680b      	ldr	r3, [r1, #0]
 8006988:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10c      	bne.n	80069aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	2b00      	cmp	r3, #0
 8006994:	d104      	bne.n	80069a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006996:	2100      	movs	r1, #0
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f965 	bl	8006c68 <USB_SetDevSpeed>
 800699e:	e008      	b.n	80069b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069a0:	2101      	movs	r1, #1
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f960 	bl	8006c68 <USB_SetDevSpeed>
 80069a8:	e003      	b.n	80069b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069aa:	2103      	movs	r1, #3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f95b 	bl	8006c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069b2:	2110      	movs	r1, #16
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f8f3 	bl	8006ba0 <USB_FlushTxFifo>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f91f 	bl	8006c08 <USB_FlushRxFifo>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	461a      	mov	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e6:	461a      	mov	r2, r3
 80069e8:	2300      	movs	r3, #0
 80069ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	461a      	mov	r2, r3
 80069f4:	2300      	movs	r3, #0
 80069f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	e043      	b.n	8006a86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a14:	d118      	bne.n	8006a48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	e013      	b.n	8006a5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e008      	b.n	8006a5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a54:	461a      	mov	r2, r3
 8006a56:	2300      	movs	r3, #0
 8006a58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a66:	461a      	mov	r2, r3
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3301      	adds	r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d3b7      	bcc.n	80069fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	e043      	b.n	8006b1c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aaa:	d118      	bne.n	8006ade <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e013      	b.n	8006af0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e008      	b.n	8006af0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	461a      	mov	r2, r3
 8006aec:	2300      	movs	r3, #0
 8006aee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d3b7      	bcc.n	8006a94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f043 0210 	orr.w	r2, r3, #16
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699a      	ldr	r2, [r3, #24]
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <USB_DevInit+0x2b4>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f043 0208 	orr.w	r2, r3, #8
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d105      	bne.n	8006b88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <USB_DevInit+0x2b8>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b94:	b004      	add	sp, #16
 8006b96:	4770      	bx	lr
 8006b98:	803c3800 	.word	0x803c3800
 8006b9c:	40000004 	.word	0x40000004

08006ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <USB_FlushTxFifo+0x64>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e01b      	b.n	8006bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	daf2      	bge.n	8006bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	019b      	lsls	r3, r3, #6
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <USB_FlushTxFifo+0x64>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e006      	b.n	8006bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d0f0      	beq.n	8006bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	00030d40 	.word	0x00030d40

08006c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4a11      	ldr	r2, [pc, #68]	; (8006c64 <USB_FlushRxFifo+0x5c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d901      	bls.n	8006c26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e018      	b.n	8006c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	daf2      	bge.n	8006c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2210      	movs	r2, #16
 8006c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <USB_FlushRxFifo+0x5c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d901      	bls.n	8006c4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e006      	b.n	8006c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b10      	cmp	r3, #16
 8006c54:	d0f0      	beq.n	8006c38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	00030d40 	.word	0x00030d40

08006c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cb4:	f023 0303 	bic.w	r3, r3, #3
 8006cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc8:	f043 0302 	orr.w	r3, r3, #2
 8006ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3301      	adds	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <USB_CoreReset+0x64>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d901      	bls.n	8006d16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e01b      	b.n	8006d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	daf2      	bge.n	8006d04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f043 0201 	orr.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a09      	ldr	r2, [pc, #36]	; (8006d5c <USB_CoreReset+0x64>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d901      	bls.n	8006d40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e006      	b.n	8006d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d0f0      	beq.n	8006d2e <USB_CoreReset+0x36>

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	00030d40 	.word	0x00030d40

08006d60 <_Znwj>:
 8006d60:	2801      	cmp	r0, #1
 8006d62:	bf38      	it	cc
 8006d64:	2001      	movcc	r0, #1
 8006d66:	b510      	push	{r4, lr}
 8006d68:	4604      	mov	r4, r0
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 f81a 	bl	8006da4 <malloc>
 8006d70:	b100      	cbz	r0, 8006d74 <_Znwj+0x14>
 8006d72:	bd10      	pop	{r4, pc}
 8006d74:	f000 f806 	bl	8006d84 <_ZSt15get_new_handlerv>
 8006d78:	b908      	cbnz	r0, 8006d7e <_Znwj+0x1e>
 8006d7a:	f000 f80b 	bl	8006d94 <abort>
 8006d7e:	4780      	blx	r0
 8006d80:	e7f3      	b.n	8006d6a <_Znwj+0xa>
	...

08006d84 <_ZSt15get_new_handlerv>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <_ZSt15get_new_handlerv+0xc>)
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	f3bf 8f5b 	dmb	ish
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	240007d4 	.word	0x240007d4

08006d94 <abort>:
 8006d94:	b508      	push	{r3, lr}
 8006d96:	2006      	movs	r0, #6
 8006d98:	f000 f8e8 	bl	8006f6c <raise>
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	f7fa fb41 	bl	8001424 <_exit>
	...

08006da4 <malloc>:
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <malloc+0xc>)
 8006da6:	4601      	mov	r1, r0
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	f000 b823 	b.w	8006df4 <_malloc_r>
 8006dae:	bf00      	nop
 8006db0:	2400005c 	.word	0x2400005c

08006db4 <sbrk_aligned>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4e0e      	ldr	r6, [pc, #56]	; (8006df0 <sbrk_aligned+0x3c>)
 8006db8:	460c      	mov	r4, r1
 8006dba:	6831      	ldr	r1, [r6, #0]
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	b911      	cbnz	r1, 8006dc6 <sbrk_aligned+0x12>
 8006dc0:	f000 f8f0 	bl	8006fa4 <_sbrk_r>
 8006dc4:	6030      	str	r0, [r6, #0]
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 f8eb 	bl	8006fa4 <_sbrk_r>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	d00a      	beq.n	8006de8 <sbrk_aligned+0x34>
 8006dd2:	1cc4      	adds	r4, r0, #3
 8006dd4:	f024 0403 	bic.w	r4, r4, #3
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	d007      	beq.n	8006dec <sbrk_aligned+0x38>
 8006ddc:	1a21      	subs	r1, r4, r0
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 f8e0 	bl	8006fa4 <_sbrk_r>
 8006de4:	3001      	adds	r0, #1
 8006de6:	d101      	bne.n	8006dec <sbrk_aligned+0x38>
 8006de8:	f04f 34ff 	mov.w	r4, #4294967295
 8006dec:	4620      	mov	r0, r4
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	240007dc 	.word	0x240007dc

08006df4 <_malloc_r>:
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	1ccd      	adds	r5, r1, #3
 8006dfa:	f025 0503 	bic.w	r5, r5, #3
 8006dfe:	3508      	adds	r5, #8
 8006e00:	2d0c      	cmp	r5, #12
 8006e02:	bf38      	it	cc
 8006e04:	250c      	movcc	r5, #12
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	4607      	mov	r7, r0
 8006e0a:	db01      	blt.n	8006e10 <_malloc_r+0x1c>
 8006e0c:	42a9      	cmp	r1, r5
 8006e0e:	d905      	bls.n	8006e1c <_malloc_r+0x28>
 8006e10:	230c      	movs	r3, #12
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	2600      	movs	r6, #0
 8006e16:	4630      	mov	r0, r6
 8006e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ef0 <_malloc_r+0xfc>
 8006e20:	f000 f868 	bl	8006ef4 <__malloc_lock>
 8006e24:	f8d8 3000 	ldr.w	r3, [r8]
 8006e28:	461c      	mov	r4, r3
 8006e2a:	bb5c      	cbnz	r4, 8006e84 <_malloc_r+0x90>
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7ff ffc0 	bl	8006db4 <sbrk_aligned>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	4604      	mov	r4, r0
 8006e38:	d155      	bne.n	8006ee6 <_malloc_r+0xf2>
 8006e3a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e3e:	4626      	mov	r6, r4
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	d145      	bne.n	8006ed0 <_malloc_r+0xdc>
 8006e44:	2c00      	cmp	r4, #0
 8006e46:	d048      	beq.n	8006eda <_malloc_r+0xe6>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	eb04 0903 	add.w	r9, r4, r3
 8006e52:	f000 f8a7 	bl	8006fa4 <_sbrk_r>
 8006e56:	4581      	cmp	r9, r0
 8006e58:	d13f      	bne.n	8006eda <_malloc_r+0xe6>
 8006e5a:	6821      	ldr	r1, [r4, #0]
 8006e5c:	1a6d      	subs	r5, r5, r1
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4638      	mov	r0, r7
 8006e62:	f7ff ffa7 	bl	8006db4 <sbrk_aligned>
 8006e66:	3001      	adds	r0, #1
 8006e68:	d037      	beq.n	8006eda <_malloc_r+0xe6>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	442b      	add	r3, r5
 8006e6e:	6023      	str	r3, [r4, #0]
 8006e70:	f8d8 3000 	ldr.w	r3, [r8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d038      	beq.n	8006eea <_malloc_r+0xf6>
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	42a2      	cmp	r2, r4
 8006e7c:	d12b      	bne.n	8006ed6 <_malloc_r+0xe2>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	e00f      	b.n	8006ea4 <_malloc_r+0xb0>
 8006e84:	6822      	ldr	r2, [r4, #0]
 8006e86:	1b52      	subs	r2, r2, r5
 8006e88:	d41f      	bmi.n	8006eca <_malloc_r+0xd6>
 8006e8a:	2a0b      	cmp	r2, #11
 8006e8c:	d917      	bls.n	8006ebe <_malloc_r+0xca>
 8006e8e:	1961      	adds	r1, r4, r5
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	6025      	str	r5, [r4, #0]
 8006e94:	bf18      	it	ne
 8006e96:	6059      	strne	r1, [r3, #4]
 8006e98:	6863      	ldr	r3, [r4, #4]
 8006e9a:	bf08      	it	eq
 8006e9c:	f8c8 1000 	streq.w	r1, [r8]
 8006ea0:	5162      	str	r2, [r4, r5]
 8006ea2:	604b      	str	r3, [r1, #4]
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f104 060b 	add.w	r6, r4, #11
 8006eaa:	f000 f829 	bl	8006f00 <__malloc_unlock>
 8006eae:	f026 0607 	bic.w	r6, r6, #7
 8006eb2:	1d23      	adds	r3, r4, #4
 8006eb4:	1af2      	subs	r2, r6, r3
 8006eb6:	d0ae      	beq.n	8006e16 <_malloc_r+0x22>
 8006eb8:	1b9b      	subs	r3, r3, r6
 8006eba:	50a3      	str	r3, [r4, r2]
 8006ebc:	e7ab      	b.n	8006e16 <_malloc_r+0x22>
 8006ebe:	42a3      	cmp	r3, r4
 8006ec0:	6862      	ldr	r2, [r4, #4]
 8006ec2:	d1dd      	bne.n	8006e80 <_malloc_r+0x8c>
 8006ec4:	f8c8 2000 	str.w	r2, [r8]
 8006ec8:	e7ec      	b.n	8006ea4 <_malloc_r+0xb0>
 8006eca:	4623      	mov	r3, r4
 8006ecc:	6864      	ldr	r4, [r4, #4]
 8006ece:	e7ac      	b.n	8006e2a <_malloc_r+0x36>
 8006ed0:	4634      	mov	r4, r6
 8006ed2:	6876      	ldr	r6, [r6, #4]
 8006ed4:	e7b4      	b.n	8006e40 <_malloc_r+0x4c>
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	e7cc      	b.n	8006e74 <_malloc_r+0x80>
 8006eda:	230c      	movs	r3, #12
 8006edc:	603b      	str	r3, [r7, #0]
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f000 f80e 	bl	8006f00 <__malloc_unlock>
 8006ee4:	e797      	b.n	8006e16 <_malloc_r+0x22>
 8006ee6:	6025      	str	r5, [r4, #0]
 8006ee8:	e7dc      	b.n	8006ea4 <_malloc_r+0xb0>
 8006eea:	605b      	str	r3, [r3, #4]
 8006eec:	deff      	udf	#255	; 0xff
 8006eee:	bf00      	nop
 8006ef0:	240007d8 	.word	0x240007d8

08006ef4 <__malloc_lock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_lock+0x8>)
 8006ef6:	f000 b88f 	b.w	8007018 <__retarget_lock_acquire_recursive>
 8006efa:	bf00      	nop
 8006efc:	2400091c 	.word	0x2400091c

08006f00 <__malloc_unlock>:
 8006f00:	4801      	ldr	r0, [pc, #4]	; (8006f08 <__malloc_unlock+0x8>)
 8006f02:	f000 b88a 	b.w	800701a <__retarget_lock_release_recursive>
 8006f06:	bf00      	nop
 8006f08:	2400091c 	.word	0x2400091c

08006f0c <memset>:
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d100      	bne.n	8006f16 <memset+0xa>
 8006f14:	4770      	bx	lr
 8006f16:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1a:	e7f9      	b.n	8006f10 <memset+0x4>

08006f1c <_raise_r>:
 8006f1c:	291f      	cmp	r1, #31
 8006f1e:	b538      	push	{r3, r4, r5, lr}
 8006f20:	4604      	mov	r4, r0
 8006f22:	460d      	mov	r5, r1
 8006f24:	d904      	bls.n	8006f30 <_raise_r+0x14>
 8006f26:	2316      	movs	r3, #22
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f32:	b112      	cbz	r2, 8006f3a <_raise_r+0x1e>
 8006f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f38:	b94b      	cbnz	r3, 8006f4e <_raise_r+0x32>
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f830 	bl	8006fa0 <_getpid_r>
 8006f40:	462a      	mov	r2, r5
 8006f42:	4601      	mov	r1, r0
 8006f44:	4620      	mov	r0, r4
 8006f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f4a:	f000 b817 	b.w	8006f7c <_kill_r>
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d00a      	beq.n	8006f68 <_raise_r+0x4c>
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	d103      	bne.n	8006f5e <_raise_r+0x42>
 8006f56:	2316      	movs	r3, #22
 8006f58:	6003      	str	r3, [r0, #0]
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	e7e7      	b.n	8006f2e <_raise_r+0x12>
 8006f5e:	2400      	movs	r4, #0
 8006f60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f64:	4628      	mov	r0, r5
 8006f66:	4798      	blx	r3
 8006f68:	2000      	movs	r0, #0
 8006f6a:	e7e0      	b.n	8006f2e <_raise_r+0x12>

08006f6c <raise>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <raise+0xc>)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	f7ff bfd3 	b.w	8006f1c <_raise_r>
 8006f76:	bf00      	nop
 8006f78:	2400005c 	.word	0x2400005c

08006f7c <_kill_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d07      	ldr	r5, [pc, #28]	; (8006f9c <_kill_r+0x20>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	f7fa fa3b 	bl	8001404 <_kill>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	d102      	bne.n	8006f98 <_kill_r+0x1c>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	b103      	cbz	r3, 8006f98 <_kill_r+0x1c>
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	bd38      	pop	{r3, r4, r5, pc}
 8006f9a:	bf00      	nop
 8006f9c:	24000918 	.word	0x24000918

08006fa0 <_getpid_r>:
 8006fa0:	f7fa ba28 	b.w	80013f4 <_getpid>

08006fa4 <_sbrk_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d06      	ldr	r5, [pc, #24]	; (8006fc0 <_sbrk_r+0x1c>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	602b      	str	r3, [r5, #0]
 8006fb0:	f7fa fa42 	bl	8001438 <_sbrk>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_sbrk_r+0x1a>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_sbrk_r+0x1a>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	24000918 	.word	0x24000918

08006fc4 <__errno>:
 8006fc4:	4b01      	ldr	r3, [pc, #4]	; (8006fcc <__errno+0x8>)
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	2400005c 	.word	0x2400005c

08006fd0 <__libc_init_array>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4d0d      	ldr	r5, [pc, #52]	; (8007008 <__libc_init_array+0x38>)
 8006fd4:	4c0d      	ldr	r4, [pc, #52]	; (800700c <__libc_init_array+0x3c>)
 8006fd6:	1b64      	subs	r4, r4, r5
 8006fd8:	10a4      	asrs	r4, r4, #2
 8006fda:	2600      	movs	r6, #0
 8006fdc:	42a6      	cmp	r6, r4
 8006fde:	d109      	bne.n	8006ff4 <__libc_init_array+0x24>
 8006fe0:	4d0b      	ldr	r5, [pc, #44]	; (8007010 <__libc_init_array+0x40>)
 8006fe2:	4c0c      	ldr	r4, [pc, #48]	; (8007014 <__libc_init_array+0x44>)
 8006fe4:	f000 f81a 	bl	800701c <_init>
 8006fe8:	1b64      	subs	r4, r4, r5
 8006fea:	10a4      	asrs	r4, r4, #2
 8006fec:	2600      	movs	r6, #0
 8006fee:	42a6      	cmp	r6, r4
 8006ff0:	d105      	bne.n	8006ffe <__libc_init_array+0x2e>
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
 8006ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff8:	4798      	blx	r3
 8006ffa:	3601      	adds	r6, #1
 8006ffc:	e7ee      	b.n	8006fdc <__libc_init_array+0xc>
 8006ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007002:	4798      	blx	r3
 8007004:	3601      	adds	r6, #1
 8007006:	e7f2      	b.n	8006fee <__libc_init_array+0x1e>
 8007008:	08007074 	.word	0x08007074
 800700c:	08007074 	.word	0x08007074
 8007010:	08007074 	.word	0x08007074
 8007014:	08007078 	.word	0x08007078

08007018 <__retarget_lock_acquire_recursive>:
 8007018:	4770      	bx	lr

0800701a <__retarget_lock_release_recursive>:
 800701a:	4770      	bx	lr

0800701c <_init>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr

08007028 <_fini>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr
