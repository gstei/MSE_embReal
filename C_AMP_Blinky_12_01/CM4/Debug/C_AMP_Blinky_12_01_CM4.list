
C_AMP_Blinky_12_01_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e18  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  081010b0  081010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081010c0  081010c0  000110c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081010c4  081010c4  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081010c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000010  081010d8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000030  081010d8  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009d00  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000015bb  00000000  00000000  00029d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000710  00000000  00000000  0002b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000532  00000000  00000000  0002ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038813  00000000  00000000  0002bf82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000086ad  00000000  00000000  00064795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179ce2  00000000  00000000  0006ce42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001aec  00000000  00000000  001e6b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000a0  00000000  00000000  001e8610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08101098 	.word	0x08101098

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08101098 	.word	0x08101098

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b24      	ldr	r3, [pc, #144]	; (81003a0 <main+0x98>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a22      	ldr	r2, [pc, #136]	; (81003a0 <main+0x98>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b20      	ldr	r3, [pc, #128]	; (81003a0 <main+0x98>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fc7b 	bl	8100c28 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fd05 	bl	8100d40 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fc86 	bl	8100c4c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b18      	ldr	r3, [pc, #96]	; (81003a4 <main+0x9c>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b16      	ldr	r3, [pc, #88]	; (81003a8 <main+0xa0>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a14      	ldr	r2, [pc, #80]	; (81003a8 <main+0xa0>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b11      	ldr	r3, [pc, #68]	; (81003a8 <main+0xa0>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a10      	ldr	r2, [pc, #64]	; (81003a8 <main+0xa0>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f8c0 	bl	81004f4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 f81c 	bl	81003b0 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8100378:	2200      	movs	r2, #0
 810037a:	2102      	movs	r1, #2
 810037c:	480b      	ldr	r0, [pc, #44]	; (81003ac <main+0xa4>)
 810037e:	f000 fc39 	bl	8100bf4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8100382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100386:	f000 f969 	bl	810065c <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 810038a:	2201      	movs	r2, #1
 810038c:	2102      	movs	r1, #2
 810038e:	4807      	ldr	r0, [pc, #28]	; (81003ac <main+0xa4>)
 8100390:	f000 fc30 	bl	8100bf4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8100394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100398:	f000 f960 	bl	810065c <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 810039c:	e7ec      	b.n	8100378 <main+0x70>
 810039e:	bf00      	nop
 81003a0:	58024400 	.word	0x58024400
 81003a4:	e000ed00 	.word	0xe000ed00
 81003a8:	58026400 	.word	0x58026400
 81003ac:	58021000 	.word	0x58021000

081003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003b0:	b580      	push	{r7, lr}
 81003b2:	b086      	sub	sp, #24
 81003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003b6:	1d3b      	adds	r3, r7, #4
 81003b8:	2200      	movs	r2, #0
 81003ba:	601a      	str	r2, [r3, #0]
 81003bc:	605a      	str	r2, [r3, #4]
 81003be:	609a      	str	r2, [r3, #8]
 81003c0:	60da      	str	r2, [r3, #12]
 81003c2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81003c4:	4b12      	ldr	r3, [pc, #72]	; (8100410 <MX_GPIO_Init+0x60>)
 81003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003ca:	4a11      	ldr	r2, [pc, #68]	; (8100410 <MX_GPIO_Init+0x60>)
 81003cc:	f043 0310 	orr.w	r3, r3, #16
 81003d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003d4:	4b0e      	ldr	r3, [pc, #56]	; (8100410 <MX_GPIO_Init+0x60>)
 81003d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003da:	f003 0310 	and.w	r3, r3, #16
 81003de:	603b      	str	r3, [r7, #0]
 81003e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81003e2:	2200      	movs	r2, #0
 81003e4:	2102      	movs	r1, #2
 81003e6:	480b      	ldr	r0, [pc, #44]	; (8100414 <MX_GPIO_Init+0x64>)
 81003e8:	f000 fc04 	bl	8100bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81003ec:	2302      	movs	r3, #2
 81003ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81003f0:	2301      	movs	r3, #1
 81003f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81003f4:	2300      	movs	r3, #0
 81003f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81003f8:	2300      	movs	r3, #0
 81003fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81003fc:	1d3b      	adds	r3, r7, #4
 81003fe:	4619      	mov	r1, r3
 8100400:	4804      	ldr	r0, [pc, #16]	; (8100414 <MX_GPIO_Init+0x64>)
 8100402:	f000 fa47 	bl	8100894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100406:	bf00      	nop
 8100408:	3718      	adds	r7, #24
 810040a:	46bd      	mov	sp, r7
 810040c:	bd80      	pop	{r7, pc}
 810040e:	bf00      	nop
 8100410:	58024400 	.word	0x58024400
 8100414:	58021000 	.word	0x58021000

08100418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100418:	b480      	push	{r7}
 810041a:	b083      	sub	sp, #12
 810041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810041e:	4b0a      	ldr	r3, [pc, #40]	; (8100448 <HAL_MspInit+0x30>)
 8100420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100424:	4a08      	ldr	r2, [pc, #32]	; (8100448 <HAL_MspInit+0x30>)
 8100426:	f043 0302 	orr.w	r3, r3, #2
 810042a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810042e:	4b06      	ldr	r3, [pc, #24]	; (8100448 <HAL_MspInit+0x30>)
 8100430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100434:	f003 0302 	and.w	r3, r3, #2
 8100438:	607b      	str	r3, [r7, #4]
 810043a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810043c:	bf00      	nop
 810043e:	370c      	adds	r7, #12
 8100440:	46bd      	mov	sp, r7
 8100442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100446:	4770      	bx	lr
 8100448:	58024400 	.word	0x58024400

0810044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810044c:	b480      	push	{r7}
 810044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100450:	e7fe      	b.n	8100450 <NMI_Handler+0x4>

08100452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100452:	b480      	push	{r7}
 8100454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100456:	e7fe      	b.n	8100456 <HardFault_Handler+0x4>

08100458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100458:	b480      	push	{r7}
 810045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810045c:	e7fe      	b.n	810045c <MemManage_Handler+0x4>

0810045e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810045e:	b480      	push	{r7}
 8100460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100462:	e7fe      	b.n	8100462 <BusFault_Handler+0x4>

08100464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100464:	b480      	push	{r7}
 8100466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100468:	e7fe      	b.n	8100468 <UsageFault_Handler+0x4>

0810046a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810046a:	b480      	push	{r7}
 810046c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810046e:	bf00      	nop
 8100470:	46bd      	mov	sp, r7
 8100472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100476:	4770      	bx	lr

08100478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100478:	b480      	push	{r7}
 810047a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810047c:	bf00      	nop
 810047e:	46bd      	mov	sp, r7
 8100480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100484:	4770      	bx	lr

08100486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100486:	b480      	push	{r7}
 8100488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810048a:	bf00      	nop
 810048c:	46bd      	mov	sp, r7
 810048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100492:	4770      	bx	lr

08100494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100494:	b580      	push	{r7, lr}
 8100496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100498:	f000 f8c0 	bl	810061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810049c:	bf00      	nop
 810049e:	bd80      	pop	{r7, pc}

081004a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81004a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81004d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81004a4:	f7ff ff18 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81004a8:	480c      	ldr	r0, [pc, #48]	; (81004dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81004aa:	490d      	ldr	r1, [pc, #52]	; (81004e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81004ac:	4a0d      	ldr	r2, [pc, #52]	; (81004e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81004ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81004b0:	e002      	b.n	81004b8 <LoopCopyDataInit>

081004b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81004b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81004b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81004b6:	3304      	adds	r3, #4

081004b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81004b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81004ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81004bc:	d3f9      	bcc.n	81004b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81004be:	4a0a      	ldr	r2, [pc, #40]	; (81004e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81004c0:	4c0a      	ldr	r4, [pc, #40]	; (81004ec <LoopFillZerobss+0x22>)
  movs r3, #0
 81004c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81004c4:	e001      	b.n	81004ca <LoopFillZerobss>

081004c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81004c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81004c8:	3204      	adds	r2, #4

081004ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81004ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81004cc:	d3fb      	bcc.n	81004c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81004ce:	f000 fdbf 	bl	8101050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81004d2:	f7ff ff19 	bl	8100308 <main>
  bx  lr
 81004d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81004d8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004dc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004e0:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81004e4:	081010c8 	.word	0x081010c8
  ldr r2, =_sbss
 81004e8:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81004ec:	10000030 	.word	0x10000030

081004f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81004f0:	e7fe      	b.n	81004f0 <ADC3_IRQHandler>
	...

081004f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81004f4:	b580      	push	{r7, lr}
 81004f6:	b082      	sub	sp, #8
 81004f8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81004fa:	4b28      	ldr	r3, [pc, #160]	; (810059c <HAL_Init+0xa8>)
 81004fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100500:	4a26      	ldr	r2, [pc, #152]	; (810059c <HAL_Init+0xa8>)
 8100502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100506:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810050a:	4b24      	ldr	r3, [pc, #144]	; (810059c <HAL_Init+0xa8>)
 810050c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100514:	603b      	str	r3, [r7, #0]
 8100516:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100518:	4b21      	ldr	r3, [pc, #132]	; (81005a0 <HAL_Init+0xac>)
 810051a:	681b      	ldr	r3, [r3, #0]
 810051c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100520:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100524:	4a1e      	ldr	r2, [pc, #120]	; (81005a0 <HAL_Init+0xac>)
 8100526:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810052a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810052c:	4b1c      	ldr	r3, [pc, #112]	; (81005a0 <HAL_Init+0xac>)
 810052e:	681b      	ldr	r3, [r3, #0]
 8100530:	4a1b      	ldr	r2, [pc, #108]	; (81005a0 <HAL_Init+0xac>)
 8100532:	f043 0301 	orr.w	r3, r3, #1
 8100536:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100538:	2003      	movs	r0, #3
 810053a:	f000 f965 	bl	8100808 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810053e:	f000 fc0d 	bl	8100d5c <HAL_RCC_GetSysClockFreq>
 8100542:	4602      	mov	r2, r0
 8100544:	4b15      	ldr	r3, [pc, #84]	; (810059c <HAL_Init+0xa8>)
 8100546:	699b      	ldr	r3, [r3, #24]
 8100548:	0a1b      	lsrs	r3, r3, #8
 810054a:	f003 030f 	and.w	r3, r3, #15
 810054e:	4915      	ldr	r1, [pc, #84]	; (81005a4 <HAL_Init+0xb0>)
 8100550:	5ccb      	ldrb	r3, [r1, r3]
 8100552:	f003 031f 	and.w	r3, r3, #31
 8100556:	fa22 f303 	lsr.w	r3, r2, r3
 810055a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810055c:	4b0f      	ldr	r3, [pc, #60]	; (810059c <HAL_Init+0xa8>)
 810055e:	699b      	ldr	r3, [r3, #24]
 8100560:	f003 030f 	and.w	r3, r3, #15
 8100564:	4a0f      	ldr	r2, [pc, #60]	; (81005a4 <HAL_Init+0xb0>)
 8100566:	5cd3      	ldrb	r3, [r2, r3]
 8100568:	f003 031f 	and.w	r3, r3, #31
 810056c:	687a      	ldr	r2, [r7, #4]
 810056e:	fa22 f303 	lsr.w	r3, r2, r3
 8100572:	4a0d      	ldr	r2, [pc, #52]	; (81005a8 <HAL_Init+0xb4>)
 8100574:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100576:	4b0c      	ldr	r3, [pc, #48]	; (81005a8 <HAL_Init+0xb4>)
 8100578:	681b      	ldr	r3, [r3, #0]
 810057a:	4a0c      	ldr	r2, [pc, #48]	; (81005ac <HAL_Init+0xb8>)
 810057c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810057e:	2000      	movs	r0, #0
 8100580:	f000 f816 	bl	81005b0 <HAL_InitTick>
 8100584:	4603      	mov	r3, r0
 8100586:	2b00      	cmp	r3, #0
 8100588:	d001      	beq.n	810058e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810058a:	2301      	movs	r3, #1
 810058c:	e002      	b.n	8100594 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810058e:	f7ff ff43 	bl	8100418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100592:	2300      	movs	r3, #0
}
 8100594:	4618      	mov	r0, r3
 8100596:	3708      	adds	r7, #8
 8100598:	46bd      	mov	sp, r7
 810059a:	bd80      	pop	{r7, pc}
 810059c:	58024400 	.word	0x58024400
 81005a0:	40024400 	.word	0x40024400
 81005a4:	081010b0 	.word	0x081010b0
 81005a8:	10000004 	.word	0x10000004
 81005ac:	10000000 	.word	0x10000000

081005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81005b0:	b580      	push	{r7, lr}
 81005b2:	b082      	sub	sp, #8
 81005b4:	af00      	add	r7, sp, #0
 81005b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81005b8:	4b15      	ldr	r3, [pc, #84]	; (8100610 <HAL_InitTick+0x60>)
 81005ba:	781b      	ldrb	r3, [r3, #0]
 81005bc:	2b00      	cmp	r3, #0
 81005be:	d101      	bne.n	81005c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81005c0:	2301      	movs	r3, #1
 81005c2:	e021      	b.n	8100608 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81005c4:	4b13      	ldr	r3, [pc, #76]	; (8100614 <HAL_InitTick+0x64>)
 81005c6:	681a      	ldr	r2, [r3, #0]
 81005c8:	4b11      	ldr	r3, [pc, #68]	; (8100610 <HAL_InitTick+0x60>)
 81005ca:	781b      	ldrb	r3, [r3, #0]
 81005cc:	4619      	mov	r1, r3
 81005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 81005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 81005da:	4618      	mov	r0, r3
 81005dc:	f000 f939 	bl	8100852 <HAL_SYSTICK_Config>
 81005e0:	4603      	mov	r3, r0
 81005e2:	2b00      	cmp	r3, #0
 81005e4:	d001      	beq.n	81005ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81005e6:	2301      	movs	r3, #1
 81005e8:	e00e      	b.n	8100608 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81005ea:	687b      	ldr	r3, [r7, #4]
 81005ec:	2b0f      	cmp	r3, #15
 81005ee:	d80a      	bhi.n	8100606 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81005f0:	2200      	movs	r2, #0
 81005f2:	6879      	ldr	r1, [r7, #4]
 81005f4:	f04f 30ff 	mov.w	r0, #4294967295
 81005f8:	f000 f911 	bl	810081e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81005fc:	4a06      	ldr	r2, [pc, #24]	; (8100618 <HAL_InitTick+0x68>)
 81005fe:	687b      	ldr	r3, [r7, #4]
 8100600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100602:	2300      	movs	r3, #0
 8100604:	e000      	b.n	8100608 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100606:	2301      	movs	r3, #1
}
 8100608:	4618      	mov	r0, r3
 810060a:	3708      	adds	r7, #8
 810060c:	46bd      	mov	sp, r7
 810060e:	bd80      	pop	{r7, pc}
 8100610:	1000000c 	.word	0x1000000c
 8100614:	10000000 	.word	0x10000000
 8100618:	10000008 	.word	0x10000008

0810061c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810061c:	b480      	push	{r7}
 810061e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100620:	4b06      	ldr	r3, [pc, #24]	; (810063c <HAL_IncTick+0x20>)
 8100622:	781b      	ldrb	r3, [r3, #0]
 8100624:	461a      	mov	r2, r3
 8100626:	4b06      	ldr	r3, [pc, #24]	; (8100640 <HAL_IncTick+0x24>)
 8100628:	681b      	ldr	r3, [r3, #0]
 810062a:	4413      	add	r3, r2
 810062c:	4a04      	ldr	r2, [pc, #16]	; (8100640 <HAL_IncTick+0x24>)
 810062e:	6013      	str	r3, [r2, #0]
}
 8100630:	bf00      	nop
 8100632:	46bd      	mov	sp, r7
 8100634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100638:	4770      	bx	lr
 810063a:	bf00      	nop
 810063c:	1000000c 	.word	0x1000000c
 8100640:	1000002c 	.word	0x1000002c

08100644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100644:	b480      	push	{r7}
 8100646:	af00      	add	r7, sp, #0
  return uwTick;
 8100648:	4b03      	ldr	r3, [pc, #12]	; (8100658 <HAL_GetTick+0x14>)
 810064a:	681b      	ldr	r3, [r3, #0]
}
 810064c:	4618      	mov	r0, r3
 810064e:	46bd      	mov	sp, r7
 8100650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100654:	4770      	bx	lr
 8100656:	bf00      	nop
 8100658:	1000002c 	.word	0x1000002c

0810065c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810065c:	b580      	push	{r7, lr}
 810065e:	b084      	sub	sp, #16
 8100660:	af00      	add	r7, sp, #0
 8100662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100664:	f7ff ffee 	bl	8100644 <HAL_GetTick>
 8100668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810066a:	687b      	ldr	r3, [r7, #4]
 810066c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810066e:	68fb      	ldr	r3, [r7, #12]
 8100670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100674:	d005      	beq.n	8100682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100676:	4b0a      	ldr	r3, [pc, #40]	; (81006a0 <HAL_Delay+0x44>)
 8100678:	781b      	ldrb	r3, [r3, #0]
 810067a:	461a      	mov	r2, r3
 810067c:	68fb      	ldr	r3, [r7, #12]
 810067e:	4413      	add	r3, r2
 8100680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100682:	bf00      	nop
 8100684:	f7ff ffde 	bl	8100644 <HAL_GetTick>
 8100688:	4602      	mov	r2, r0
 810068a:	68bb      	ldr	r3, [r7, #8]
 810068c:	1ad3      	subs	r3, r2, r3
 810068e:	68fa      	ldr	r2, [r7, #12]
 8100690:	429a      	cmp	r2, r3
 8100692:	d8f7      	bhi.n	8100684 <HAL_Delay+0x28>
  {
  }
}
 8100694:	bf00      	nop
 8100696:	bf00      	nop
 8100698:	3710      	adds	r7, #16
 810069a:	46bd      	mov	sp, r7
 810069c:	bd80      	pop	{r7, pc}
 810069e:	bf00      	nop
 81006a0:	1000000c 	.word	0x1000000c

081006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006a4:	b480      	push	{r7}
 81006a6:	b085      	sub	sp, #20
 81006a8:	af00      	add	r7, sp, #0
 81006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81006ac:	687b      	ldr	r3, [r7, #4]
 81006ae:	f003 0307 	and.w	r3, r3, #7
 81006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81006b4:	4b0c      	ldr	r3, [pc, #48]	; (81006e8 <__NVIC_SetPriorityGrouping+0x44>)
 81006b6:	68db      	ldr	r3, [r3, #12]
 81006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81006ba:	68ba      	ldr	r2, [r7, #8]
 81006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81006c0:	4013      	ands	r3, r2
 81006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81006c4:	68fb      	ldr	r3, [r7, #12]
 81006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006c8:	68bb      	ldr	r3, [r7, #8]
 81006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006d6:	4a04      	ldr	r2, [pc, #16]	; (81006e8 <__NVIC_SetPriorityGrouping+0x44>)
 81006d8:	68bb      	ldr	r3, [r7, #8]
 81006da:	60d3      	str	r3, [r2, #12]
}
 81006dc:	bf00      	nop
 81006de:	3714      	adds	r7, #20
 81006e0:	46bd      	mov	sp, r7
 81006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e6:	4770      	bx	lr
 81006e8:	e000ed00 	.word	0xe000ed00

081006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006ec:	b480      	push	{r7}
 81006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006f0:	4b04      	ldr	r3, [pc, #16]	; (8100704 <__NVIC_GetPriorityGrouping+0x18>)
 81006f2:	68db      	ldr	r3, [r3, #12]
 81006f4:	0a1b      	lsrs	r3, r3, #8
 81006f6:	f003 0307 	and.w	r3, r3, #7
}
 81006fa:	4618      	mov	r0, r3
 81006fc:	46bd      	mov	sp, r7
 81006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100702:	4770      	bx	lr
 8100704:	e000ed00 	.word	0xe000ed00

08100708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100708:	b480      	push	{r7}
 810070a:	b083      	sub	sp, #12
 810070c:	af00      	add	r7, sp, #0
 810070e:	4603      	mov	r3, r0
 8100710:	6039      	str	r1, [r7, #0]
 8100712:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100718:	2b00      	cmp	r3, #0
 810071a:	db0a      	blt.n	8100732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810071c:	683b      	ldr	r3, [r7, #0]
 810071e:	b2da      	uxtb	r2, r3
 8100720:	490c      	ldr	r1, [pc, #48]	; (8100754 <__NVIC_SetPriority+0x4c>)
 8100722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100726:	0112      	lsls	r2, r2, #4
 8100728:	b2d2      	uxtb	r2, r2
 810072a:	440b      	add	r3, r1
 810072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100730:	e00a      	b.n	8100748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100732:	683b      	ldr	r3, [r7, #0]
 8100734:	b2da      	uxtb	r2, r3
 8100736:	4908      	ldr	r1, [pc, #32]	; (8100758 <__NVIC_SetPriority+0x50>)
 8100738:	88fb      	ldrh	r3, [r7, #6]
 810073a:	f003 030f 	and.w	r3, r3, #15
 810073e:	3b04      	subs	r3, #4
 8100740:	0112      	lsls	r2, r2, #4
 8100742:	b2d2      	uxtb	r2, r2
 8100744:	440b      	add	r3, r1
 8100746:	761a      	strb	r2, [r3, #24]
}
 8100748:	bf00      	nop
 810074a:	370c      	adds	r7, #12
 810074c:	46bd      	mov	sp, r7
 810074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100752:	4770      	bx	lr
 8100754:	e000e100 	.word	0xe000e100
 8100758:	e000ed00 	.word	0xe000ed00

0810075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810075c:	b480      	push	{r7}
 810075e:	b089      	sub	sp, #36	; 0x24
 8100760:	af00      	add	r7, sp, #0
 8100762:	60f8      	str	r0, [r7, #12]
 8100764:	60b9      	str	r1, [r7, #8]
 8100766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100768:	68fb      	ldr	r3, [r7, #12]
 810076a:	f003 0307 	and.w	r3, r3, #7
 810076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100770:	69fb      	ldr	r3, [r7, #28]
 8100772:	f1c3 0307 	rsb	r3, r3, #7
 8100776:	2b04      	cmp	r3, #4
 8100778:	bf28      	it	cs
 810077a:	2304      	movcs	r3, #4
 810077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810077e:	69fb      	ldr	r3, [r7, #28]
 8100780:	3304      	adds	r3, #4
 8100782:	2b06      	cmp	r3, #6
 8100784:	d902      	bls.n	810078c <NVIC_EncodePriority+0x30>
 8100786:	69fb      	ldr	r3, [r7, #28]
 8100788:	3b03      	subs	r3, #3
 810078a:	e000      	b.n	810078e <NVIC_EncodePriority+0x32>
 810078c:	2300      	movs	r3, #0
 810078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100790:	f04f 32ff 	mov.w	r2, #4294967295
 8100794:	69bb      	ldr	r3, [r7, #24]
 8100796:	fa02 f303 	lsl.w	r3, r2, r3
 810079a:	43da      	mvns	r2, r3
 810079c:	68bb      	ldr	r3, [r7, #8]
 810079e:	401a      	ands	r2, r3
 81007a0:	697b      	ldr	r3, [r7, #20]
 81007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81007a4:	f04f 31ff 	mov.w	r1, #4294967295
 81007a8:	697b      	ldr	r3, [r7, #20]
 81007aa:	fa01 f303 	lsl.w	r3, r1, r3
 81007ae:	43d9      	mvns	r1, r3
 81007b0:	687b      	ldr	r3, [r7, #4]
 81007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007b4:	4313      	orrs	r3, r2
         );
}
 81007b6:	4618      	mov	r0, r3
 81007b8:	3724      	adds	r7, #36	; 0x24
 81007ba:	46bd      	mov	sp, r7
 81007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c0:	4770      	bx	lr
	...

081007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81007c4:	b580      	push	{r7, lr}
 81007c6:	b082      	sub	sp, #8
 81007c8:	af00      	add	r7, sp, #0
 81007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81007cc:	687b      	ldr	r3, [r7, #4]
 81007ce:	3b01      	subs	r3, #1
 81007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81007d4:	d301      	bcc.n	81007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81007d6:	2301      	movs	r3, #1
 81007d8:	e00f      	b.n	81007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007da:	4a0a      	ldr	r2, [pc, #40]	; (8100804 <SysTick_Config+0x40>)
 81007dc:	687b      	ldr	r3, [r7, #4]
 81007de:	3b01      	subs	r3, #1
 81007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007e2:	210f      	movs	r1, #15
 81007e4:	f04f 30ff 	mov.w	r0, #4294967295
 81007e8:	f7ff ff8e 	bl	8100708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81007ec:	4b05      	ldr	r3, [pc, #20]	; (8100804 <SysTick_Config+0x40>)
 81007ee:	2200      	movs	r2, #0
 81007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81007f2:	4b04      	ldr	r3, [pc, #16]	; (8100804 <SysTick_Config+0x40>)
 81007f4:	2207      	movs	r2, #7
 81007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81007f8:	2300      	movs	r3, #0
}
 81007fa:	4618      	mov	r0, r3
 81007fc:	3708      	adds	r7, #8
 81007fe:	46bd      	mov	sp, r7
 8100800:	bd80      	pop	{r7, pc}
 8100802:	bf00      	nop
 8100804:	e000e010 	.word	0xe000e010

08100808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100808:	b580      	push	{r7, lr}
 810080a:	b082      	sub	sp, #8
 810080c:	af00      	add	r7, sp, #0
 810080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100810:	6878      	ldr	r0, [r7, #4]
 8100812:	f7ff ff47 	bl	81006a4 <__NVIC_SetPriorityGrouping>
}
 8100816:	bf00      	nop
 8100818:	3708      	adds	r7, #8
 810081a:	46bd      	mov	sp, r7
 810081c:	bd80      	pop	{r7, pc}

0810081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810081e:	b580      	push	{r7, lr}
 8100820:	b086      	sub	sp, #24
 8100822:	af00      	add	r7, sp, #0
 8100824:	4603      	mov	r3, r0
 8100826:	60b9      	str	r1, [r7, #8]
 8100828:	607a      	str	r2, [r7, #4]
 810082a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810082c:	f7ff ff5e 	bl	81006ec <__NVIC_GetPriorityGrouping>
 8100830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100832:	687a      	ldr	r2, [r7, #4]
 8100834:	68b9      	ldr	r1, [r7, #8]
 8100836:	6978      	ldr	r0, [r7, #20]
 8100838:	f7ff ff90 	bl	810075c <NVIC_EncodePriority>
 810083c:	4602      	mov	r2, r0
 810083e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100842:	4611      	mov	r1, r2
 8100844:	4618      	mov	r0, r3
 8100846:	f7ff ff5f 	bl	8100708 <__NVIC_SetPriority>
}
 810084a:	bf00      	nop
 810084c:	3718      	adds	r7, #24
 810084e:	46bd      	mov	sp, r7
 8100850:	bd80      	pop	{r7, pc}

08100852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100852:	b580      	push	{r7, lr}
 8100854:	b082      	sub	sp, #8
 8100856:	af00      	add	r7, sp, #0
 8100858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810085a:	6878      	ldr	r0, [r7, #4]
 810085c:	f7ff ffb2 	bl	81007c4 <SysTick_Config>
 8100860:	4603      	mov	r3, r0
}
 8100862:	4618      	mov	r0, r3
 8100864:	3708      	adds	r7, #8
 8100866:	46bd      	mov	sp, r7
 8100868:	bd80      	pop	{r7, pc}
	...

0810086c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810086c:	b480      	push	{r7}
 810086e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100870:	4b07      	ldr	r3, [pc, #28]	; (8100890 <HAL_GetCurrentCPUID+0x24>)
 8100872:	681b      	ldr	r3, [r3, #0]
 8100874:	091b      	lsrs	r3, r3, #4
 8100876:	f003 030f 	and.w	r3, r3, #15
 810087a:	2b07      	cmp	r3, #7
 810087c:	d101      	bne.n	8100882 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810087e:	2303      	movs	r3, #3
 8100880:	e000      	b.n	8100884 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100882:	2301      	movs	r3, #1
  }
}
 8100884:	4618      	mov	r0, r3
 8100886:	46bd      	mov	sp, r7
 8100888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810088c:	4770      	bx	lr
 810088e:	bf00      	nop
 8100890:	e000ed00 	.word	0xe000ed00

08100894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100894:	b480      	push	{r7}
 8100896:	b089      	sub	sp, #36	; 0x24
 8100898:	af00      	add	r7, sp, #0
 810089a:	6078      	str	r0, [r7, #4]
 810089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810089e:	2300      	movs	r3, #0
 81008a0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81008a2:	4b89      	ldr	r3, [pc, #548]	; (8100ac8 <HAL_GPIO_Init+0x234>)
 81008a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81008a6:	e194      	b.n	8100bd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81008a8:	683b      	ldr	r3, [r7, #0]
 81008aa:	681a      	ldr	r2, [r3, #0]
 81008ac:	2101      	movs	r1, #1
 81008ae:	69fb      	ldr	r3, [r7, #28]
 81008b0:	fa01 f303 	lsl.w	r3, r1, r3
 81008b4:	4013      	ands	r3, r2
 81008b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81008b8:	693b      	ldr	r3, [r7, #16]
 81008ba:	2b00      	cmp	r3, #0
 81008bc:	f000 8186 	beq.w	8100bcc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81008c0:	683b      	ldr	r3, [r7, #0]
 81008c2:	685b      	ldr	r3, [r3, #4]
 81008c4:	f003 0303 	and.w	r3, r3, #3
 81008c8:	2b01      	cmp	r3, #1
 81008ca:	d005      	beq.n	81008d8 <HAL_GPIO_Init+0x44>
 81008cc:	683b      	ldr	r3, [r7, #0]
 81008ce:	685b      	ldr	r3, [r3, #4]
 81008d0:	f003 0303 	and.w	r3, r3, #3
 81008d4:	2b02      	cmp	r3, #2
 81008d6:	d130      	bne.n	810093a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81008d8:	687b      	ldr	r3, [r7, #4]
 81008da:	689b      	ldr	r3, [r3, #8]
 81008dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81008de:	69fb      	ldr	r3, [r7, #28]
 81008e0:	005b      	lsls	r3, r3, #1
 81008e2:	2203      	movs	r2, #3
 81008e4:	fa02 f303 	lsl.w	r3, r2, r3
 81008e8:	43db      	mvns	r3, r3
 81008ea:	69ba      	ldr	r2, [r7, #24]
 81008ec:	4013      	ands	r3, r2
 81008ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81008f0:	683b      	ldr	r3, [r7, #0]
 81008f2:	68da      	ldr	r2, [r3, #12]
 81008f4:	69fb      	ldr	r3, [r7, #28]
 81008f6:	005b      	lsls	r3, r3, #1
 81008f8:	fa02 f303 	lsl.w	r3, r2, r3
 81008fc:	69ba      	ldr	r2, [r7, #24]
 81008fe:	4313      	orrs	r3, r2
 8100900:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100902:	687b      	ldr	r3, [r7, #4]
 8100904:	69ba      	ldr	r2, [r7, #24]
 8100906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100908:	687b      	ldr	r3, [r7, #4]
 810090a:	685b      	ldr	r3, [r3, #4]
 810090c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810090e:	2201      	movs	r2, #1
 8100910:	69fb      	ldr	r3, [r7, #28]
 8100912:	fa02 f303 	lsl.w	r3, r2, r3
 8100916:	43db      	mvns	r3, r3
 8100918:	69ba      	ldr	r2, [r7, #24]
 810091a:	4013      	ands	r3, r2
 810091c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810091e:	683b      	ldr	r3, [r7, #0]
 8100920:	685b      	ldr	r3, [r3, #4]
 8100922:	091b      	lsrs	r3, r3, #4
 8100924:	f003 0201 	and.w	r2, r3, #1
 8100928:	69fb      	ldr	r3, [r7, #28]
 810092a:	fa02 f303 	lsl.w	r3, r2, r3
 810092e:	69ba      	ldr	r2, [r7, #24]
 8100930:	4313      	orrs	r3, r2
 8100932:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100934:	687b      	ldr	r3, [r7, #4]
 8100936:	69ba      	ldr	r2, [r7, #24]
 8100938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810093a:	683b      	ldr	r3, [r7, #0]
 810093c:	685b      	ldr	r3, [r3, #4]
 810093e:	f003 0303 	and.w	r3, r3, #3
 8100942:	2b03      	cmp	r3, #3
 8100944:	d017      	beq.n	8100976 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100946:	687b      	ldr	r3, [r7, #4]
 8100948:	68db      	ldr	r3, [r3, #12]
 810094a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810094c:	69fb      	ldr	r3, [r7, #28]
 810094e:	005b      	lsls	r3, r3, #1
 8100950:	2203      	movs	r2, #3
 8100952:	fa02 f303 	lsl.w	r3, r2, r3
 8100956:	43db      	mvns	r3, r3
 8100958:	69ba      	ldr	r2, [r7, #24]
 810095a:	4013      	ands	r3, r2
 810095c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810095e:	683b      	ldr	r3, [r7, #0]
 8100960:	689a      	ldr	r2, [r3, #8]
 8100962:	69fb      	ldr	r3, [r7, #28]
 8100964:	005b      	lsls	r3, r3, #1
 8100966:	fa02 f303 	lsl.w	r3, r2, r3
 810096a:	69ba      	ldr	r2, [r7, #24]
 810096c:	4313      	orrs	r3, r2
 810096e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100970:	687b      	ldr	r3, [r7, #4]
 8100972:	69ba      	ldr	r2, [r7, #24]
 8100974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100976:	683b      	ldr	r3, [r7, #0]
 8100978:	685b      	ldr	r3, [r3, #4]
 810097a:	f003 0303 	and.w	r3, r3, #3
 810097e:	2b02      	cmp	r3, #2
 8100980:	d123      	bne.n	81009ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100982:	69fb      	ldr	r3, [r7, #28]
 8100984:	08da      	lsrs	r2, r3, #3
 8100986:	687b      	ldr	r3, [r7, #4]
 8100988:	3208      	adds	r2, #8
 810098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100990:	69fb      	ldr	r3, [r7, #28]
 8100992:	f003 0307 	and.w	r3, r3, #7
 8100996:	009b      	lsls	r3, r3, #2
 8100998:	220f      	movs	r2, #15
 810099a:	fa02 f303 	lsl.w	r3, r2, r3
 810099e:	43db      	mvns	r3, r3
 81009a0:	69ba      	ldr	r2, [r7, #24]
 81009a2:	4013      	ands	r3, r2
 81009a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81009a6:	683b      	ldr	r3, [r7, #0]
 81009a8:	691a      	ldr	r2, [r3, #16]
 81009aa:	69fb      	ldr	r3, [r7, #28]
 81009ac:	f003 0307 	and.w	r3, r3, #7
 81009b0:	009b      	lsls	r3, r3, #2
 81009b2:	fa02 f303 	lsl.w	r3, r2, r3
 81009b6:	69ba      	ldr	r2, [r7, #24]
 81009b8:	4313      	orrs	r3, r2
 81009ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81009bc:	69fb      	ldr	r3, [r7, #28]
 81009be:	08da      	lsrs	r2, r3, #3
 81009c0:	687b      	ldr	r3, [r7, #4]
 81009c2:	3208      	adds	r2, #8
 81009c4:	69b9      	ldr	r1, [r7, #24]
 81009c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81009ca:	687b      	ldr	r3, [r7, #4]
 81009cc:	681b      	ldr	r3, [r3, #0]
 81009ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81009d0:	69fb      	ldr	r3, [r7, #28]
 81009d2:	005b      	lsls	r3, r3, #1
 81009d4:	2203      	movs	r2, #3
 81009d6:	fa02 f303 	lsl.w	r3, r2, r3
 81009da:	43db      	mvns	r3, r3
 81009dc:	69ba      	ldr	r2, [r7, #24]
 81009de:	4013      	ands	r3, r2
 81009e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81009e2:	683b      	ldr	r3, [r7, #0]
 81009e4:	685b      	ldr	r3, [r3, #4]
 81009e6:	f003 0203 	and.w	r2, r3, #3
 81009ea:	69fb      	ldr	r3, [r7, #28]
 81009ec:	005b      	lsls	r3, r3, #1
 81009ee:	fa02 f303 	lsl.w	r3, r2, r3
 81009f2:	69ba      	ldr	r2, [r7, #24]
 81009f4:	4313      	orrs	r3, r2
 81009f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81009f8:	687b      	ldr	r3, [r7, #4]
 81009fa:	69ba      	ldr	r2, [r7, #24]
 81009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81009fe:	683b      	ldr	r3, [r7, #0]
 8100a00:	685b      	ldr	r3, [r3, #4]
 8100a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100a06:	2b00      	cmp	r3, #0
 8100a08:	f000 80e0 	beq.w	8100bcc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a0c:	4b2f      	ldr	r3, [pc, #188]	; (8100acc <HAL_GPIO_Init+0x238>)
 8100a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a12:	4a2e      	ldr	r2, [pc, #184]	; (8100acc <HAL_GPIO_Init+0x238>)
 8100a14:	f043 0302 	orr.w	r3, r3, #2
 8100a18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100a1c:	4b2b      	ldr	r3, [pc, #172]	; (8100acc <HAL_GPIO_Init+0x238>)
 8100a1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a22:	f003 0302 	and.w	r3, r3, #2
 8100a26:	60fb      	str	r3, [r7, #12]
 8100a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100a2a:	4a29      	ldr	r2, [pc, #164]	; (8100ad0 <HAL_GPIO_Init+0x23c>)
 8100a2c:	69fb      	ldr	r3, [r7, #28]
 8100a2e:	089b      	lsrs	r3, r3, #2
 8100a30:	3302      	adds	r3, #2
 8100a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100a38:	69fb      	ldr	r3, [r7, #28]
 8100a3a:	f003 0303 	and.w	r3, r3, #3
 8100a3e:	009b      	lsls	r3, r3, #2
 8100a40:	220f      	movs	r2, #15
 8100a42:	fa02 f303 	lsl.w	r3, r2, r3
 8100a46:	43db      	mvns	r3, r3
 8100a48:	69ba      	ldr	r2, [r7, #24]
 8100a4a:	4013      	ands	r3, r2
 8100a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100a4e:	687b      	ldr	r3, [r7, #4]
 8100a50:	4a20      	ldr	r2, [pc, #128]	; (8100ad4 <HAL_GPIO_Init+0x240>)
 8100a52:	4293      	cmp	r3, r2
 8100a54:	d052      	beq.n	8100afc <HAL_GPIO_Init+0x268>
 8100a56:	687b      	ldr	r3, [r7, #4]
 8100a58:	4a1f      	ldr	r2, [pc, #124]	; (8100ad8 <HAL_GPIO_Init+0x244>)
 8100a5a:	4293      	cmp	r3, r2
 8100a5c:	d031      	beq.n	8100ac2 <HAL_GPIO_Init+0x22e>
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	4a1e      	ldr	r2, [pc, #120]	; (8100adc <HAL_GPIO_Init+0x248>)
 8100a62:	4293      	cmp	r3, r2
 8100a64:	d02b      	beq.n	8100abe <HAL_GPIO_Init+0x22a>
 8100a66:	687b      	ldr	r3, [r7, #4]
 8100a68:	4a1d      	ldr	r2, [pc, #116]	; (8100ae0 <HAL_GPIO_Init+0x24c>)
 8100a6a:	4293      	cmp	r3, r2
 8100a6c:	d025      	beq.n	8100aba <HAL_GPIO_Init+0x226>
 8100a6e:	687b      	ldr	r3, [r7, #4]
 8100a70:	4a1c      	ldr	r2, [pc, #112]	; (8100ae4 <HAL_GPIO_Init+0x250>)
 8100a72:	4293      	cmp	r3, r2
 8100a74:	d01f      	beq.n	8100ab6 <HAL_GPIO_Init+0x222>
 8100a76:	687b      	ldr	r3, [r7, #4]
 8100a78:	4a1b      	ldr	r2, [pc, #108]	; (8100ae8 <HAL_GPIO_Init+0x254>)
 8100a7a:	4293      	cmp	r3, r2
 8100a7c:	d019      	beq.n	8100ab2 <HAL_GPIO_Init+0x21e>
 8100a7e:	687b      	ldr	r3, [r7, #4]
 8100a80:	4a1a      	ldr	r2, [pc, #104]	; (8100aec <HAL_GPIO_Init+0x258>)
 8100a82:	4293      	cmp	r3, r2
 8100a84:	d013      	beq.n	8100aae <HAL_GPIO_Init+0x21a>
 8100a86:	687b      	ldr	r3, [r7, #4]
 8100a88:	4a19      	ldr	r2, [pc, #100]	; (8100af0 <HAL_GPIO_Init+0x25c>)
 8100a8a:	4293      	cmp	r3, r2
 8100a8c:	d00d      	beq.n	8100aaa <HAL_GPIO_Init+0x216>
 8100a8e:	687b      	ldr	r3, [r7, #4]
 8100a90:	4a18      	ldr	r2, [pc, #96]	; (8100af4 <HAL_GPIO_Init+0x260>)
 8100a92:	4293      	cmp	r3, r2
 8100a94:	d007      	beq.n	8100aa6 <HAL_GPIO_Init+0x212>
 8100a96:	687b      	ldr	r3, [r7, #4]
 8100a98:	4a17      	ldr	r2, [pc, #92]	; (8100af8 <HAL_GPIO_Init+0x264>)
 8100a9a:	4293      	cmp	r3, r2
 8100a9c:	d101      	bne.n	8100aa2 <HAL_GPIO_Init+0x20e>
 8100a9e:	2309      	movs	r3, #9
 8100aa0:	e02d      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100aa2:	230a      	movs	r3, #10
 8100aa4:	e02b      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100aa6:	2308      	movs	r3, #8
 8100aa8:	e029      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100aaa:	2307      	movs	r3, #7
 8100aac:	e027      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100aae:	2306      	movs	r3, #6
 8100ab0:	e025      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100ab2:	2305      	movs	r3, #5
 8100ab4:	e023      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100ab6:	2304      	movs	r3, #4
 8100ab8:	e021      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100aba:	2303      	movs	r3, #3
 8100abc:	e01f      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100abe:	2302      	movs	r3, #2
 8100ac0:	e01d      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100ac2:	2301      	movs	r3, #1
 8100ac4:	e01b      	b.n	8100afe <HAL_GPIO_Init+0x26a>
 8100ac6:	bf00      	nop
 8100ac8:	580000c0 	.word	0x580000c0
 8100acc:	58024400 	.word	0x58024400
 8100ad0:	58000400 	.word	0x58000400
 8100ad4:	58020000 	.word	0x58020000
 8100ad8:	58020400 	.word	0x58020400
 8100adc:	58020800 	.word	0x58020800
 8100ae0:	58020c00 	.word	0x58020c00
 8100ae4:	58021000 	.word	0x58021000
 8100ae8:	58021400 	.word	0x58021400
 8100aec:	58021800 	.word	0x58021800
 8100af0:	58021c00 	.word	0x58021c00
 8100af4:	58022000 	.word	0x58022000
 8100af8:	58022400 	.word	0x58022400
 8100afc:	2300      	movs	r3, #0
 8100afe:	69fa      	ldr	r2, [r7, #28]
 8100b00:	f002 0203 	and.w	r2, r2, #3
 8100b04:	0092      	lsls	r2, r2, #2
 8100b06:	4093      	lsls	r3, r2
 8100b08:	69ba      	ldr	r2, [r7, #24]
 8100b0a:	4313      	orrs	r3, r2
 8100b0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100b0e:	4938      	ldr	r1, [pc, #224]	; (8100bf0 <HAL_GPIO_Init+0x35c>)
 8100b10:	69fb      	ldr	r3, [r7, #28]
 8100b12:	089b      	lsrs	r3, r3, #2
 8100b14:	3302      	adds	r3, #2
 8100b16:	69ba      	ldr	r2, [r7, #24]
 8100b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100b20:	681b      	ldr	r3, [r3, #0]
 8100b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b24:	693b      	ldr	r3, [r7, #16]
 8100b26:	43db      	mvns	r3, r3
 8100b28:	69ba      	ldr	r2, [r7, #24]
 8100b2a:	4013      	ands	r3, r2
 8100b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100b2e:	683b      	ldr	r3, [r7, #0]
 8100b30:	685b      	ldr	r3, [r3, #4]
 8100b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100b36:	2b00      	cmp	r3, #0
 8100b38:	d003      	beq.n	8100b42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100b3a:	69ba      	ldr	r2, [r7, #24]
 8100b3c:	693b      	ldr	r3, [r7, #16]
 8100b3e:	4313      	orrs	r3, r2
 8100b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100b46:	69bb      	ldr	r3, [r7, #24]
 8100b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100b4e:	685b      	ldr	r3, [r3, #4]
 8100b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b52:	693b      	ldr	r3, [r7, #16]
 8100b54:	43db      	mvns	r3, r3
 8100b56:	69ba      	ldr	r2, [r7, #24]
 8100b58:	4013      	ands	r3, r2
 8100b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100b5c:	683b      	ldr	r3, [r7, #0]
 8100b5e:	685b      	ldr	r3, [r3, #4]
 8100b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100b64:	2b00      	cmp	r3, #0
 8100b66:	d003      	beq.n	8100b70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100b68:	69ba      	ldr	r2, [r7, #24]
 8100b6a:	693b      	ldr	r3, [r7, #16]
 8100b6c:	4313      	orrs	r3, r2
 8100b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100b74:	69bb      	ldr	r3, [r7, #24]
 8100b76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100b78:	697b      	ldr	r3, [r7, #20]
 8100b7a:	685b      	ldr	r3, [r3, #4]
 8100b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b7e:	693b      	ldr	r3, [r7, #16]
 8100b80:	43db      	mvns	r3, r3
 8100b82:	69ba      	ldr	r2, [r7, #24]
 8100b84:	4013      	ands	r3, r2
 8100b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100b88:	683b      	ldr	r3, [r7, #0]
 8100b8a:	685b      	ldr	r3, [r3, #4]
 8100b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100b90:	2b00      	cmp	r3, #0
 8100b92:	d003      	beq.n	8100b9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100b94:	69ba      	ldr	r2, [r7, #24]
 8100b96:	693b      	ldr	r3, [r7, #16]
 8100b98:	4313      	orrs	r3, r2
 8100b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100b9c:	697b      	ldr	r3, [r7, #20]
 8100b9e:	69ba      	ldr	r2, [r7, #24]
 8100ba0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100ba2:	697b      	ldr	r3, [r7, #20]
 8100ba4:	681b      	ldr	r3, [r3, #0]
 8100ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ba8:	693b      	ldr	r3, [r7, #16]
 8100baa:	43db      	mvns	r3, r3
 8100bac:	69ba      	ldr	r2, [r7, #24]
 8100bae:	4013      	ands	r3, r2
 8100bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100bb2:	683b      	ldr	r3, [r7, #0]
 8100bb4:	685b      	ldr	r3, [r3, #4]
 8100bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100bba:	2b00      	cmp	r3, #0
 8100bbc:	d003      	beq.n	8100bc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100bbe:	69ba      	ldr	r2, [r7, #24]
 8100bc0:	693b      	ldr	r3, [r7, #16]
 8100bc2:	4313      	orrs	r3, r2
 8100bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100bc6:	697b      	ldr	r3, [r7, #20]
 8100bc8:	69ba      	ldr	r2, [r7, #24]
 8100bca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100bcc:	69fb      	ldr	r3, [r7, #28]
 8100bce:	3301      	adds	r3, #1
 8100bd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bd2:	683b      	ldr	r3, [r7, #0]
 8100bd4:	681a      	ldr	r2, [r3, #0]
 8100bd6:	69fb      	ldr	r3, [r7, #28]
 8100bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8100bdc:	2b00      	cmp	r3, #0
 8100bde:	f47f ae63 	bne.w	81008a8 <HAL_GPIO_Init+0x14>
  }
}
 8100be2:	bf00      	nop
 8100be4:	bf00      	nop
 8100be6:	3724      	adds	r7, #36	; 0x24
 8100be8:	46bd      	mov	sp, r7
 8100bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bee:	4770      	bx	lr
 8100bf0:	58000400 	.word	0x58000400

08100bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100bf4:	b480      	push	{r7}
 8100bf6:	b083      	sub	sp, #12
 8100bf8:	af00      	add	r7, sp, #0
 8100bfa:	6078      	str	r0, [r7, #4]
 8100bfc:	460b      	mov	r3, r1
 8100bfe:	807b      	strh	r3, [r7, #2]
 8100c00:	4613      	mov	r3, r2
 8100c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100c04:	787b      	ldrb	r3, [r7, #1]
 8100c06:	2b00      	cmp	r3, #0
 8100c08:	d003      	beq.n	8100c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100c0a:	887a      	ldrh	r2, [r7, #2]
 8100c0c:	687b      	ldr	r3, [r7, #4]
 8100c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100c10:	e003      	b.n	8100c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100c12:	887b      	ldrh	r3, [r7, #2]
 8100c14:	041a      	lsls	r2, r3, #16
 8100c16:	687b      	ldr	r3, [r7, #4]
 8100c18:	619a      	str	r2, [r3, #24]
}
 8100c1a:	bf00      	nop
 8100c1c:	370c      	adds	r7, #12
 8100c1e:	46bd      	mov	sp, r7
 8100c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c24:	4770      	bx	lr
	...

08100c28 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100c28:	b480      	push	{r7}
 8100c2a:	b083      	sub	sp, #12
 8100c2c:	af00      	add	r7, sp, #0
 8100c2e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100c30:	4b05      	ldr	r3, [pc, #20]	; (8100c48 <HAL_HSEM_ActivateNotification+0x20>)
 8100c32:	681a      	ldr	r2, [r3, #0]
 8100c34:	4904      	ldr	r1, [pc, #16]	; (8100c48 <HAL_HSEM_ActivateNotification+0x20>)
 8100c36:	687b      	ldr	r3, [r7, #4]
 8100c38:	4313      	orrs	r3, r2
 8100c3a:	600b      	str	r3, [r1, #0]
#endif
}
 8100c3c:	bf00      	nop
 8100c3e:	370c      	adds	r7, #12
 8100c40:	46bd      	mov	sp, r7
 8100c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c46:	4770      	bx	lr
 8100c48:	58026510 	.word	0x58026510

08100c4c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100c4c:	b580      	push	{r7, lr}
 8100c4e:	b084      	sub	sp, #16
 8100c50:	af00      	add	r7, sp, #0
 8100c52:	60f8      	str	r0, [r7, #12]
 8100c54:	460b      	mov	r3, r1
 8100c56:	607a      	str	r2, [r7, #4]
 8100c58:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100c5a:	4b37      	ldr	r3, [pc, #220]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c5c:	681b      	ldr	r3, [r3, #0]
 8100c5e:	f023 0201 	bic.w	r2, r3, #1
 8100c62:	4935      	ldr	r1, [pc, #212]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c64:	68fb      	ldr	r3, [r7, #12]
 8100c66:	4313      	orrs	r3, r2
 8100c68:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100c6a:	687b      	ldr	r3, [r7, #4]
 8100c6c:	2b00      	cmp	r3, #0
 8100c6e:	d123      	bne.n	8100cb8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100c70:	f7ff fdfc 	bl	810086c <HAL_GetCurrentCPUID>
 8100c74:	4603      	mov	r3, r0
 8100c76:	2b03      	cmp	r3, #3
 8100c78:	d158      	bne.n	8100d2c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100c7a:	4b2f      	ldr	r3, [pc, #188]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c7c:	691b      	ldr	r3, [r3, #16]
 8100c7e:	4a2e      	ldr	r2, [pc, #184]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c80:	f023 0301 	bic.w	r3, r3, #1
 8100c84:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100c86:	4b2d      	ldr	r3, [pc, #180]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c88:	691b      	ldr	r3, [r3, #16]
 8100c8a:	4a2c      	ldr	r2, [pc, #176]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c8c:	f043 0304 	orr.w	r3, r3, #4
 8100c90:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100c92:	f3bf 8f4f 	dsb	sy
}
 8100c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100c98:	f3bf 8f6f 	isb	sy
}
 8100c9c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100c9e:	7afb      	ldrb	r3, [r7, #11]
 8100ca0:	2b01      	cmp	r3, #1
 8100ca2:	d101      	bne.n	8100ca8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100ca4:	bf30      	wfi
 8100ca6:	e000      	b.n	8100caa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100ca8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100caa:	4b24      	ldr	r3, [pc, #144]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cac:	691b      	ldr	r3, [r3, #16]
 8100cae:	4a23      	ldr	r2, [pc, #140]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cb0:	f023 0304 	bic.w	r3, r3, #4
 8100cb4:	6113      	str	r3, [r2, #16]
 8100cb6:	e03c      	b.n	8100d32 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100cb8:	687b      	ldr	r3, [r7, #4]
 8100cba:	2b01      	cmp	r3, #1
 8100cbc:	d123      	bne.n	8100d06 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100cbe:	f7ff fdd5 	bl	810086c <HAL_GetCurrentCPUID>
 8100cc2:	4603      	mov	r3, r0
 8100cc4:	2b01      	cmp	r3, #1
 8100cc6:	d133      	bne.n	8100d30 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100cc8:	4b1b      	ldr	r3, [pc, #108]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cca:	695b      	ldr	r3, [r3, #20]
 8100ccc:	4a1a      	ldr	r2, [pc, #104]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cce:	f023 0302 	bic.w	r3, r3, #2
 8100cd2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100cd4:	4b19      	ldr	r3, [pc, #100]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cd6:	691b      	ldr	r3, [r3, #16]
 8100cd8:	4a18      	ldr	r2, [pc, #96]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cda:	f043 0304 	orr.w	r3, r3, #4
 8100cde:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100ce0:	f3bf 8f4f 	dsb	sy
}
 8100ce4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100ce6:	f3bf 8f6f 	isb	sy
}
 8100cea:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100cec:	7afb      	ldrb	r3, [r7, #11]
 8100cee:	2b01      	cmp	r3, #1
 8100cf0:	d101      	bne.n	8100cf6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100cf2:	bf30      	wfi
 8100cf4:	e000      	b.n	8100cf8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100cf6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100cf8:	4b10      	ldr	r3, [pc, #64]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cfa:	691b      	ldr	r3, [r3, #16]
 8100cfc:	4a0f      	ldr	r2, [pc, #60]	; (8100d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cfe:	f023 0304 	bic.w	r3, r3, #4
 8100d02:	6113      	str	r3, [r2, #16]
 8100d04:	e015      	b.n	8100d32 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d06:	f7ff fdb1 	bl	810086c <HAL_GetCurrentCPUID>
 8100d0a:	4603      	mov	r3, r0
 8100d0c:	2b03      	cmp	r3, #3
 8100d0e:	d106      	bne.n	8100d1e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100d10:	4b09      	ldr	r3, [pc, #36]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d12:	691b      	ldr	r3, [r3, #16]
 8100d14:	4a08      	ldr	r2, [pc, #32]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d16:	f023 0304 	bic.w	r3, r3, #4
 8100d1a:	6113      	str	r3, [r2, #16]
 8100d1c:	e009      	b.n	8100d32 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100d1e:	4b06      	ldr	r3, [pc, #24]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d20:	695b      	ldr	r3, [r3, #20]
 8100d22:	4a05      	ldr	r2, [pc, #20]	; (8100d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d24:	f023 0304 	bic.w	r3, r3, #4
 8100d28:	6153      	str	r3, [r2, #20]
 8100d2a:	e002      	b.n	8100d32 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100d2c:	bf00      	nop
 8100d2e:	e000      	b.n	8100d32 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100d30:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100d32:	3710      	adds	r7, #16
 8100d34:	46bd      	mov	sp, r7
 8100d36:	bd80      	pop	{r7, pc}
 8100d38:	58024800 	.word	0x58024800
 8100d3c:	e000ed00 	.word	0xe000ed00

08100d40 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100d40:	b580      	push	{r7, lr}
 8100d42:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d44:	f7ff fd92 	bl	810086c <HAL_GetCurrentCPUID>
 8100d48:	4603      	mov	r3, r0
 8100d4a:	2b03      	cmp	r3, #3
 8100d4c:	d101      	bne.n	8100d52 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100d4e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100d50:	e001      	b.n	8100d56 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100d52:	bf40      	sev
    __WFE ();
 8100d54:	bf20      	wfe
}
 8100d56:	bf00      	nop
 8100d58:	bd80      	pop	{r7, pc}
	...

08100d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100d5c:	b480      	push	{r7}
 8100d5e:	b089      	sub	sp, #36	; 0x24
 8100d60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100d62:	4bb3      	ldr	r3, [pc, #716]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d64:	691b      	ldr	r3, [r3, #16]
 8100d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100d6a:	2b18      	cmp	r3, #24
 8100d6c:	f200 8155 	bhi.w	810101a <HAL_RCC_GetSysClockFreq+0x2be>
 8100d70:	a201      	add	r2, pc, #4	; (adr r2, 8100d78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100d76:	bf00      	nop
 8100d78:	08100ddd 	.word	0x08100ddd
 8100d7c:	0810101b 	.word	0x0810101b
 8100d80:	0810101b 	.word	0x0810101b
 8100d84:	0810101b 	.word	0x0810101b
 8100d88:	0810101b 	.word	0x0810101b
 8100d8c:	0810101b 	.word	0x0810101b
 8100d90:	0810101b 	.word	0x0810101b
 8100d94:	0810101b 	.word	0x0810101b
 8100d98:	08100e03 	.word	0x08100e03
 8100d9c:	0810101b 	.word	0x0810101b
 8100da0:	0810101b 	.word	0x0810101b
 8100da4:	0810101b 	.word	0x0810101b
 8100da8:	0810101b 	.word	0x0810101b
 8100dac:	0810101b 	.word	0x0810101b
 8100db0:	0810101b 	.word	0x0810101b
 8100db4:	0810101b 	.word	0x0810101b
 8100db8:	08100e09 	.word	0x08100e09
 8100dbc:	0810101b 	.word	0x0810101b
 8100dc0:	0810101b 	.word	0x0810101b
 8100dc4:	0810101b 	.word	0x0810101b
 8100dc8:	0810101b 	.word	0x0810101b
 8100dcc:	0810101b 	.word	0x0810101b
 8100dd0:	0810101b 	.word	0x0810101b
 8100dd4:	0810101b 	.word	0x0810101b
 8100dd8:	08100e0f 	.word	0x08100e0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100ddc:	4b94      	ldr	r3, [pc, #592]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100dde:	681b      	ldr	r3, [r3, #0]
 8100de0:	f003 0320 	and.w	r3, r3, #32
 8100de4:	2b00      	cmp	r3, #0
 8100de6:	d009      	beq.n	8100dfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100de8:	4b91      	ldr	r3, [pc, #580]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100dea:	681b      	ldr	r3, [r3, #0]
 8100dec:	08db      	lsrs	r3, r3, #3
 8100dee:	f003 0303 	and.w	r3, r3, #3
 8100df2:	4a90      	ldr	r2, [pc, #576]	; (8101034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100df4:	fa22 f303 	lsr.w	r3, r2, r3
 8100df8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100dfa:	e111      	b.n	8101020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100dfc:	4b8d      	ldr	r3, [pc, #564]	; (8101034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100dfe:	61bb      	str	r3, [r7, #24]
      break;
 8100e00:	e10e      	b.n	8101020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100e02:	4b8d      	ldr	r3, [pc, #564]	; (8101038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100e04:	61bb      	str	r3, [r7, #24]
      break;
 8100e06:	e10b      	b.n	8101020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100e08:	4b8c      	ldr	r3, [pc, #560]	; (810103c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100e0a:	61bb      	str	r3, [r7, #24]
      break;
 8100e0c:	e108      	b.n	8101020 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100e0e:	4b88      	ldr	r3, [pc, #544]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100e12:	f003 0303 	and.w	r3, r3, #3
 8100e16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100e18:	4b85      	ldr	r3, [pc, #532]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100e1c:	091b      	lsrs	r3, r3, #4
 8100e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100e22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100e24:	4b82      	ldr	r3, [pc, #520]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100e28:	f003 0301 	and.w	r3, r3, #1
 8100e2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100e2e:	4b80      	ldr	r3, [pc, #512]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100e32:	08db      	lsrs	r3, r3, #3
 8100e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100e38:	68fa      	ldr	r2, [r7, #12]
 8100e3a:	fb02 f303 	mul.w	r3, r2, r3
 8100e3e:	ee07 3a90 	vmov	s15, r3
 8100e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100e46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100e4a:	693b      	ldr	r3, [r7, #16]
 8100e4c:	2b00      	cmp	r3, #0
 8100e4e:	f000 80e1 	beq.w	8101014 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100e52:	697b      	ldr	r3, [r7, #20]
 8100e54:	2b02      	cmp	r3, #2
 8100e56:	f000 8083 	beq.w	8100f60 <HAL_RCC_GetSysClockFreq+0x204>
 8100e5a:	697b      	ldr	r3, [r7, #20]
 8100e5c:	2b02      	cmp	r3, #2
 8100e5e:	f200 80a1 	bhi.w	8100fa4 <HAL_RCC_GetSysClockFreq+0x248>
 8100e62:	697b      	ldr	r3, [r7, #20]
 8100e64:	2b00      	cmp	r3, #0
 8100e66:	d003      	beq.n	8100e70 <HAL_RCC_GetSysClockFreq+0x114>
 8100e68:	697b      	ldr	r3, [r7, #20]
 8100e6a:	2b01      	cmp	r3, #1
 8100e6c:	d056      	beq.n	8100f1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8100e6e:	e099      	b.n	8100fa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100e70:	4b6f      	ldr	r3, [pc, #444]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e72:	681b      	ldr	r3, [r3, #0]
 8100e74:	f003 0320 	and.w	r3, r3, #32
 8100e78:	2b00      	cmp	r3, #0
 8100e7a:	d02d      	beq.n	8100ed8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100e7c:	4b6c      	ldr	r3, [pc, #432]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e7e:	681b      	ldr	r3, [r3, #0]
 8100e80:	08db      	lsrs	r3, r3, #3
 8100e82:	f003 0303 	and.w	r3, r3, #3
 8100e86:	4a6b      	ldr	r2, [pc, #428]	; (8101034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e88:	fa22 f303 	lsr.w	r3, r2, r3
 8100e8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100e8e:	687b      	ldr	r3, [r7, #4]
 8100e90:	ee07 3a90 	vmov	s15, r3
 8100e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100e98:	693b      	ldr	r3, [r7, #16]
 8100e9a:	ee07 3a90 	vmov	s15, r3
 8100e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ea6:	4b62      	ldr	r3, [pc, #392]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100eae:	ee07 3a90 	vmov	s15, r3
 8100eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100eba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100ed2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100ed6:	e087      	b.n	8100fe8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100ed8:	693b      	ldr	r3, [r7, #16]
 8100eda:	ee07 3a90 	vmov	s15, r3
 8100ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ee2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101044 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100eea:	4b51      	ldr	r3, [pc, #324]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ef2:	ee07 3a90 	vmov	s15, r3
 8100ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8100efe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100f1a:	e065      	b.n	8100fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f1c:	693b      	ldr	r3, [r7, #16]
 8100f1e:	ee07 3a90 	vmov	s15, r3
 8100f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f2e:	4b40      	ldr	r3, [pc, #256]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f36:	ee07 3a90 	vmov	s15, r3
 8100f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100f5e:	e043      	b.n	8100fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f60:	693b      	ldr	r3, [r7, #16]
 8100f62:	ee07 3a90 	vmov	s15, r3
 8100f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810104c <HAL_RCC_GetSysClockFreq+0x2f0>
 8100f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f72:	4b2f      	ldr	r3, [pc, #188]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f7a:	ee07 3a90 	vmov	s15, r3
 8100f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100fa2:	e021      	b.n	8100fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100fa4:	693b      	ldr	r3, [r7, #16]
 8100fa6:	ee07 3a90 	vmov	s15, r3
 8100faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fb6:	4b1e      	ldr	r3, [pc, #120]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fbe:	ee07 3a90 	vmov	s15, r3
 8100fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100fe6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100fe8:	4b11      	ldr	r3, [pc, #68]	; (8101030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fec:	0a5b      	lsrs	r3, r3, #9
 8100fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100ff2:	3301      	adds	r3, #1
 8100ff4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100ff6:	683b      	ldr	r3, [r7, #0]
 8100ff8:	ee07 3a90 	vmov	s15, r3
 8100ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101000:	edd7 6a07 	vldr	s13, [r7, #28]
 8101004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810100c:	ee17 3a90 	vmov	r3, s15
 8101010:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101012:	e005      	b.n	8101020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101014:	2300      	movs	r3, #0
 8101016:	61bb      	str	r3, [r7, #24]
      break;
 8101018:	e002      	b.n	8101020 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810101a:	4b07      	ldr	r3, [pc, #28]	; (8101038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810101c:	61bb      	str	r3, [r7, #24]
      break;
 810101e:	bf00      	nop
  }

  return sysclockfreq;
 8101020:	69bb      	ldr	r3, [r7, #24]
}
 8101022:	4618      	mov	r0, r3
 8101024:	3724      	adds	r7, #36	; 0x24
 8101026:	46bd      	mov	sp, r7
 8101028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810102c:	4770      	bx	lr
 810102e:	bf00      	nop
 8101030:	58024400 	.word	0x58024400
 8101034:	03d09000 	.word	0x03d09000
 8101038:	003d0900 	.word	0x003d0900
 810103c:	007a1200 	.word	0x007a1200
 8101040:	46000000 	.word	0x46000000
 8101044:	4c742400 	.word	0x4c742400
 8101048:	4a742400 	.word	0x4a742400
 810104c:	4af42400 	.word	0x4af42400

08101050 <__libc_init_array>:
 8101050:	b570      	push	{r4, r5, r6, lr}
 8101052:	4d0d      	ldr	r5, [pc, #52]	; (8101088 <__libc_init_array+0x38>)
 8101054:	4c0d      	ldr	r4, [pc, #52]	; (810108c <__libc_init_array+0x3c>)
 8101056:	1b64      	subs	r4, r4, r5
 8101058:	10a4      	asrs	r4, r4, #2
 810105a:	2600      	movs	r6, #0
 810105c:	42a6      	cmp	r6, r4
 810105e:	d109      	bne.n	8101074 <__libc_init_array+0x24>
 8101060:	4d0b      	ldr	r5, [pc, #44]	; (8101090 <__libc_init_array+0x40>)
 8101062:	4c0c      	ldr	r4, [pc, #48]	; (8101094 <__libc_init_array+0x44>)
 8101064:	f000 f818 	bl	8101098 <_init>
 8101068:	1b64      	subs	r4, r4, r5
 810106a:	10a4      	asrs	r4, r4, #2
 810106c:	2600      	movs	r6, #0
 810106e:	42a6      	cmp	r6, r4
 8101070:	d105      	bne.n	810107e <__libc_init_array+0x2e>
 8101072:	bd70      	pop	{r4, r5, r6, pc}
 8101074:	f855 3b04 	ldr.w	r3, [r5], #4
 8101078:	4798      	blx	r3
 810107a:	3601      	adds	r6, #1
 810107c:	e7ee      	b.n	810105c <__libc_init_array+0xc>
 810107e:	f855 3b04 	ldr.w	r3, [r5], #4
 8101082:	4798      	blx	r3
 8101084:	3601      	adds	r6, #1
 8101086:	e7f2      	b.n	810106e <__libc_init_array+0x1e>
 8101088:	081010c0 	.word	0x081010c0
 810108c:	081010c0 	.word	0x081010c0
 8101090:	081010c0 	.word	0x081010c0
 8101094:	081010c4 	.word	0x081010c4

08101098 <_init>:
 8101098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810109a:	bf00      	nop
 810109c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810109e:	bc08      	pop	{r3}
 81010a0:	469e      	mov	lr, r3
 81010a2:	4770      	bx	lr

081010a4 <_fini>:
 81010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81010a6:	bf00      	nop
 81010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81010aa:	bc08      	pop	{r3}
 81010ac:	469e      	mov	lr, r3
 81010ae:	4770      	bx	lr
