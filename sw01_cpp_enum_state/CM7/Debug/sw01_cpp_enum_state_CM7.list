
sw01_cpp_enum_state_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000685c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b2c  08006b2c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b34  08006b34  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006b4c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006bac  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006cc  240000d0  08006c0c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400079c  08006c0c  0002079c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001a29a  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002d34  00000000  00000000  0003a3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001090  00000000  00000000  0003d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000cbe  00000000  00000000  0003e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003e2c9  00000000  00000000  0003ee5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00016f30  00000000  00000000  0007d127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00182b4f  00000000  00000000  00094057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000459c  00000000  00000000  00216ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a1  00000000  00000000  0021b144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006adc 	.word	0x08006adc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006adc 	.word	0x08006adc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>:
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval TickstartTimerValue needed for check in expiration function
  */

void NoneBlockSystemTickDelay__DelayNoneBlockingInit(uint32_t *DelayNoneBlocking_tickstart, uint32_t *Delay)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	*DelayNoneBlocking_tickstart = HAL_GetTick();
 800070a:	f000 fead 	bl	8001468 <HAL_GetTick>
 800070e:	4602      	mov	r2, r0
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]

  /* Add a freq to guarantee minimum wait */
	  if (*Delay < 1)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d106      	bne.n	800072a <NoneBlockSystemTickDelay__DelayNoneBlockingInit+0x2a>
	  {
		  *Delay += (uint32_t)(uwTickFreq);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <NoneBlockSystemTickDelay__DelayNoneBlockingInit+0x34>)
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	441a      	add	r2, r3
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	601a      	str	r2, [r3, #0]
	  }
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2400000c 	.word	0x2400000c

08000738 <NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration>:
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */

uint8_t NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration(uint32_t DelayNoneBlocking_tickstart, uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  if ((HAL_GetTick() - DelayNoneBlocking_tickstart) < Delay)return(0); //time is not expired
 8000742:	f000 fe91 	bl	8001468 <HAL_GetTick>
 8000746:	4602      	mov	r2, r0
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration+0x1e>
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration+0x20>
  else return(0xFF);
 8000756:	23ff      	movs	r3, #255	; 0xff
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_Z17execStatemachine1v>:
uint32_t DelayLED2=0;
uint32_t TimerTickstartLED2=0;



void execStatemachine1(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	static uint8_t count=0;
	switch(statemachine_1){
 8000764:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <_Z17execStatemachine1v+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d056      	beq.n	800081a <_Z17execStatemachine1v+0xba>
 800076c:	2b02      	cmp	r3, #2
 800076e:	f300 808a 	bgt.w	8000886 <_Z17execStatemachine1v+0x126>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <_Z17execStatemachine1v+0x1c>
 8000776:	2b01      	cmp	r3, #1
 8000778:	d019      	beq.n	80007ae <_Z17execStatemachine1v+0x4e>
			}
		}
		break;

	default:
		break;
 800077a:	e084      	b.n	8000886 <_Z17execStatemachine1v+0x126>
		count = 0;
 800077c:	4b46      	ldr	r3, [pc, #280]	; (8000898 <_Z17execStatemachine1v+0x138>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
		DelayLED1=1000; //wait 1000ms
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <_Z17execStatemachine1v+0x13c>)
 8000784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000788:	601a      	str	r2, [r3, #0]
		TimerTickstartLED1=0;
 800078a:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
		NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED1,&DelayLED1);
 8000790:	4942      	ldr	r1, [pc, #264]	; (800089c <_Z17execStatemachine1v+0x13c>)
 8000792:	4843      	ldr	r0, [pc, #268]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 8000794:	f7ff ffb4 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000798:	2101      	movs	r1, #1
 800079a:	4842      	ldr	r0, [pc, #264]	; (80008a4 <_Z17execStatemachine1v+0x144>)
 800079c:	f001 fd85 	bl	80022aa <HAL_GPIO_TogglePin>
		count = 1;
 80007a0:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <_Z17execStatemachine1v+0x138>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
		statemachine_1 = states_sm1::BLINK_1HZ;
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <_Z17execStatemachine1v+0x134>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
		break;
 80007ac:	e070      	b.n	8000890 <_Z17execStatemachine1v+0x130>
		if(NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration(TimerTickstartLED1, DelayLED1)){
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a3a      	ldr	r2, [pc, #232]	; (800089c <_Z17execStatemachine1v+0x13c>)
 80007b4:	6812      	ldr	r2, [r2, #0]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffbd 	bl	8000738 <NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bf14      	ite	ne
 80007c4:	2301      	movne	r3, #1
 80007c6:	2300      	moveq	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d05d      	beq.n	800088a <_Z17execStatemachine1v+0x12a>
			if(count>((BLINKTIMES*2)-1)){
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <_Z17execStatemachine1v+0x138>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	d912      	bls.n	80007fc <_Z17execStatemachine1v+0x9c>
				  DelayLED1=333;
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <_Z17execStatemachine1v+0x13c>)
 80007d8:	f240 124d 	movw	r2, #333	; 0x14d
 80007dc:	601a      	str	r2, [r3, #0]
				  statemachine_1 = states_sm1::BLINK_3HZ;
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <_Z17execStatemachine1v+0x134>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED1,&DelayLED1);
 80007e4:	492d      	ldr	r1, [pc, #180]	; (800089c <_Z17execStatemachine1v+0x13c>)
 80007e6:	482e      	ldr	r0, [pc, #184]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 80007e8:	f7ff ff8a 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007ec:	2101      	movs	r1, #1
 80007ee:	482d      	ldr	r0, [pc, #180]	; (80008a4 <_Z17execStatemachine1v+0x144>)
 80007f0:	f001 fd5b 	bl	80022aa <HAL_GPIO_TogglePin>
				  count = 1;
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <_Z17execStatemachine1v+0x138>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
		break;
 80007fa:	e046      	b.n	800088a <_Z17execStatemachine1v+0x12a>
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED1,&DelayLED1);
 80007fc:	4927      	ldr	r1, [pc, #156]	; (800089c <_Z17execStatemachine1v+0x13c>)
 80007fe:	4828      	ldr	r0, [pc, #160]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 8000800:	f7ff ff7e 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000804:	2101      	movs	r1, #1
 8000806:	4827      	ldr	r0, [pc, #156]	; (80008a4 <_Z17execStatemachine1v+0x144>)
 8000808:	f001 fd4f 	bl	80022aa <HAL_GPIO_TogglePin>
				  count++;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <_Z17execStatemachine1v+0x138>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <_Z17execStatemachine1v+0x138>)
 8000816:	701a      	strb	r2, [r3, #0]
		break;
 8000818:	e037      	b.n	800088a <_Z17execStatemachine1v+0x12a>
		if(NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration(TimerTickstartLED1, DelayLED1)){
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <_Z17execStatemachine1v+0x13c>)
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff87 	bl	8000738 <NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d029      	beq.n	800088e <_Z17execStatemachine1v+0x12e>
			if(count>((BLINKTIMES*2)-1)){
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <_Z17execStatemachine1v+0x138>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b09      	cmp	r3, #9
 8000840:	d912      	bls.n	8000868 <_Z17execStatemachine1v+0x108>
				  DelayLED1=1000;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <_Z17execStatemachine1v+0x13c>)
 8000844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000848:	601a      	str	r2, [r3, #0]
				  statemachine_1 = states_sm1::BLINK_1HZ;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <_Z17execStatemachine1v+0x134>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED1,&DelayLED1);
 8000850:	4912      	ldr	r1, [pc, #72]	; (800089c <_Z17execStatemachine1v+0x13c>)
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 8000854:	f7ff ff54 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000858:	2101      	movs	r1, #1
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <_Z17execStatemachine1v+0x144>)
 800085c:	f001 fd25 	bl	80022aa <HAL_GPIO_TogglePin>
				  count = 1;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <_Z17execStatemachine1v+0x138>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e012      	b.n	800088e <_Z17execStatemachine1v+0x12e>
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED1,&DelayLED1);
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <_Z17execStatemachine1v+0x13c>)
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <_Z17execStatemachine1v+0x140>)
 800086c:	f7ff ff48 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000870:	2101      	movs	r1, #1
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <_Z17execStatemachine1v+0x144>)
 8000874:	f001 fd19 	bl	80022aa <HAL_GPIO_TogglePin>
				  count++;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <_Z17execStatemachine1v+0x138>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <_Z17execStatemachine1v+0x138>)
 8000882:	701a      	strb	r2, [r3, #0]
		break;
 8000884:	e003      	b.n	800088e <_Z17execStatemachine1v+0x12e>
		break;
 8000886:	bf00      	nop
 8000888:	e002      	b.n	8000890 <_Z17execStatemachine1v+0x130>
		break;
 800088a:	bf00      	nop
 800088c:	e000      	b.n	8000890 <_Z17execStatemachine1v+0x130>
		break;
 800088e:	bf00      	nop
	}
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	240000ec 	.word	0x240000ec
 8000898:	24000104 	.word	0x24000104
 800089c:	240000f4 	.word	0x240000f4
 80008a0:	240000f8 	.word	0x240000f8
 80008a4:	58020400 	.word	0x58020400

080008a8 <_Z17execStatemachine2v>:

void execStatemachine2(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	static uint8_t count=0;
	switch(statemachine_2){
 80008ac:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <_Z17execStatemachine2v+0x134>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d056      	beq.n	8000962 <_Z17execStatemachine2v+0xba>
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	f300 808a 	bgt.w	80009ce <_Z17execStatemachine2v+0x126>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <_Z17execStatemachine2v+0x1c>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d019      	beq.n	80008f6 <_Z17execStatemachine2v+0x4e>
				  count++;
			}
		}
		break;
	default:
		break;
 80008c2:	e084      	b.n	80009ce <_Z17execStatemachine2v+0x126>
		count = 0;
 80008c4:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
		DelayLED2=1000;
 80008ca:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 80008cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d0:	601a      	str	r2, [r3, #0]
		TimerTickstartLED2=0;
 80008d2:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
		NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED2,&DelayLED2);
 80008d8:	4942      	ldr	r1, [pc, #264]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 80008da:	4843      	ldr	r0, [pc, #268]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 80008dc:	f7ff ff10 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008e0:	2102      	movs	r1, #2
 80008e2:	4842      	ldr	r0, [pc, #264]	; (80009ec <_Z17execStatemachine2v+0x144>)
 80008e4:	f001 fce1 	bl	80022aa <HAL_GPIO_TogglePin>
		count = 1;
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
		statemachine_2 = states_sm2::BLINK_1HZ;
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <_Z17execStatemachine2v+0x134>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
		break;
 80008f4:	e070      	b.n	80009d8 <_Z17execStatemachine2v+0x130>
		if(NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration(TimerTickstartLED2, DelayLED2)){
 80008f6:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a3a      	ldr	r2, [pc, #232]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 80008fc:	6812      	ldr	r2, [r2, #0]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff19 	bl	8000738 <NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d05d      	beq.n	80009d2 <_Z17execStatemachine2v+0x12a>
			if(count>((BLINKTIMES*2)-1)){
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b09      	cmp	r3, #9
 800091c:	d912      	bls.n	8000944 <_Z17execStatemachine2v+0x9c>
				  DelayLED2=500;
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 8000920:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000924:	601a      	str	r2, [r3, #0]
				  statemachine_2 = states_sm2::BLINK_2HZ;
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <_Z17execStatemachine2v+0x134>)
 8000928:	2202      	movs	r2, #2
 800092a:	601a      	str	r2, [r3, #0]
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED2,&DelayLED2);
 800092c:	492d      	ldr	r1, [pc, #180]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 800092e:	482e      	ldr	r0, [pc, #184]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 8000930:	f7ff fee6 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000934:	2102      	movs	r1, #2
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <_Z17execStatemachine2v+0x144>)
 8000938:	f001 fcb7 	bl	80022aa <HAL_GPIO_TogglePin>
				  count = 1;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
		break;
 8000942:	e046      	b.n	80009d2 <_Z17execStatemachine2v+0x12a>
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED2,&DelayLED2);
 8000944:	4927      	ldr	r1, [pc, #156]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 8000946:	4828      	ldr	r0, [pc, #160]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 8000948:	f7ff feda 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800094c:	2102      	movs	r1, #2
 800094e:	4827      	ldr	r0, [pc, #156]	; (80009ec <_Z17execStatemachine2v+0x144>)
 8000950:	f001 fcab 	bl	80022aa <HAL_GPIO_TogglePin>
				  count++;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 800095e:	701a      	strb	r2, [r3, #0]
		break;
 8000960:	e037      	b.n	80009d2 <_Z17execStatemachine2v+0x12a>
		if(NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration(TimerTickstartLED2, DelayLED2)){
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fee3 	bl	8000738 <NoneBlockSystemTickDelay__DelayNoneBlockingCheckExpiration>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d029      	beq.n	80009d6 <_Z17execStatemachine2v+0x12e>
			if(count>((BLINKTIMES*2)-1)){
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b09      	cmp	r3, #9
 8000988:	d912      	bls.n	80009b0 <_Z17execStatemachine2v+0x108>
				  DelayLED2=1000;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 800098c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000990:	601a      	str	r2, [r3, #0]
				  statemachine_2 = states_sm2::BLINK_1HZ;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <_Z17execStatemachine2v+0x134>)
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED2,&DelayLED2);
 8000998:	4912      	ldr	r1, [pc, #72]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 800099a:	4813      	ldr	r0, [pc, #76]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 800099c:	f7ff feb0 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009a0:	2102      	movs	r1, #2
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <_Z17execStatemachine2v+0x144>)
 80009a4:	f001 fc81 	bl	80022aa <HAL_GPIO_TogglePin>
				  count = 1;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
		break;
 80009ae:	e012      	b.n	80009d6 <_Z17execStatemachine2v+0x12e>
				  NoneBlockSystemTickDelay__DelayNoneBlockingInit(&TimerTickstartLED2,&DelayLED2);
 80009b0:	490c      	ldr	r1, [pc, #48]	; (80009e4 <_Z17execStatemachine2v+0x13c>)
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <_Z17execStatemachine2v+0x140>)
 80009b4:	f7ff fea4 	bl	8000700 <NoneBlockSystemTickDelay__DelayNoneBlockingInit>
				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009b8:	2102      	movs	r1, #2
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <_Z17execStatemachine2v+0x144>)
 80009bc:	f001 fc75 	bl	80022aa <HAL_GPIO_TogglePin>
				  count++;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <_Z17execStatemachine2v+0x138>)
 80009ca:	701a      	strb	r2, [r3, #0]
		break;
 80009cc:	e003      	b.n	80009d6 <_Z17execStatemachine2v+0x12e>
		break;
 80009ce:	bf00      	nop
 80009d0:	e002      	b.n	80009d8 <_Z17execStatemachine2v+0x130>
		break;
 80009d2:	bf00      	nop
 80009d4:	e000      	b.n	80009d8 <_Z17execStatemachine2v+0x130>
		break;
 80009d6:	bf00      	nop
	}
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	240000f0 	.word	0x240000f0
 80009e0:	24000105 	.word	0x24000105
 80009e4:	240000fc 	.word	0x240000fc
 80009e8:	24000100 	.word	0x24000100
 80009ec:	58021000 	.word	0x58021000

080009f0 <cpp_main>:


void cpp_main(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

	while(1){

		execStatemachine1();
 80009f4:	f7ff feb4 	bl	8000760 <_Z17execStatemachine1v>
		execStatemachine2();
 80009f8:	f7ff ff56 	bl	80008a8 <_Z17execStatemachine2v>
		execStatemachine1();
 80009fc:	e7fa      	b.n	80009f4 <cpp_main+0x4>
	...

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a0c:	bf00      	nop
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <main+0xa0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d004      	beq.n	8000a24 <main+0x24>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dcf4      	bgt.n	8000a0e <main+0xe>
  if ( timeout < 0 )
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da01      	bge.n	8000a2e <main+0x2e>
  {
  Error_Handler();
 8000a2a:	f000 fa5f 	bl	8000eec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fc95 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f837 	bl	8000aa4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <main+0xa0>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <main+0xa0>)
 8000a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <main+0xa0>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f001 fc43 	bl	80022e0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 fc59 	bl	8002314 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a66:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a68:	bf00      	nop
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <main+0xa0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d104      	bne.n	8000a80 <main+0x80>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dcf4      	bgt.n	8000a6a <main+0x6a>
if ( timeout < 0 )
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	da01      	bge.n	8000a8a <main+0x8a>
{
Error_Handler();
 8000a86:	f000 fa31 	bl	8000eec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 f953 	bl	8000d34 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a8e:	f000 f887 	bl	8000ba0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a92:	f000 f8d1 	bl	8000c38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a96:	f000 f91b 	bl	8000cd0 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	cpp_main();
 8000a9a:	f7ff ffa9 	bl	80009f0 <cpp_main>
 8000a9e:	e7fc      	b.n	8000a9a <main+0x9a>
 8000aa0:	58024400 	.word	0x58024400

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09c      	sub	sp, #112	; 0x70
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	224c      	movs	r2, #76	; 0x4c
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 ffe6 	bl	8006a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2220      	movs	r2, #32
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 ffe0 	bl	8006a84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ac4:	2004      	movs	r0, #4
 8000ac6:	f001 fd81 	bl	80025cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <SystemClock_Config+0xf4>)
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <SystemClock_Config+0xf4>)
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <SystemClock_Config+0xf4>)
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <SystemClock_Config+0xf8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aec:	4a2b      	ldr	r2, [pc, #172]	; (8000b9c <SystemClock_Config+0xf8>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <SystemClock_Config+0xf8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b00:	bf00      	nop
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <SystemClock_Config+0xf8>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b0e:	d1f8      	bne.n	8000b02 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000b26:	2312      	movs	r3, #18
 8000b28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b36:	230c      	movs	r3, #12
 8000b38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000b3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b42:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fda9 	bl	80026a0 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b54:	f000 f9ca 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	233f      	movs	r3, #63	; 0x3f
 8000b5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b76:	2340      	movs	r3, #64	; 0x40
 8000b78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f9e8 	bl	8002f54 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000b8a:	f000 f9af 	bl	8000eec <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3770      	adds	r7, #112	; 0x70
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58000400 	.word	0x58000400
 8000b9c:	58024800 	.word	0x58024800

08000ba0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <MX_ETH_Init+0x80>)
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <MX_ETH_Init+0x84>)
 8000ba8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_ETH_Init+0x88>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_ETH_Init+0x88>)
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_ETH_Init+0x88>)
 8000bb8:	22e1      	movs	r2, #225	; 0xe1
 8000bba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_ETH_Init+0x88>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_ETH_Init+0x88>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_ETH_Init+0x88>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_ETH_Init+0x80>)
 8000bd0:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_ETH_Init+0x88>)
 8000bd2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_ETH_Init+0x80>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_ETH_Init+0x80>)
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <MX_ETH_Init+0x8c>)
 8000bde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_ETH_Init+0x80>)
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_ETH_Init+0x90>)
 8000be4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_ETH_Init+0x80>)
 8000be8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_ETH_Init+0x80>)
 8000bf0:	f000 fd6e 	bl	80016d0 <HAL_ETH_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bfa:	f000 f977 	bl	8000eec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bfe:	2238      	movs	r2, #56	; 0x38
 8000c00:	2100      	movs	r1, #0
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_ETH_Init+0x94>)
 8000c04:	f005 ff3e 	bl	8006a84 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_ETH_Init+0x94>)
 8000c0a:	2221      	movs	r2, #33	; 0x21
 8000c0c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_ETH_Init+0x94>)
 8000c10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c14:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_ETH_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24000140 	.word	0x24000140
 8000c24:	40028000 	.word	0x40028000
 8000c28:	24000790 	.word	0x24000790
 8000c2c:	24000070 	.word	0x24000070
 8000c30:	24000010 	.word	0x24000010
 8000c34:	24000108 	.word	0x24000108

08000c38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <MX_USART3_UART_Init+0x94>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c82:	f004 fb1f 	bl	80052c4 <HAL_UART_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f000 f92e 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c94:	f005 fb21 	bl	80062da <HAL_UARTEx_SetTxFifoThreshold>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c9e:	f000 f925 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000ca6:	f005 fb56 	bl	8006356 <HAL_UARTEx_SetRxFifoThreshold>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb0:	f000 f91c 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000cb6:	f005 fad7 	bl	8006268 <HAL_UARTEx_DisableFifoMode>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 f914 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	240001f0 	.word	0x240001f0
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cdc:	2209      	movs	r2, #9
 8000cde:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d18:	f001 fb10 	bl	800233c <HAL_PCD_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d22:	f000 f8e3 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000284 	.word	0x24000284
 8000d30:	40080000 	.word	0x40080000

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b62      	ldr	r3, [pc, #392]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a60      	ldr	r2, [pc, #384]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b5e      	ldr	r3, [pc, #376]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d68:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a59      	ldr	r2, [pc, #356]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b56      	ldr	r3, [pc, #344]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a42      	ldr	r2, [pc, #264]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de0:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e22:	482d      	ldr	r0, [pc, #180]	; (8000ed8 <MX_GPIO_Init+0x1a4>)
 8000e24:	f001 fa28 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2e:	482b      	ldr	r0, [pc, #172]	; (8000edc <MX_GPIO_Init+0x1a8>)
 8000e30:	f001 fa22 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2102      	movs	r1, #2
 8000e38:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <MX_GPIO_Init+0x1ac>)
 8000e3a:	f001 fa1d 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4824      	ldr	r0, [pc, #144]	; (8000ee4 <MX_GPIO_Init+0x1b0>)
 8000e54:	f001 f860 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <MX_GPIO_Init+0x1a4>)
 8000e72:	f001 f851 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_GPIO_Init+0x1a8>)
 8000e90:	f001 f842 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <MX_GPIO_Init+0x1b4>)
 8000eaa:	f001 f835 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_GPIO_Init+0x1ac>)
 8000ec6:	f001 f827 	bl	8001f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	; 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58020400 	.word	0x58020400
 8000edc:	58020c00 	.word	0x58020c00
 8000ee0:	58021000 	.word	0x58021000
 8000ee4:	58020800 	.word	0x58020800
 8000ee8:	58021800 	.word	0x58021800

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x30>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	58024400 	.word	0x58024400

08000f2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	; 0x38
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a59      	ldr	r2, [pc, #356]	; (80010b0 <HAL_ETH_MspInit+0x184>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	f040 80ab 	bne.w	80010a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f50:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f56:	4a57      	ldr	r2, [pc, #348]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f60:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6a:	623b      	str	r3, [r7, #32]
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f6e:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f74:	4a4f      	ldr	r2, [pc, #316]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f7e:	4b4d      	ldr	r3, [pc, #308]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f8c:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f92:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f9c:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a39      	ldr	r2, [pc, #228]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_ETH_MspInit+0x188>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001022:	2332      	movs	r3, #50	; 0x32
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	481e      	ldr	r0, [pc, #120]	; (80010b8 <HAL_ETH_MspInit+0x18c>)
 800103e:	f000 ff6b 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001042:	2386      	movs	r3, #134	; 0x86
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001052:	230b      	movs	r3, #11
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <HAL_ETH_MspInit+0x190>)
 800105e:	f000 ff5b 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001074:	230b      	movs	r3, #11
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <HAL_ETH_MspInit+0x194>)
 8001080:	f000 ff4a 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001084:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001096:	230b      	movs	r3, #11
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <HAL_ETH_MspInit+0x198>)
 80010a2:	f000 ff39 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3738      	adds	r7, #56	; 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40028000 	.word	0x40028000
 80010b4:	58024400 	.word	0x58024400
 80010b8:	58020800 	.word	0x58020800
 80010bc:	58020000 	.word	0x58020000
 80010c0:	58020400 	.word	0x58020400
 80010c4:	58021800 	.word	0x58021800

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ba      	sub	sp, #232	; 0xe8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22c0      	movs	r2, #192	; 0xc0
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 fccb 	bl	8006a84 <memset>
  if(huart->Instance==USART3)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <HAL_UART_MspInit+0xc8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d146      	bne.n	8001186 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f8:	f04f 0202 	mov.w	r2, #2
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f002 faac 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800111a:	f7ff fee7 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0xcc>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_UART_MspInit+0xcc>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001174:	2307      	movs	r3, #7
 8001176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_UART_MspInit+0xd0>)
 8001182:	f000 fec9 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	37e8      	adds	r7, #232	; 0xe8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40004800 	.word	0x40004800
 8001194:	58024400 	.word	0x58024400
 8001198:	58020c00 	.word	0x58020c00

0800119c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0ba      	sub	sp, #232	; 0xe8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	22c0      	movs	r2, #192	; 0xc0
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 fc61 	bl	8006a84 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <HAL_PCD_MspInit+0x10c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d169      	bne.n	80012a0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011dc:	2312      	movs	r3, #18
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80011e4:	2303      	movs	r3, #3
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80011f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fa31 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001210:	f7ff fe6c 	bl	8000eec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001214:	f001 fa34 	bl	8002680 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_PCD_MspInit+0x110>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_PCD_MspInit+0x110>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_PCD_MspInit+0x110>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001236:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001250:	230a      	movs	r3, #10
 8001252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800125a:	4619      	mov	r1, r3
 800125c:	4814      	ldr	r0, [pc, #80]	; (80012b0 <HAL_PCD_MspInit+0x114>)
 800125e:	f000 fe5b 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <HAL_PCD_MspInit+0x114>)
 800127e:	f000 fe4b 	bl	8001f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_PCD_MspInit+0x110>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_PCD_MspInit+0x110>)
 800128a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800128e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_PCD_MspInit+0x110>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	37e8      	adds	r7, #232	; 0xe8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40080000 	.word	0x40080000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020000 	.word	0x58020000

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f89e 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800130c:	f7ff f962 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f005 fbad 	bl	8006a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fb61 	bl	8000a00 <main>
  bx  lr
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001344:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001348:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800134c:	08006b3c 	.word	0x08006b3c
  ldr r2, =_sbss
 8001350:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001354:	2400079c 	.word	0x2400079c

08001358 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC3_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f000 f982 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001368:	f001 ffaa 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <HAL_Init+0x6c>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_Init+0x6c>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_Init+0x70>)
 800139e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 f814 	bl	80013d4 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e002      	b.n	80013bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fd9f 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024400 	.word	0x58024400
 80013c8:	08006af4 	.word	0x08006af4
 80013cc:	24000004 	.word	0x24000004
 80013d0:	24000000 	.word	0x24000000

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_InitTick+0x60>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e021      	b.n	800142c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_InitTick+0x64>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_InitTick+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f959 	bl	80016b6 <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f931 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x68>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2400000c 	.word	0x2400000c
 8001438:	24000000 	.word	0x24000000
 800143c:	24000008 	.word	0x24000008

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2400000c 	.word	0x2400000c
 8001464:	24000798 	.word	0x24000798

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	24000798 	.word	0x24000798

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2400000c 	.word	0x2400000c

080014c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetREVID+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1b      	lsrs	r3, r3, #16
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	5c001000 	.word	0x5c001000

080014e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	58000400 	.word	0x58000400

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	4313      	orrs	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	05fa0000 	.word	0x05fa0000

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff47 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff5e 	bl	8001550 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffb2 	bl	8001628 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0cf      	b.n	8001882 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2223      	movs	r2, #35	; 0x23
 80016f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fc19 	bl	8000f2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_ETH_Init+0x1bc>)
 80016fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001700:	4a62      	ldr	r2, [pc, #392]	; (800188c <HAL_ETH_Init+0x1bc>)
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <HAL_ETH_Init+0x1bc>)
 800170c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7a1b      	ldrb	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fedd 	bl	80014e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001726:	e003      	b.n	8001730 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001728:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800172c:	f7ff fed8 	bl	80014e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001730:	4b57      	ldr	r3, [pc, #348]	; (8001890 <HAL_ETH_Init+0x1c0>)
 8001732:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800174c:	f7ff fe8c 	bl	8001468 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001752:	e011      	b.n	8001778 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001754:	f7ff fe88 	bl	8001468 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001762:	d909      	bls.n	8001778 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2204      	movs	r2, #4
 8001768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	22e0      	movs	r2, #224	; 0xe0
 8001770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e084      	b.n	8001882 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e4      	bne.n	8001754 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f886 	bl	800189c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001790:	f001 ff10 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8001794:	4603      	mov	r3, r0
 8001796:	4a3f      	ldr	r2, [pc, #252]	; (8001894 <HAL_ETH_Init+0x1c4>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	0c9a      	lsrs	r2, r3, #18
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3a01      	subs	r2, #1
 80017a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa71 	bl	8001c90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80017ba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	22e0      	movs	r2, #224	; 0xe0
 80017e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e049      	b.n	8001882 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_ETH_Init+0x1c8>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6952      	ldr	r2, [r2, #20]
 8001802:	0051      	lsls	r1, r2, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	430b      	orrs	r3, r1
 800180a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800180e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fad9 	bl	8001dca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fb1f 	bl	8001e5c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	3305      	adds	r3, #5
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	021a      	lsls	r2, r3, #8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	3303      	adds	r3, #3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	061a      	lsls	r2, r3, #24
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	3302      	adds	r3, #2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	3301      	adds	r3, #1
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800185c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800186a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800186c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2210      	movs	r2, #16
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	58024400 	.word	0x58024400
 8001890:	58000400 	.word	0x58000400
 8001894:	431bde83 	.word	0x431bde83
 8001898:	ffff8001 	.word	0xffff8001

0800189c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018b6:	f001 fe7d 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80018ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d908      	bls.n	80018d6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d804      	bhi.n	80018d6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e027      	b.n	8001926 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d908      	bls.n	80018f0 <HAL_ETH_SetMDIOClockRange+0x54>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d204      	bcs.n	80018f0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e01a      	b.n	8001926 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d303      	bcc.n	8001900 <HAL_ETH_SetMDIOClockRange+0x64>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d911      	bls.n	8001924 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d908      	bls.n	800191a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_ETH_SetMDIOClockRange+0xac>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d804      	bhi.n	800191a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e005      	b.n	8001926 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e000      	b.n	8001926 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001924:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	01312cff 	.word	0x01312cff
 800193c:	02160ebf 	.word	0x02160ebf
 8001940:	03938700 	.word	0x03938700
 8001944:	05f5e0ff 	.word	0x05f5e0ff
 8001948:	08f0d17f 	.word	0x08f0d17f

0800194c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800195e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	7b1b      	ldrb	r3, [r3, #12]
 800196c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800196e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7b5b      	ldrb	r3, [r3, #13]
 8001974:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7b9b      	ldrb	r3, [r3, #14]
 800197c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800197e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	7bdb      	ldrb	r3, [r3, #15]
 8001984:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001986:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	7c12      	ldrb	r2, [r2, #16]
 800198c:	2a00      	cmp	r2, #0
 800198e:	d102      	bne.n	8001996 <ETH_SetMACConfig+0x4a>
 8001990:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001994:	e000      	b.n	8001998 <ETH_SetMACConfig+0x4c>
 8001996:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001998:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	7c52      	ldrb	r2, [r2, #17]
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d102      	bne.n	80019a8 <ETH_SetMACConfig+0x5c>
 80019a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a6:	e000      	b.n	80019aa <ETH_SetMACConfig+0x5e>
 80019a8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7c9b      	ldrb	r3, [r3, #18]
 80019b0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019b2:	431a      	orrs	r2, r3
               macconf->Speed |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80019b8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80019be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	7f1b      	ldrb	r3, [r3, #28]
 80019c4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80019c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	7f5b      	ldrb	r3, [r3, #29]
 80019cc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80019ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	7f92      	ldrb	r2, [r2, #30]
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d102      	bne.n	80019de <ETH_SetMACConfig+0x92>
 80019d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x94>
 80019de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	7fdb      	ldrb	r3, [r3, #31]
 80019e6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d102      	bne.n	80019fa <ETH_SetMACConfig+0xae>
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	e000      	b.n	80019fc <ETH_SetMACConfig+0xb0>
 80019fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019fc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a0a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a0c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <ETH_SetMACConfig+0x22c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a4a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d102      	bne.n	8001a5e <ETH_SetMACConfig+0x112>
 8001a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x114>
 8001a5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a60:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <ETH_SetMACConfig+0x230>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <ETH_SetMACConfig+0x234>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001aa8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001aae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	d101      	bne.n	8001abe <ETH_SetMACConfig+0x172>
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	e000      	b.n	8001ac0 <ETH_SetMACConfig+0x174>
 8001abe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ac0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ad2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001ae8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001af0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f023 0103 	bic.w	r1, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d101      	bne.n	8001b3a <ETH_SetMACConfig+0x1ee>
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	e000      	b.n	8001b3c <ETH_SetMACConfig+0x1f0>
 8001b3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001b4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	00048083 	.word	0x00048083
 8001b7c:	c0f88000 	.word	0xc0f88000
 8001b80:	fffffef0 	.word	0xfffffef0

08001b84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <ETH_SetDMAConfig+0xf8>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	6811      	ldr	r1, [r2, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001baa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bb6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7b1b      	ldrb	r3, [r3, #12]
 8001bbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <ETH_SetDMAConfig+0xfc>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bdc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	7b5b      	ldrb	r3, [r3, #13]
 8001be2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <ETH_SetDMAConfig+0x100>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c08:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
 8001c14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7f5b      	ldrb	r3, [r3, #29]
 8001c1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <ETH_SetDMAConfig+0x104>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7f1b      	ldrb	r3, [r3, #28]
 8001c46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <ETH_SetDMAConfig+0x108>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	430b      	orrs	r3, r1
 8001c68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c6c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	ffff87fd 	.word	0xffff87fd
 8001c80:	ffff2ffe 	.word	0xffff2ffe
 8001c84:	fffec000 	.word	0xfffec000
 8001c88:	ffc0efef 	.word	0xffc0efef
 8001c8c:	7fc0ffff 	.word	0x7fc0ffff

08001c90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0a4      	sub	sp, #144	; 0x90
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ce8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001cec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d12:	2300      	movs	r3, #0
 8001d14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fde6 	bl	800194c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001db0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fee1 	bl	8001b84 <ETH_SetDMAConfig>
}
 8001dc2:	bf00      	nop
 8001dc4:	3790      	adds	r7, #144	; 0x90
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e01d      	b.n	8001e14 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	3206      	adds	r2, #6
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3301      	adds	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d9de      	bls.n	8001dd8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e023      	b.n	8001eb2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	3212      	adds	r2, #18
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d9d8      	bls.n	8001e6a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <HAL_GPIO_Init+0x234>)
 8001f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f2a:	e194      	b.n	8002256 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8186 	beq.w	8002250 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d005      	beq.n	8001f5c <HAL_GPIO_Init+0x44>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d130      	bne.n	8001fbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f92:	2201      	movs	r2, #1
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 0201 	and.w	r2, r3, #1
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d017      	beq.n	8001ffa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d123      	bne.n	800204e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	69b9      	ldr	r1, [r7, #24]
 800204a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0203 	and.w	r2, r3, #3
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80e0 	beq.w	8002250 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x238>)
 8002092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002096:	4a2e      	ldr	r2, [pc, #184]	; (8002150 <HAL_GPIO_Init+0x238>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_GPIO_Init+0x238>)
 80020a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a29      	ldr	r2, [pc, #164]	; (8002154 <HAL_GPIO_Init+0x23c>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a20      	ldr	r2, [pc, #128]	; (8002158 <HAL_GPIO_Init+0x240>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d052      	beq.n	8002180 <HAL_GPIO_Init+0x268>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <HAL_GPIO_Init+0x244>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d031      	beq.n	8002146 <HAL_GPIO_Init+0x22e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <HAL_GPIO_Init+0x248>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <HAL_GPIO_Init+0x22a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_GPIO_Init+0x24c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d025      	beq.n	800213e <HAL_GPIO_Init+0x226>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <HAL_GPIO_Init+0x250>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <HAL_GPIO_Init+0x222>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_GPIO_Init+0x254>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d019      	beq.n	8002136 <HAL_GPIO_Init+0x21e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_GPIO_Init+0x258>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0x21a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x25c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00d      	beq.n	800212e <HAL_GPIO_Init+0x216>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_GPIO_Init+0x260>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <HAL_GPIO_Init+0x212>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <HAL_GPIO_Init+0x264>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_GPIO_Init+0x20e>
 8002122:	2309      	movs	r3, #9
 8002124:	e02d      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 8002126:	230a      	movs	r3, #10
 8002128:	e02b      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 800212a:	2308      	movs	r3, #8
 800212c:	e029      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 800212e:	2307      	movs	r3, #7
 8002130:	e027      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 8002132:	2306      	movs	r3, #6
 8002134:	e025      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 8002136:	2305      	movs	r3, #5
 8002138:	e023      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 800213a:	2304      	movs	r3, #4
 800213c:	e021      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 800213e:	2303      	movs	r3, #3
 8002140:	e01f      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 8002142:	2302      	movs	r3, #2
 8002144:	e01d      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 8002146:	2301      	movs	r3, #1
 8002148:	e01b      	b.n	8002182 <HAL_GPIO_Init+0x26a>
 800214a:	bf00      	nop
 800214c:	58000080 	.word	0x58000080
 8002150:	58024400 	.word	0x58024400
 8002154:	58000400 	.word	0x58000400
 8002158:	58020000 	.word	0x58020000
 800215c:	58020400 	.word	0x58020400
 8002160:	58020800 	.word	0x58020800
 8002164:	58020c00 	.word	0x58020c00
 8002168:	58021000 	.word	0x58021000
 800216c:	58021400 	.word	0x58021400
 8002170:	58021800 	.word	0x58021800
 8002174:	58021c00 	.word	0x58021c00
 8002178:	58022000 	.word	0x58022000
 800217c:	58022400 	.word	0x58022400
 8002180:	2300      	movs	r3, #0
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	f002 0203 	and.w	r2, r2, #3
 8002188:	0092      	lsls	r2, r2, #2
 800218a:	4093      	lsls	r3, r2
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002192:	4938      	ldr	r1, [pc, #224]	; (8002274 <HAL_GPIO_Init+0x35c>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3301      	adds	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f ae63 	bne.w	8001f2c <HAL_GPIO_Init+0x14>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	3724      	adds	r7, #36	; 0x24
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	58000400 	.word	0x58000400

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	041a      	lsls	r2, r3, #16
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	400b      	ands	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_HSEM_FastTake+0x2c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3320      	adds	r3, #32
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_HSEM_FastTake+0x30>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	58026400 	.word	0x58026400
 8002310:	80000300 	.word	0x80000300

08002314 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800231e:	4906      	ldr	r1, [pc, #24]	; (8002338 <HAL_HSEM_Release+0x24>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	58026400 	.word	0x58026400

0800233c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	b08f      	sub	sp, #60	; 0x3c
 8002340:	af0a      	add	r7, sp, #40	; 0x28
 8002342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e116      	b.n	800257c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fe ff17 	bl	800119c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f004 f8dd 	bl	800654c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	687e      	ldr	r6, [r7, #4]
 800239a:	466d      	mov	r5, sp
 800239c:	f106 0410 	add.w	r4, r6, #16
 80023a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80023b0:	1d33      	adds	r3, r6, #4
 80023b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f004 f85b 	bl	8006470 <USB_CoreInit>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d7      	b.n	800257c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 f8cb 	bl	800656e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e04a      	b.n	8002474 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	333d      	adds	r3, #61	; 0x3d
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	333c      	adds	r3, #60	; 0x3c
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	b298      	uxth	r0, r3
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3356      	adds	r3, #86	; 0x56
 800241a:	4602      	mov	r2, r0
 800241c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3340      	adds	r3, #64	; 0x40
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3344      	adds	r3, #68	; 0x44
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3348      	adds	r3, #72	; 0x48
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	334c      	adds	r3, #76	; 0x4c
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d3af      	bcc.n	80023de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e044      	b.n	800250e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	3301      	adds	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d3b5      	bcc.n	8002484 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	687e      	ldr	r6, [r7, #4]
 8002520:	466d      	mov	r5, sp
 8002522:	f106 0410 	add.w	r4, r6, #16
 8002526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002532:	e885 0003 	stmia.w	r5, {r0, r1}
 8002536:	1d33      	adds	r3, r6, #4
 8002538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	f004 f864 	bl	8006608 <USB_DevInit>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e014      	b.n	800257c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f80a 	bl	8002584 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f004 fa22 	bl	80069be <USB_DevDisconnect>

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002584 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	10000003 	.word	0x10000003

080025cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_PWREx_ConfigSupply+0xb0>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d00a      	beq.n	80025f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_PWREx_ConfigSupply+0xb0>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e040      	b.n	8002674 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e03e      	b.n	8002674 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_PWREx_ConfigSupply+0xb0>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80025fe:	491f      	ldr	r1, [pc, #124]	; (800267c <HAL_PWREx_ConfigSupply+0xb0>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4313      	orrs	r3, r2
 8002604:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002606:	f7fe ff2f 	bl	8001468 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800260c:	e009      	b.n	8002622 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800260e:	f7fe ff2b 	bl	8001468 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800261c:	d901      	bls.n	8002622 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e028      	b.n	8002674 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_PWREx_ConfigSupply+0xb0>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800262e:	d1ee      	bne.n	800260e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b1e      	cmp	r3, #30
 8002634:	d008      	beq.n	8002648 <HAL_PWREx_ConfigSupply+0x7c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b2e      	cmp	r3, #46	; 0x2e
 800263a:	d005      	beq.n	8002648 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b1d      	cmp	r3, #29
 8002640:	d002      	beq.n	8002648 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b2d      	cmp	r3, #45	; 0x2d
 8002646:	d114      	bne.n	8002672 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002648:	f7fe ff0e 	bl	8001468 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800264e:	e009      	b.n	8002664 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002650:	f7fe ff0a 	bl	8001468 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800265e:	d901      	bls.n	8002664 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_PWREx_ConfigSupply+0xb0>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d1ee      	bne.n	8002650 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	58024800 	.word	0x58024800

08002680 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	60d3      	str	r3, [r2, #12]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	58024800 	.word	0x58024800

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	; 0x30
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f000 bc48 	b.w	8002f44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8088 	beq.w	80027d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	4b99      	ldr	r3, [pc, #612]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026cc:	4b96      	ldr	r3, [pc, #600]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_OscConfig+0x48>
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	2b18      	cmp	r3, #24
 80026dc:	d111      	bne.n	8002702 <HAL_RCC_OscConfig+0x62>
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d06d      	beq.n	80027d0 <HAL_RCC_OscConfig+0x130>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d169      	bne.n	80027d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f000 bc21 	b.w	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x7a>
 800270c:	4b86      	ldr	r3, [pc, #536]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a85      	ldr	r2, [pc, #532]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e02e      	b.n	8002778 <HAL_RCC_OscConfig+0xd8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x9c>
 8002722:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a80      	ldr	r2, [pc, #512]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b7e      	ldr	r3, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7d      	ldr	r2, [pc, #500]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xd8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0xc0>
 8002746:	4b78      	ldr	r3, [pc, #480]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a77      	ldr	r2, [pc, #476]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b75      	ldr	r3, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a74      	ldr	r2, [pc, #464]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xd8>
 8002760:	4b71      	ldr	r3, [pc, #452]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a70      	ldr	r2, [pc, #448]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6d      	ldr	r2, [pc, #436]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fe72 	bl	8001468 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fe6e 	bl	8001468 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e3d4      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279a:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fe5e 	bl	8001468 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fe5a 	bl	8001468 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e3c0      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c2:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x110>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80ca 	beq.w	8002974 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e0:	4b51      	ldr	r3, [pc, #324]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ea:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_RCC_OscConfig+0x166>
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2b18      	cmp	r3, #24
 80027fa:	d156      	bne.n	80028aa <HAL_RCC_OscConfig+0x20a>
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d151      	bne.n	80028aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002806:	4b48      	ldr	r3, [pc, #288]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e392      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800281e:	4b42      	ldr	r3, [pc, #264]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0219 	bic.w	r2, r3, #25
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	493f      	ldr	r1, [pc, #252]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fe1a 	bl	8001468 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002838:	f7fe fe16 	bl	8001468 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e37c      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	f7fe fe37 	bl	80014c8 <HAL_GetREVID>
 800285a:	4603      	mov	r3, r0
 800285c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002860:	4293      	cmp	r3, r2
 8002862:	d817      	bhi.n	8002894 <HAL_RCC_OscConfig+0x1f4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d108      	bne.n	800287e <HAL_RCC_OscConfig+0x1de>
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002874:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287c:	e07a      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	031b      	lsls	r3, r3, #12
 800288c:	4926      	ldr	r1, [pc, #152]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002892:	e06f      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	4921      	ldr	r1, [pc, #132]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a8:	e064      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d047      	beq.n	8002942 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0219 	bic.w	r2, r3, #25
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	491a      	ldr	r1, [pc, #104]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fdd0 	bl	8001468 <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7fe fdcc 	bl	8001468 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e332      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ea:	f7fe fded 	bl	80014c8 <HAL_GetREVID>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d819      	bhi.n	800292c <HAL_RCC_OscConfig+0x28c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d108      	bne.n	8002912 <HAL_RCC_OscConfig+0x272>
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 800290a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290e:	6053      	str	r3, [r2, #4]
 8002910:	e030      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	031b      	lsls	r3, r3, #12
 8002920:	4901      	ldr	r1, [pc, #4]	; (8002928 <HAL_RCC_OscConfig+0x288>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
 8002926:	e025      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
 8002928:	58024400 	.word	0x58024400
 800292c:	4b9a      	ldr	r3, [pc, #616]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4997      	ldr	r1, [pc, #604]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e018      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	4b95      	ldr	r3, [pc, #596]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a94      	ldr	r2, [pc, #592]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fd8b 	bl	8001468 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fd87 	bl	8001468 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e2ed      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002968:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a9 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800298a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800298c:	4b82      	ldr	r3, [pc, #520]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d007      	beq.n	80029a8 <HAL_RCC_OscConfig+0x308>
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b18      	cmp	r3, #24
 800299c:	d13a      	bne.n	8002a14 <HAL_RCC_OscConfig+0x374>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d135      	bne.n	8002a14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a8:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x320>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e2c1      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c0:	f7fe fd82 	bl	80014c8 <HAL_GetREVID>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d817      	bhi.n	80029fe <HAL_RCC_OscConfig+0x35e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d108      	bne.n	80029e8 <HAL_RCC_OscConfig+0x348>
 80029d6:	4b70      	ldr	r3, [pc, #448]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029de:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e6:	e075      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e8:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	069b      	lsls	r3, r3, #26
 80029f6:	4968      	ldr	r1, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029fc:	e06a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fe:	4b66      	ldr	r3, [pc, #408]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	4962      	ldr	r1, [pc, #392]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a12:	e05f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d042      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fd1e 	bl	8001468 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a30:	f7fe fd1a 	bl	8001468 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e280      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a42:	4b55      	ldr	r3, [pc, #340]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a4e:	f7fe fd3b 	bl	80014c8 <HAL_GetREVID>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d817      	bhi.n	8002a8c <HAL_RCC_OscConfig+0x3ec>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d108      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3d6>
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a72:	6053      	str	r3, [r2, #4]
 8002a74:	e02e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
 8002a76:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	4944      	ldr	r1, [pc, #272]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
 8002a8a:	e023      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
 8002a8c:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	493f      	ldr	r1, [pc, #252]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e018      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a3c      	ldr	r2, [pc, #240]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe fcdb 	bl	8001468 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fcd7 	bl	8001468 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e23d      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ac8:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d036      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d019      	beq.n	8002b1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aec:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fcb8 	bl	8001468 <HAL_GetTick>
 8002af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afc:	f7fe fcb4 	bl	8001468 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e21a      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x45c>
 8002b1a:	e018      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fc9e 	bl	8001468 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b30:	f7fe fc9a 	bl	8001468 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e200      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d039      	beq.n	8002bce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fc7b 	bl	8001468 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b76:	f7fe fc77 	bl	8001468 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1dd      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4d6>
 8002b94:	e01b      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
 8002b96:	bf00      	nop
 8002b98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b9c:	4b9b      	ldr	r3, [pc, #620]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a9a      	ldr	r2, [pc, #616]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fc5e 	bl	8001468 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb0:	f7fe fc5a 	bl	8001468 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1c0      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bc2:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8081 	beq.w	8002cde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x770>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a8b      	ldr	r2, [pc, #556]	; (8002e10 <HAL_RCC_OscConfig+0x770>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fc3e 	bl	8001468 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fc3a 	bl	8001468 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1a0      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c02:	4b83      	ldr	r3, [pc, #524]	; (8002e10 <HAL_RCC_OscConfig+0x770>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x584>
 8002c16:	4b7d      	ldr	r3, [pc, #500]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a7c      	ldr	r2, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	e02d      	b.n	8002c80 <HAL_RCC_OscConfig+0x5e0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x5a6>
 8002c2c:	4b77      	ldr	r3, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a76      	ldr	r2, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
 8002c38:	4b74      	ldr	r3, [pc, #464]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a73      	ldr	r2, [pc, #460]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	e01c      	b.n	8002c80 <HAL_RCC_OscConfig+0x5e0>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5c8>
 8002c4e:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a6e      	ldr	r2, [pc, #440]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a6b      	ldr	r2, [pc, #428]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0x5e0>
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a67      	ldr	r2, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a64      	ldr	r2, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fbee 	bl	8001468 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe fbea 	bl	8001468 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e14e      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ee      	beq.n	8002c90 <HAL_RCC_OscConfig+0x5f0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fbd8 	bl	8001468 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fbd4 	bl	8001468 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e138      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd2:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 812d 	beq.w	8002f42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ce8:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf0:	2b18      	cmp	r3, #24
 8002cf2:	f000 80bd 	beq.w	8002e70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	f040 809e 	bne.w	8002e3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a41      	ldr	r2, [pc, #260]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fbac 	bl	8001468 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fba8 	bl	8001468 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e10e      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_RCC_OscConfig+0x774>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	430a      	orrs	r2, r1
 8002d46:	4931      	ldr	r1, [pc, #196]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	628b      	str	r3, [r1, #40]	; 0x28
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	3b01      	subs	r3, #1
 8002d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	3b01      	subs	r3, #1
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d7c:	4923      	ldr	r1, [pc, #140]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <HAL_RCC_OscConfig+0x778>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d9a:	00d2      	lsls	r2, r2, #3
 8002d9c:	491b      	ldr	r1, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f023 020c 	bic.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4917      	ldr	r1, [pc, #92]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f023 0202 	bic.w	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	4912      	ldr	r1, [pc, #72]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dea:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fb31 	bl	8001468 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e08:	e011      	b.n	8002e2e <HAL_RCC_OscConfig+0x78e>
 8002e0a:	bf00      	nop
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	58024800 	.word	0x58024800
 8002e14:	fffffc0c 	.word	0xfffffc0c
 8002e18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe fb24 	bl	8001468 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e08a      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x77c>
 8002e3a:	e082      	b.n	8002f42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a42      	ldr	r2, [pc, #264]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fb0e 	bl	8001468 <HAL_GetTick>
 8002e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fb0a 	bl	8001468 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e070      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e62:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x7b0>
 8002e6e:	e068      	b.n	8002f42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d031      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d12a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d122      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0a5b      	lsrs	r3, r3, #9
 8002eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	0e1b      	lsrs	r3, r3, #24
 8002eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e02b      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d01f      	beq.n	8002f42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f0e:	f7fe faab 	bl	8001468 <HAL_GetTick>
 8002f12:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f14:	bf00      	nop
 8002f16:	f7fe faa7 	bl	8001468 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d0f9      	beq.n	8002f16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_OscConfig+0x8b0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f2e:	00d2      	lsls	r2, r2, #3
 8002f30:	4906      	ldr	r1, [pc, #24]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	; 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	ffff0007 	.word	0xffff0007

08002f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e19c      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b8a      	ldr	r3, [pc, #552]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b87      	ldr	r3, [pc, #540]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4985      	ldr	r1, [pc, #532]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b83      	ldr	r3, [pc, #524]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e184      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d908      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb4:	4b78      	ldr	r3, [pc, #480]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4975      	ldr	r1, [pc, #468]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	496a      	ldr	r1, [pc, #424]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4b64      	ldr	r3, [pc, #400]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800300c:	429a      	cmp	r2, r3
 800300e:	d908      	bls.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	495e      	ldr	r1, [pc, #376]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800301e:	4313      	orrs	r3, r2
 8003020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b59      	ldr	r3, [pc, #356]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d908      	bls.n	8003050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4953      	ldr	r1, [pc, #332]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4947      	ldr	r1, [pc, #284]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d055      	beq.n	8003136 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4940      	ldr	r1, [pc, #256]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0f6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0ea      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0de      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4925      	ldr	r1, [pc, #148]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fe f9af 	bl	8001468 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	e00a      	b.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7fe f9ab 	bl	8001468 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0be      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	429a      	cmp	r2, r3
 8003134:	d1eb      	bne.n	800310e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	429a      	cmp	r2, r3
 8003150:	d208      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	490e      	ldr	r1, [pc, #56]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d214      	bcs.n	800319c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4906      	ldr	r1, [pc, #24]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e086      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
 8003194:	52002000 	.word	0x52002000
 8003198:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4939      	ldr	r1, [pc, #228]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d208      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	492e      	ldr	r1, [pc, #184]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d208      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4922      	ldr	r1, [pc, #136]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4917      	ldr	r1, [pc, #92]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003254:	f000 f834 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 800327c:	5cd3      	ldrb	r3, [r2, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x360>)
 800328a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x364>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_ClockConfig+0x368>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f89c 	bl	80013d4 <HAL_InitTick>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	08006af4 	.word	0x08006af4
 80032b4:	24000004 	.word	0x24000004
 80032b8:	24000000 	.word	0x24000000
 80032bc:	24000008 	.word	0x24000008

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c6:	4bb3      	ldr	r3, [pc, #716]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ce:	2b18      	cmp	r3, #24
 80032d0:	f200 8155 	bhi.w	800357e <HAL_RCC_GetSysClockFreq+0x2be>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003341 	.word	0x08003341
 80032e0:	0800357f 	.word	0x0800357f
 80032e4:	0800357f 	.word	0x0800357f
 80032e8:	0800357f 	.word	0x0800357f
 80032ec:	0800357f 	.word	0x0800357f
 80032f0:	0800357f 	.word	0x0800357f
 80032f4:	0800357f 	.word	0x0800357f
 80032f8:	0800357f 	.word	0x0800357f
 80032fc:	08003367 	.word	0x08003367
 8003300:	0800357f 	.word	0x0800357f
 8003304:	0800357f 	.word	0x0800357f
 8003308:	0800357f 	.word	0x0800357f
 800330c:	0800357f 	.word	0x0800357f
 8003310:	0800357f 	.word	0x0800357f
 8003314:	0800357f 	.word	0x0800357f
 8003318:	0800357f 	.word	0x0800357f
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800357f 	.word	0x0800357f
 8003324:	0800357f 	.word	0x0800357f
 8003328:	0800357f 	.word	0x0800357f
 800332c:	0800357f 	.word	0x0800357f
 8003330:	0800357f 	.word	0x0800357f
 8003334:	0800357f 	.word	0x0800357f
 8003338:	0800357f 	.word	0x0800357f
 800333c:	08003373 	.word	0x08003373
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003340:	4b94      	ldr	r3, [pc, #592]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800334c:	4b91      	ldr	r3, [pc, #580]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	4a90      	ldr	r2, [pc, #576]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800335e:	e111      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003360:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003362:	61bb      	str	r3, [r7, #24]
      break;
 8003364:	e10e      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003366:	4b8d      	ldr	r3, [pc, #564]	; (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003368:	61bb      	str	r3, [r7, #24]
      break;
 800336a:	e10b      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800336e:	61bb      	str	r3, [r7, #24]
      break;
 8003370:	e108      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800337c:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003386:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003388:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003392:	4b80      	ldr	r3, [pc, #512]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e1 	beq.w	8003578 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	f000 8083 	beq.w	80034c4 <HAL_RCC_GetSysClockFreq+0x204>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f200 80a1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x248>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x114>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d056      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033d2:	e099      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	08db      	lsrs	r3, r3, #3
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	4a6b      	ldr	r2, [pc, #428]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800343a:	e087      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347e:	e065      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b40      	ldr	r3, [pc, #256]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c2:	e043      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003506:	e021      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352a:	ed97 6a02 	vldr	s12, [r7, #8]
 800352e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003556:	3301      	adds	r3, #1
 8003558:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003564:	edd7 6a07 	vldr	s13, [r7, #28]
 8003568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003570:	ee17 3a90 	vmov	r3, s15
 8003574:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003576:	e005      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003580:	61bb      	str	r3, [r7, #24]
      break;
 8003582:	bf00      	nop
  }

  return sysclockfreq;
 8003584:	69bb      	ldr	r3, [r7, #24]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
 8003598:	03d09000 	.word	0x03d09000
 800359c:	003d0900 	.word	0x003d0900
 80035a0:	007a1200 	.word	0x007a1200
 80035a4:	46000000 	.word	0x46000000
 80035a8:	4c742400 	.word	0x4c742400
 80035ac:	4a742400 	.word	0x4a742400
 80035b0:	4af42400 	.word	0x4af42400

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035ba:	f7ff fe81 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490f      	ldr	r1, [pc, #60]	; (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	08006af4 	.word	0x08006af4
 800360c:	24000004 	.word	0x24000004
 8003610:	24000000 	.word	0x24000000

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003618:	f7ff ffcc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCC_GetPCLK1Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	08006af4 	.word	0x08006af4

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003644:	f7ff ffb6 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400
 8003668:	08006af4 	.word	0x08006af4

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b0ca      	sub	sp, #296	; 0x128
 8003672:	af00      	add	r7, sp, #0
 8003674:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003690:	2500      	movs	r5, #0
 8003692:	ea54 0305 	orrs.w	r3, r4, r5
 8003696:	d049      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036a2:	d02f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036a8:	d828      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ae:	d01a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b4:	d822      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036be:	d007      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036c0:	e01c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4bb8      	ldr	r3, [pc, #736]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4ab7      	ldr	r2, [pc, #732]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ce:	e01a      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d4:	3308      	adds	r3, #8
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fc8f 	bl	8004ffc <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e4:	e00f      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	3328      	adds	r3, #40	; 0x28
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fd36 	bl	8005160 <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036fa:	e004      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800370e:	4ba5      	ldr	r3, [pc, #660]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003712:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371c:	4aa1      	ldr	r2, [pc, #644]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371e:	430b      	orrs	r3, r1
 8003720:	6513      	str	r3, [r2, #80]	; 0x50
 8003722:	e003      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003728:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003738:	f04f 0900 	mov.w	r9, #0
 800373c:	ea58 0309 	orrs.w	r3, r8, r9
 8003740:	d047      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	2b04      	cmp	r3, #4
 800374a:	d82a      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003769 	.word	0x08003769
 8003758:	08003777 	.word	0x08003777
 800375c:	0800378d 	.word	0x0800378d
 8003760:	080037ab 	.word	0x080037ab
 8003764:	080037ab 	.word	0x080037ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b8e      	ldr	r3, [pc, #568]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a8d      	ldr	r2, [pc, #564]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003774:	e01a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377a:	3308      	adds	r3, #8
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fc3c 	bl	8004ffc <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800378a:	e00f      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003790:	3328      	adds	r3, #40	; 0x28
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fce3 	bl	8005160 <RCCEx_PLL3_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b4:	4b7b      	ldr	r3, [pc, #492]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	f023 0107 	bic.w	r1, r3, #7
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a78      	ldr	r2, [pc, #480]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6513      	str	r3, [r2, #80]	; 0x50
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80037de:	f04f 0b00 	mov.w	fp, #0
 80037e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80037e6:	d04c      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d030      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	d829      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037fa:	2bc0      	cmp	r3, #192	; 0xc0
 80037fc:	d02d      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003800:	d825      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d018      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d821      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003812:	e01c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4a62      	ldr	r2, [pc, #392]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003820:	e01c      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003826:	3308      	adds	r3, #8
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fbe6 	bl	8004ffc <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003836:	e011      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383c:	3328      	adds	r3, #40	; 0x28
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fc8d 	bl	8005160 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003864:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003868:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	4a4c      	ldr	r2, [pc, #304]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6513      	str	r3, [r2, #80]	; 0x50
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800388e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003898:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d053      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ae:	d035      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038b4:	d82e      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038ba:	d031      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038c0:	d828      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c6:	d01a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038cc:	d822      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80038d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d6:	d007      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80038d8:	e01c      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038da:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	4a31      	ldr	r2, [pc, #196]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038e6:	e01c      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ec:	3308      	adds	r3, #8
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fb83 	bl	8004ffc <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038fc:	e011      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	3328      	adds	r3, #40	; 0x28
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fc2a 	bl	8005160 <RCCEx_PLL3_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003912:	e006      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800391a:	e002      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800392a:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003936:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003956:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003960:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d056      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003976:	d038      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800397c:	d831      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800397e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003982:	d034      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003984:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003988:	d82b      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800398a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800398e:	d01d      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003994:	d825      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800399a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039a0:	e01f      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039a2:	bf00      	nop
 80039a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a8:	4ba2      	ldr	r3, [pc, #648]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4aa1      	ldr	r2, [pc, #644]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039b4:	e01c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	3308      	adds	r3, #8
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 fb1c 	bl	8004ffc <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039ca:	e011      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d0:	3328      	adds	r3, #40	; 0x28
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fbc3 	bl	8005160 <RCCEx_PLL3_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039e8:	e002      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039f8:	4b8e      	ldr	r3, [pc, #568]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a08:	4a8a      	ldr	r2, [pc, #552]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d03a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	2b30      	cmp	r3, #48	; 0x30
 8003a40:	d01f      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d819      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d00c      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d815      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d111      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a56:	4b77      	ldr	r3, [pc, #476]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	4a76      	ldr	r2, [pc, #472]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a62:	e011      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a68:	3308      	adds	r3, #8
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 fac5 	bl	8004ffc <RCCEx_PLL2_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a78:	e006      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a80:	e002      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003aba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ac4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d051      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad8:	d035      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ade:	d82e      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ae4:	d031      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ae6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aea:	d828      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af0:	d01a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	d822      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b00:	d007      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b02:	e01c      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a4a      	ldr	r2, [pc, #296]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b10:	e01c      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fa6e 	bl	8004ffc <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2c:	3328      	adds	r3, #40	; 0x28
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fb15 	bl	8005160 <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b54:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6513      	str	r3, [r2, #80]	; 0x50
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d056      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9c:	d033      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba2:	d82c      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ba8:	d02f      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003baa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bae:	d826      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bb4:	d02b      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003bb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bba:	d820      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc0:	d012      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc6:	d81a      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d022      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fa0e 	bl	8004ffc <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003be6:	e015      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bec:	3328      	adds	r3, #40	; 0x28
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 fab5 	bl	8005160 <RCCEx_PLL3_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c04:	e006      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c06:	bf00      	nop
 8003c08:	e004      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c2a:	4a02      	ldr	r2, [pc, #8]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	d055      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6c:	d033      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c72:	d82c      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d02f      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d826      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c84:	d02b      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c8a:	d820      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c90:	d012      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c96:	d81a      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca0:	d115      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f9a6 	bl	8004ffc <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cb6:	e015      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	3328      	adds	r3, #40	; 0x28
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fa4d 	bl	8005160 <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cec:	4ba3      	ldr	r3, [pc, #652]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cfc:	4a9f      	ldr	r2, [pc, #636]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6593      	str	r3, [r2, #88]	; 0x58
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d037      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d36:	d00e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3c:	d816      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d018      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d46:	d111      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d48:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	4a8b      	ldr	r2, [pc, #556]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d54:	e00f      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 f94c 	bl	8004ffc <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d6a:	e004      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d72:	e000      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	4a7b      	ldr	r2, [pc, #492]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6513      	str	r3, [r2, #80]	; 0x50
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003db2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d039      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d81c      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e09 	.word	0x08003e09
 8003dd0:	08003ddd 	.word	0x08003ddd
 8003dd4:	08003deb 	.word	0x08003deb
 8003dd8:	08003e09 	.word	0x08003e09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ddc:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a66      	ldr	r2, [pc, #408]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003de8:	e00f      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dee:	3308      	adds	r3, #8
 8003df0:	2102      	movs	r1, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f902 	bl	8004ffc <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	f023 0103 	bic.w	r1, r3, #3
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	4a56      	ldr	r2, [pc, #344]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e26:	e003      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f000 809f 	beq.w	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fb03 	bl	8001468 <HAL_GetTick>
 8003e62:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fd fafe 	bl	8001468 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	; 0x64
 8003e76:	d903      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e7e:	e005      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e80:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ed      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d179      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e94:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ea0:	4053      	eors	r3, r2
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d015      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eaa:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb6:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a30      	ldr	r2, [pc, #192]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ece:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	d118      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fd fac0 	bl	8001468 <HAL_GetTick>
 8003ee8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eec:	e00d      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd fabb 	bl	8001468 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ef8:	1ad2      	subs	r2, r2, r3
 8003efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d903      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0eb      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d129      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2e:	d10e      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f40:	091a      	lsrs	r2, r3, #4
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6113      	str	r3, [r2, #16]
 8003f4c:	e005      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f58:	6113      	str	r3, [r2, #16]
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	e00e      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	58024800 	.word	0x58024800
 8003f84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 0301 	and.w	r3, r2, #1
 8003f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f000 8089 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb8:	2b28      	cmp	r3, #40	; 0x28
 8003fba:	d86b      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	0800409d 	.word	0x0800409d
 8003fc8:	08004095 	.word	0x08004095
 8003fcc:	08004095 	.word	0x08004095
 8003fd0:	08004095 	.word	0x08004095
 8003fd4:	08004095 	.word	0x08004095
 8003fd8:	08004095 	.word	0x08004095
 8003fdc:	08004095 	.word	0x08004095
 8003fe0:	08004095 	.word	0x08004095
 8003fe4:	08004069 	.word	0x08004069
 8003fe8:	08004095 	.word	0x08004095
 8003fec:	08004095 	.word	0x08004095
 8003ff0:	08004095 	.word	0x08004095
 8003ff4:	08004095 	.word	0x08004095
 8003ff8:	08004095 	.word	0x08004095
 8003ffc:	08004095 	.word	0x08004095
 8004000:	08004095 	.word	0x08004095
 8004004:	0800407f 	.word	0x0800407f
 8004008:	08004095 	.word	0x08004095
 800400c:	08004095 	.word	0x08004095
 8004010:	08004095 	.word	0x08004095
 8004014:	08004095 	.word	0x08004095
 8004018:	08004095 	.word	0x08004095
 800401c:	08004095 	.word	0x08004095
 8004020:	08004095 	.word	0x08004095
 8004024:	0800409d 	.word	0x0800409d
 8004028:	08004095 	.word	0x08004095
 800402c:	08004095 	.word	0x08004095
 8004030:	08004095 	.word	0x08004095
 8004034:	08004095 	.word	0x08004095
 8004038:	08004095 	.word	0x08004095
 800403c:	08004095 	.word	0x08004095
 8004040:	08004095 	.word	0x08004095
 8004044:	0800409d 	.word	0x0800409d
 8004048:	08004095 	.word	0x08004095
 800404c:	08004095 	.word	0x08004095
 8004050:	08004095 	.word	0x08004095
 8004054:	08004095 	.word	0x08004095
 8004058:	08004095 	.word	0x08004095
 800405c:	08004095 	.word	0x08004095
 8004060:	08004095 	.word	0x08004095
 8004064:	0800409d 	.word	0x0800409d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406c:	3308      	adds	r3, #8
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 ffc3 	bl	8004ffc <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f86a 	bl	8005160 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040a6:	4bbf      	ldr	r3, [pc, #764]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b4:	4abb      	ldr	r2, [pc, #748]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6553      	str	r3, [r2, #84]	; 0x54
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 0302 	and.w	r3, r2, #2
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80040da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d041      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d824      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004141 	.word	0x08004141
 80040f8:	0800410d 	.word	0x0800410d
 80040fc:	08004123 	.word	0x08004123
 8004100:	08004141 	.word	0x08004141
 8004104:	08004141 	.word	0x08004141
 8004108:	08004141 	.word	0x08004141
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	3308      	adds	r3, #8
 8004112:	2101      	movs	r1, #1
 8004114:	4618      	mov	r0, r3
 8004116:	f000 ff71 	bl	8004ffc <RCCEx_PLL2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004126:	3328      	adds	r3, #40	; 0x28
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f818 	bl	8005160 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800414a:	4b96      	ldr	r3, [pc, #600]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	f023 0107 	bic.w	r1, r3, #7
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004158:	4a92      	ldr	r2, [pc, #584]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800415a:	430b      	orrs	r3, r1
 800415c:	6553      	str	r3, [r2, #84]	; 0x54
 800415e:	e003      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004164:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 0304 	and.w	r3, r2, #4
 8004174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800417e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d044      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004190:	2b05      	cmp	r3, #5
 8004192:	d825      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041e9 	.word	0x080041e9
 80041a0:	080041b5 	.word	0x080041b5
 80041a4:	080041cb 	.word	0x080041cb
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	080041e9 	.word	0x080041e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ff1d 	bl	8004ffc <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ce:	3328      	adds	r3, #40	; 0x28
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 ffc4 	bl	8005160 <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f2:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f023 0107 	bic.w	r1, r3, #7
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004202:	4a68      	ldr	r2, [pc, #416]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6593      	str	r3, [r2, #88]	; 0x58
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f002 0320 	and.w	r3, r2, #32
 800421e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d055      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800423e:	d033      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004244:	d82c      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d02f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d826      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004252:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004256:	d02b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004258:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800425c:	d820      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800425e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004262:	d012      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004268:	d81a      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d022      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800426e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004272:	d115      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004278:	3308      	adds	r3, #8
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 febd 	bl	8004ffc <RCCEx_PLL2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004288:	e015      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	3328      	adds	r3, #40	; 0x28
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 ff64 	bl	8005160 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800429e:	e00a      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042a6:	e006      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042a8:	bf00      	nop
 80042aa:	e004      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6553      	str	r3, [r2, #84]	; 0x54
 80042d4:	e003      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80042ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80042f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4313      	orrs	r3, r2
 80042fc:	d058      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004306:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800430a:	d033      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800430c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004310:	d82c      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d02f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431c:	d826      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800431e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004322:	d02b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004328:	d820      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800432a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432e:	d012      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004334:	d81a      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d022      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433e:	d115      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004344:	3308      	adds	r3, #8
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fe57 	bl	8004ffc <RCCEx_PLL2_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004354:	e015      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435a:	3328      	adds	r3, #40	; 0x28
 800435c:	2102      	movs	r1, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fefe 	bl	8005160 <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800436a:	e00a      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004372:	e006      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004374:	bf00      	nop
 8004376:	e004      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10e      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800439a:	4a02      	ldr	r2, [pc, #8]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800439c:	430b      	orrs	r3, r1
 800439e:	6593      	str	r3, [r2, #88]	; 0x58
 80043a0:	e006      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80043ca:	460b      	mov	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	d055      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043dc:	d033      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80043de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043e2:	d82c      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e8:	d02f      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ee:	d826      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043f4:	d02b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043fa:	d820      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004400:	d012      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004406:	d81a      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004410:	d115      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	3308      	adds	r3, #8
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fdee 	bl	8004ffc <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004426:	e015      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	3328      	adds	r3, #40	; 0x28
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fe95 	bl	8005160 <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800443c:	e00a      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004446:	bf00      	nop
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800445c:	4ba1      	ldr	r3, [pc, #644]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800446c:	4a9d      	ldr	r2, [pc, #628]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
 8004472:	e003      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004478:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f002 0308 	and.w	r3, r2, #8
 8004488:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800448c:	2300      	movs	r3, #0
 800448e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004492:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d01e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ae:	3328      	adds	r3, #40	; 0x28
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fe54 	bl	8005160 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044c4:	4b87      	ldr	r3, [pc, #540]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d4:	4a83      	ldr	r2, [pc, #524]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f002 0310 	and.w	r3, r2, #16
 80044e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d01e      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004506:	d10c      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450c:	3328      	adds	r3, #40	; 0x28
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fe25 	bl	8005160 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004522:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004532:	4a6c      	ldr	r2, [pc, #432]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004534:	430b      	orrs	r3, r1
 8004536:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800454e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d03e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800455c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004564:	d022      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800456a:	d81b      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d00b      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004576:	e015      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457c:	3308      	adds	r3, #8
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fd3b 	bl	8004ffc <RCCEx_PLL2_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800458c:	e00f      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004592:	3328      	adds	r3, #40	; 0x28
 8004594:	2102      	movs	r1, #2
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fde2 	bl	8005160 <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80045ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b6:	4b4b      	ldr	r3, [pc, #300]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045c6:	4a47      	ldr	r2, [pc, #284]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6593      	str	r3, [r2, #88]	; 0x58
 80045cc:	e003      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80045e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80045e4:	2300      	movs	r3, #0
 80045e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d03b      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045fe:	d01f      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004604:	d818      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460a:	d003      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800460c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004610:	d007      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004612:	e011      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004614:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4a32      	ldr	r2, [pc, #200]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004620:	e00f      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004626:	3328      	adds	r3, #40	; 0x28
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd98 	bl	8005160 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6553      	str	r3, [r2, #84]	; 0x54
 8004660:	e003      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004666:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004676:	673b      	str	r3, [r7, #112]	; 0x70
 8004678:	2300      	movs	r3, #0
 800467a:	677b      	str	r3, [r7, #116]	; 0x74
 800467c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d034      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d007      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004696:	e011      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046a4:	e00e      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046aa:	3308      	adds	r3, #8
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fca4 	bl	8004ffc <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046ba:	e003      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	4a02      	ldr	r2, [pc, #8]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046dc:	430b      	orrs	r3, r1
 80046de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046e0:	e006      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80046e2:	bf00      	nop
 80046e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80046fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046fe:	2300      	movs	r3, #0
 8004700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004702:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	d00c      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004710:	3328      	adds	r3, #40	; 0x28
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fd23 	bl	8005160 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004732:	663b      	str	r3, [r7, #96]	; 0x60
 8004734:	2300      	movs	r3, #0
 8004736:	667b      	str	r3, [r7, #100]	; 0x64
 8004738:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800473c:	460b      	mov	r3, r1
 800473e:	4313      	orrs	r3, r2
 8004740:	d038      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800474e:	d018      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004754:	d811      	bhi.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475a:	d014      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004760:	d80b      	bhi.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476a:	d106      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476c:	4bc3      	ldr	r3, [pc, #780]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	4ac2      	ldr	r2, [pc, #776]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004778:	e008      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004780:	e004      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800478a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004794:	4bb9      	ldr	r3, [pc, #740]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a4:	4ab5      	ldr	r2, [pc, #724]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a6:	430b      	orrs	r3, r1
 80047a8:	6553      	str	r3, [r2, #84]	; 0x54
 80047aa:	e003      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80047c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c2:	2300      	movs	r3, #0
 80047c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047d0:	4baa      	ldr	r3, [pc, #680]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047de:	4aa7      	ldr	r2, [pc, #668]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80047f0:	653b      	str	r3, [r7, #80]	; 0x50
 80047f2:	2300      	movs	r3, #0
 80047f4:	657b      	str	r3, [r7, #84]	; 0x54
 80047f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004800:	4b9e      	ldr	r3, [pc, #632]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004810:	4a9a      	ldr	r2, [pc, #616]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004812:	430b      	orrs	r3, r1
 8004814:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
 8004824:	2300      	movs	r3, #0
 8004826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004828:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004832:	4b92      	ldr	r3, [pc, #584]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004840:	4a8e      	ldr	r2, [pc, #568]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004842:	430b      	orrs	r3, r1
 8004844:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004852:	643b      	str	r3, [r7, #64]	; 0x40
 8004854:	2300      	movs	r3, #0
 8004856:	647b      	str	r3, [r7, #68]	; 0x44
 8004858:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004862:	4b86      	ldr	r3, [pc, #536]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	4a85      	ldr	r2, [pc, #532]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004868:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800486c:	6113      	str	r3, [r2, #16]
 800486e:	4b83      	ldr	r3, [pc, #524]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004876:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800487a:	4a80      	ldr	r2, [pc, #512]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487c:	430b      	orrs	r3, r1
 800487e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800488c:	63bb      	str	r3, [r7, #56]	; 0x38
 800488e:	2300      	movs	r3, #0
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004892:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004896:	460b      	mov	r3, r1
 8004898:	4313      	orrs	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800489c:	4b77      	ldr	r3, [pc, #476]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	4a74      	ldr	r2, [pc, #464]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 80048be:	2300      	movs	r3, #0
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80048c6:	460b      	mov	r3, r1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048cc:	4b6b      	ldr	r3, [pc, #428]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048dc:	4a67      	ldr	r2, [pc, #412]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	2100      	movs	r1, #0
 80048ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d011      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	3308      	adds	r3, #8
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb78 	bl	8004ffc <RCCEx_PLL2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800491e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	2100      	movs	r1, #0
 800492c:	6239      	str	r1, [r7, #32]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
 8004934:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004942:	3308      	adds	r3, #8
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fb58 	bl	8004ffc <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	2100      	movs	r1, #0
 800496c:	61b9      	str	r1, [r7, #24]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004982:	3308      	adds	r3, #8
 8004984:	2102      	movs	r1, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fb38 	bl	8004ffc <RCCEx_PLL2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	2100      	movs	r1, #0
 80049ac:	6139      	str	r1, [r7, #16]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049b8:	460b      	mov	r3, r1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d011      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c2:	3328      	adds	r3, #40	; 0x28
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fbca 	bl	8005160 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	2100      	movs	r1, #0
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d011      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a02:	3328      	adds	r3, #40	; 0x28
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fbaa 	bl	8005160 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	6039      	str	r1, [r7, #0]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d011      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a42:	3328      	adds	r3, #40	; 0x28
 8004a44:	2102      	movs	r1, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fb8a 	bl	8005160 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004a62:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004a76:	46bd      	mov	sp, r7
 8004a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7c:	58024400 	.word	0x58024400

08004a80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a84:	f7fe fd96 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	08006af4 	.word	0x08006af4

08004aac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab4:	4ba1      	ldr	r3, [pc, #644]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004abe:	4b9f      	ldr	r3, [pc, #636]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	0b1b      	lsrs	r3, r3, #12
 8004ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004aca:	4b9c      	ldr	r3, [pc, #624]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ad6:	4b99      	ldr	r3, [pc, #612]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	08db      	lsrs	r3, r3, #3
 8004adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8111 	beq.w	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	f000 8083 	beq.w	8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	f200 80a1 	bhi.w	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d056      	beq.n	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b16:	e099      	b.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b18:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02d      	beq.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b24:	4b85      	ldr	r3, [pc, #532]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	4a84      	ldr	r2, [pc, #528]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b7e:	e087      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc2:	e065      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd6:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c06:	e043      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4a:	e021      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c90:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb6:	ee17 2a90 	vmov	r2, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce4:	ee17 2a90 	vmov	r2, s15
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	0e1b      	lsrs	r3, r3, #24
 8004cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d12:	ee17 2a90 	vmov	r2, s15
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d1a:	e008      	b.n	8004d2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	3724      	adds	r7, #36	; 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	03d09000 	.word	0x03d09000
 8004d44:	46000000 	.word	0x46000000
 8004d48:	4c742400 	.word	0x4c742400
 8004d4c:	4a742400 	.word	0x4a742400
 8004d50:	4af42400 	.word	0x4af42400

08004d54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b089      	sub	sp, #36	; 0x24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d5c:	4ba1      	ldr	r3, [pc, #644]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d66:	4b9f      	ldr	r3, [pc, #636]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d72:	4b9c      	ldr	r3, [pc, #624]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d7e:	4b99      	ldr	r3, [pc, #612]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8111 	beq.w	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	f000 8083 	beq.w	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	f200 80a1 	bhi.w	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d056      	beq.n	8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004dbe:	e099      	b.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dc0:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d02d      	beq.n	8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dcc:	4b85      	ldr	r3, [pc, #532]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	08db      	lsrs	r3, r3, #3
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	4a84      	ldr	r2, [pc, #528]	; (8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ddc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df6:	4b7b      	ldr	r3, [pc, #492]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e26:	e087      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3a:	4b6a      	ldr	r3, [pc, #424]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6a:	e065      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eae:	e043      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec2:	4b48      	ldr	r3, [pc, #288]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef2:	e021      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f06:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f38:	4b2a      	ldr	r3, [pc, #168]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	0a5b      	lsrs	r3, r3, #9
 8004f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5e:	ee17 2a90 	vmov	r2, s15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8c:	ee17 2a90 	vmov	r2, s15
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f94:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	0e1b      	lsrs	r3, r3, #24
 8004f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fba:	ee17 2a90 	vmov	r2, s15
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]
}
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	03d09000 	.word	0x03d09000
 8004fec:	46000000 	.word	0x46000000
 8004ff0:	4c742400 	.word	0x4c742400
 8004ff4:	4a742400 	.word	0x4a742400
 8004ff8:	4af42400 	.word	0x4af42400

08004ffc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800500a:	4b53      	ldr	r3, [pc, #332]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d101      	bne.n	800501a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e099      	b.n	800514e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800501a:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4e      	ldr	r2, [pc, #312]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005020:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005026:	f7fc fa1f 	bl	8001468 <HAL_GetTick>
 800502a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800502c:	e008      	b.n	8005040 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800502e:	f7fc fa1b 	bl	8001468 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e086      	b.n	800514e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005040:	4b45      	ldr	r3, [pc, #276]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800504c:	4b42      	ldr	r3, [pc, #264]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	031b      	lsls	r3, r3, #12
 800505a:	493f      	ldr	r1, [pc, #252]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	628b      	str	r3, [r1, #40]	; 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	3b01      	subs	r3, #1
 8005066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	3b01      	subs	r3, #1
 8005070:	025b      	lsls	r3, r3, #9
 8005072:	b29b      	uxth	r3, r3
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	3b01      	subs	r3, #1
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	3b01      	subs	r3, #1
 800508a:	061b      	lsls	r3, r3, #24
 800508c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005090:	4931      	ldr	r1, [pc, #196]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005096:	4b30      	ldr	r3, [pc, #192]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	492d      	ldr	r1, [pc, #180]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050a8:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	f023 0220 	bic.w	r2, r3, #32
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	4928      	ldr	r1, [pc, #160]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050ba:	4b27      	ldr	r3, [pc, #156]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	4a26      	ldr	r2, [pc, #152]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	f023 0310 	bic.w	r3, r3, #16
 80050c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <RCCEx_PLL2_Config+0x160>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	69d2      	ldr	r2, [r2, #28]
 80050d2:	00d2      	lsls	r2, r2, #3
 80050d4:	4920      	ldr	r1, [pc, #128]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050da:	4b1f      	ldr	r3, [pc, #124]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050e0:	f043 0310 	orr.w	r3, r3, #16
 80050e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050ec:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	4a19      	ldr	r2, [pc, #100]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f8:	e00f      	b.n	800511a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d106      	bne.n	800510e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005100:	4b15      	ldr	r3, [pc, #84]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a14      	ldr	r2, [pc, #80]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800510c:	e005      	b.n	800511a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4a11      	ldr	r2, [pc, #68]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800511a:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a0e      	ldr	r2, [pc, #56]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005126:	f7fc f99f 	bl	8001468 <HAL_GetTick>
 800512a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800512c:	e008      	b.n	8005140 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800512e:	f7fc f99b 	bl	8001468 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e006      	b.n	800514e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
 800515c:	ffff0007 	.word	0xffff0007

08005160 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800516e:	4b53      	ldr	r3, [pc, #332]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b03      	cmp	r3, #3
 8005178:	d101      	bne.n	800517e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e099      	b.n	80052b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800517e:	4b4f      	ldr	r3, [pc, #316]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4e      	ldr	r2, [pc, #312]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518a:	f7fc f96d 	bl	8001468 <HAL_GetTick>
 800518e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005190:	e008      	b.n	80051a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005192:	f7fc f969 	bl	8001468 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e086      	b.n	80052b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051a4:	4b45      	ldr	r3, [pc, #276]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051b0:	4b42      	ldr	r3, [pc, #264]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	051b      	lsls	r3, r3, #20
 80051be:	493f      	ldr	r1, [pc, #252]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	628b      	str	r3, [r1, #40]	; 0x28
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	025b      	lsls	r3, r3, #9
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	3b01      	subs	r3, #1
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	061b      	lsls	r3, r3, #24
 80051f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051f4:	4931      	ldr	r1, [pc, #196]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051fa:	4b30      	ldr	r3, [pc, #192]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	492d      	ldr	r1, [pc, #180]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800520c:	4b2b      	ldr	r3, [pc, #172]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	4928      	ldr	r1, [pc, #160]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 800521a:	4313      	orrs	r3, r2
 800521c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800521e:	4b27      	ldr	r3, [pc, #156]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	4a26      	ldr	r2, [pc, #152]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 800522c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522e:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <RCCEx_PLL3_Config+0x160>)
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	69d2      	ldr	r2, [r2, #28]
 8005236:	00d2      	lsls	r2, r2, #3
 8005238:	4920      	ldr	r1, [pc, #128]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 800523a:	4313      	orrs	r3, r2
 800523c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800523e:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005250:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800525c:	e00f      	b.n	800527e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005264:	4b15      	ldr	r3, [pc, #84]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4a14      	ldr	r2, [pc, #80]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 800526a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800526e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005270:	e005      	b.n	800527e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	4a11      	ldr	r2, [pc, #68]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800527c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fc f8ed 	bl	8001468 <HAL_GetTick>
 800528e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005290:	e008      	b.n	80052a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005292:	f7fc f8e9 	bl	8001468 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e006      	b.n	80052b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <RCCEx_PLL3_Config+0x15c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400
 80052c0:	ffff0007 	.word	0xffff0007

080052c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e042      	b.n	800535c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fb feed 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2224      	movs	r2, #36	; 0x24
 80052f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f82c 	bl	8005364 <UART_SetConfig>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e022      	b.n	800535c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fd88 	bl	8005e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fe0f 	bl	8005f78 <UART_CheckIdleState>
 800535a:	4603      	mov	r3, r0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b092      	sub	sp, #72	; 0x48
 800536a:	af00      	add	r7, sp, #0
 800536c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	431a      	orrs	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	431a      	orrs	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4313      	orrs	r3, r2
 800538a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4bbe      	ldr	r3, [pc, #760]	; (800568c <UART_SetConfig+0x328>)
 8005394:	4013      	ands	r3, r2
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800539c:	430b      	orrs	r3, r1
 800539e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4ab3      	ldr	r2, [pc, #716]	; (8005690 <UART_SetConfig+0x32c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053cc:	4313      	orrs	r3, r2
 80053ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	4baf      	ldr	r3, [pc, #700]	; (8005694 <UART_SetConfig+0x330>)
 80053d8:	4013      	ands	r3, r2
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	f023 010f 	bic.w	r1, r3, #15
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4aa6      	ldr	r2, [pc, #664]	; (8005698 <UART_SetConfig+0x334>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d177      	bne.n	80054f4 <UART_SetConfig+0x190>
 8005404:	4ba5      	ldr	r3, [pc, #660]	; (800569c <UART_SetConfig+0x338>)
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800540c:	2b28      	cmp	r3, #40	; 0x28
 800540e:	d86d      	bhi.n	80054ec <UART_SetConfig+0x188>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0xb4>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	080054bd 	.word	0x080054bd
 800541c:	080054ed 	.word	0x080054ed
 8005420:	080054ed 	.word	0x080054ed
 8005424:	080054ed 	.word	0x080054ed
 8005428:	080054ed 	.word	0x080054ed
 800542c:	080054ed 	.word	0x080054ed
 8005430:	080054ed 	.word	0x080054ed
 8005434:	080054ed 	.word	0x080054ed
 8005438:	080054c5 	.word	0x080054c5
 800543c:	080054ed 	.word	0x080054ed
 8005440:	080054ed 	.word	0x080054ed
 8005444:	080054ed 	.word	0x080054ed
 8005448:	080054ed 	.word	0x080054ed
 800544c:	080054ed 	.word	0x080054ed
 8005450:	080054ed 	.word	0x080054ed
 8005454:	080054ed 	.word	0x080054ed
 8005458:	080054cd 	.word	0x080054cd
 800545c:	080054ed 	.word	0x080054ed
 8005460:	080054ed 	.word	0x080054ed
 8005464:	080054ed 	.word	0x080054ed
 8005468:	080054ed 	.word	0x080054ed
 800546c:	080054ed 	.word	0x080054ed
 8005470:	080054ed 	.word	0x080054ed
 8005474:	080054ed 	.word	0x080054ed
 8005478:	080054d5 	.word	0x080054d5
 800547c:	080054ed 	.word	0x080054ed
 8005480:	080054ed 	.word	0x080054ed
 8005484:	080054ed 	.word	0x080054ed
 8005488:	080054ed 	.word	0x080054ed
 800548c:	080054ed 	.word	0x080054ed
 8005490:	080054ed 	.word	0x080054ed
 8005494:	080054ed 	.word	0x080054ed
 8005498:	080054dd 	.word	0x080054dd
 800549c:	080054ed 	.word	0x080054ed
 80054a0:	080054ed 	.word	0x080054ed
 80054a4:	080054ed 	.word	0x080054ed
 80054a8:	080054ed 	.word	0x080054ed
 80054ac:	080054ed 	.word	0x080054ed
 80054b0:	080054ed 	.word	0x080054ed
 80054b4:	080054ed 	.word	0x080054ed
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e222      	b.n	800590a <UART_SetConfig+0x5a6>
 80054c4:	2304      	movs	r3, #4
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e21e      	b.n	800590a <UART_SetConfig+0x5a6>
 80054cc:	2308      	movs	r3, #8
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e21a      	b.n	800590a <UART_SetConfig+0x5a6>
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e216      	b.n	800590a <UART_SetConfig+0x5a6>
 80054dc:	2320      	movs	r3, #32
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e2:	e212      	b.n	800590a <UART_SetConfig+0x5a6>
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ea:	e20e      	b.n	800590a <UART_SetConfig+0x5a6>
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f2:	e20a      	b.n	800590a <UART_SetConfig+0x5a6>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a69      	ldr	r2, [pc, #420]	; (80056a0 <UART_SetConfig+0x33c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d130      	bne.n	8005560 <UART_SetConfig+0x1fc>
 80054fe:	4b67      	ldr	r3, [pc, #412]	; (800569c <UART_SetConfig+0x338>)
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	2b05      	cmp	r3, #5
 8005508:	d826      	bhi.n	8005558 <UART_SetConfig+0x1f4>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x1ac>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005529 	.word	0x08005529
 8005514:	08005531 	.word	0x08005531
 8005518:	08005539 	.word	0x08005539
 800551c:	08005541 	.word	0x08005541
 8005520:	08005549 	.word	0x08005549
 8005524:	08005551 	.word	0x08005551
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552e:	e1ec      	b.n	800590a <UART_SetConfig+0x5a6>
 8005530:	2304      	movs	r3, #4
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005536:	e1e8      	b.n	800590a <UART_SetConfig+0x5a6>
 8005538:	2308      	movs	r3, #8
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553e:	e1e4      	b.n	800590a <UART_SetConfig+0x5a6>
 8005540:	2310      	movs	r3, #16
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005546:	e1e0      	b.n	800590a <UART_SetConfig+0x5a6>
 8005548:	2320      	movs	r3, #32
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554e:	e1dc      	b.n	800590a <UART_SetConfig+0x5a6>
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005556:	e1d8      	b.n	800590a <UART_SetConfig+0x5a6>
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e1d4      	b.n	800590a <UART_SetConfig+0x5a6>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a4f      	ldr	r2, [pc, #316]	; (80056a4 <UART_SetConfig+0x340>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d130      	bne.n	80055cc <UART_SetConfig+0x268>
 800556a:	4b4c      	ldr	r3, [pc, #304]	; (800569c <UART_SetConfig+0x338>)
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b05      	cmp	r3, #5
 8005574:	d826      	bhi.n	80055c4 <UART_SetConfig+0x260>
 8005576:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0x218>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	08005595 	.word	0x08005595
 8005580:	0800559d 	.word	0x0800559d
 8005584:	080055a5 	.word	0x080055a5
 8005588:	080055ad 	.word	0x080055ad
 800558c:	080055b5 	.word	0x080055b5
 8005590:	080055bd 	.word	0x080055bd
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e1b6      	b.n	800590a <UART_SetConfig+0x5a6>
 800559c:	2304      	movs	r3, #4
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e1b2      	b.n	800590a <UART_SetConfig+0x5a6>
 80055a4:	2308      	movs	r3, #8
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e1ae      	b.n	800590a <UART_SetConfig+0x5a6>
 80055ac:	2310      	movs	r3, #16
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e1aa      	b.n	800590a <UART_SetConfig+0x5a6>
 80055b4:	2320      	movs	r3, #32
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ba:	e1a6      	b.n	800590a <UART_SetConfig+0x5a6>
 80055bc:	2340      	movs	r3, #64	; 0x40
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e1a2      	b.n	800590a <UART_SetConfig+0x5a6>
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ca:	e19e      	b.n	800590a <UART_SetConfig+0x5a6>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a35      	ldr	r2, [pc, #212]	; (80056a8 <UART_SetConfig+0x344>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d130      	bne.n	8005638 <UART_SetConfig+0x2d4>
 80055d6:	4b31      	ldr	r3, [pc, #196]	; (800569c <UART_SetConfig+0x338>)
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d826      	bhi.n	8005630 <UART_SetConfig+0x2cc>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <UART_SetConfig+0x284>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	08005601 	.word	0x08005601
 80055ec:	08005609 	.word	0x08005609
 80055f0:	08005611 	.word	0x08005611
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005629 	.word	0x08005629
 8005600:	2300      	movs	r3, #0
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e180      	b.n	800590a <UART_SetConfig+0x5a6>
 8005608:	2304      	movs	r3, #4
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e17c      	b.n	800590a <UART_SetConfig+0x5a6>
 8005610:	2308      	movs	r3, #8
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e178      	b.n	800590a <UART_SetConfig+0x5a6>
 8005618:	2310      	movs	r3, #16
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561e:	e174      	b.n	800590a <UART_SetConfig+0x5a6>
 8005620:	2320      	movs	r3, #32
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005626:	e170      	b.n	800590a <UART_SetConfig+0x5a6>
 8005628:	2340      	movs	r3, #64	; 0x40
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562e:	e16c      	b.n	800590a <UART_SetConfig+0x5a6>
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005636:	e168      	b.n	800590a <UART_SetConfig+0x5a6>
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <UART_SetConfig+0x348>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d142      	bne.n	80056c8 <UART_SetConfig+0x364>
 8005642:	4b16      	ldr	r3, [pc, #88]	; (800569c <UART_SetConfig+0x338>)
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b05      	cmp	r3, #5
 800564c:	d838      	bhi.n	80056c0 <UART_SetConfig+0x35c>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <UART_SetConfig+0x2f0>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	0800566d 	.word	0x0800566d
 8005658:	08005675 	.word	0x08005675
 800565c:	0800567d 	.word	0x0800567d
 8005660:	08005685 	.word	0x08005685
 8005664:	080056b1 	.word	0x080056b1
 8005668:	080056b9 	.word	0x080056b9
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e14a      	b.n	800590a <UART_SetConfig+0x5a6>
 8005674:	2304      	movs	r3, #4
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e146      	b.n	800590a <UART_SetConfig+0x5a6>
 800567c:	2308      	movs	r3, #8
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005682:	e142      	b.n	800590a <UART_SetConfig+0x5a6>
 8005684:	2310      	movs	r3, #16
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568a:	e13e      	b.n	800590a <UART_SetConfig+0x5a6>
 800568c:	cfff69f3 	.word	0xcfff69f3
 8005690:	58000c00 	.word	0x58000c00
 8005694:	11fff4ff 	.word	0x11fff4ff
 8005698:	40011000 	.word	0x40011000
 800569c:	58024400 	.word	0x58024400
 80056a0:	40004400 	.word	0x40004400
 80056a4:	40004800 	.word	0x40004800
 80056a8:	40004c00 	.word	0x40004c00
 80056ac:	40005000 	.word	0x40005000
 80056b0:	2320      	movs	r3, #32
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b6:	e128      	b.n	800590a <UART_SetConfig+0x5a6>
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e124      	b.n	800590a <UART_SetConfig+0x5a6>
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e120      	b.n	800590a <UART_SetConfig+0x5a6>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4acb      	ldr	r2, [pc, #812]	; (80059fc <UART_SetConfig+0x698>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d176      	bne.n	80057c0 <UART_SetConfig+0x45c>
 80056d2:	4bcb      	ldr	r3, [pc, #812]	; (8005a00 <UART_SetConfig+0x69c>)
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056da:	2b28      	cmp	r3, #40	; 0x28
 80056dc:	d86c      	bhi.n	80057b8 <UART_SetConfig+0x454>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x380>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005789 	.word	0x08005789
 80056e8:	080057b9 	.word	0x080057b9
 80056ec:	080057b9 	.word	0x080057b9
 80056f0:	080057b9 	.word	0x080057b9
 80056f4:	080057b9 	.word	0x080057b9
 80056f8:	080057b9 	.word	0x080057b9
 80056fc:	080057b9 	.word	0x080057b9
 8005700:	080057b9 	.word	0x080057b9
 8005704:	08005791 	.word	0x08005791
 8005708:	080057b9 	.word	0x080057b9
 800570c:	080057b9 	.word	0x080057b9
 8005710:	080057b9 	.word	0x080057b9
 8005714:	080057b9 	.word	0x080057b9
 8005718:	080057b9 	.word	0x080057b9
 800571c:	080057b9 	.word	0x080057b9
 8005720:	080057b9 	.word	0x080057b9
 8005724:	08005799 	.word	0x08005799
 8005728:	080057b9 	.word	0x080057b9
 800572c:	080057b9 	.word	0x080057b9
 8005730:	080057b9 	.word	0x080057b9
 8005734:	080057b9 	.word	0x080057b9
 8005738:	080057b9 	.word	0x080057b9
 800573c:	080057b9 	.word	0x080057b9
 8005740:	080057b9 	.word	0x080057b9
 8005744:	080057a1 	.word	0x080057a1
 8005748:	080057b9 	.word	0x080057b9
 800574c:	080057b9 	.word	0x080057b9
 8005750:	080057b9 	.word	0x080057b9
 8005754:	080057b9 	.word	0x080057b9
 8005758:	080057b9 	.word	0x080057b9
 800575c:	080057b9 	.word	0x080057b9
 8005760:	080057b9 	.word	0x080057b9
 8005764:	080057a9 	.word	0x080057a9
 8005768:	080057b9 	.word	0x080057b9
 800576c:	080057b9 	.word	0x080057b9
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057b9 	.word	0x080057b9
 8005778:	080057b9 	.word	0x080057b9
 800577c:	080057b9 	.word	0x080057b9
 8005780:	080057b9 	.word	0x080057b9
 8005784:	080057b1 	.word	0x080057b1
 8005788:	2301      	movs	r3, #1
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578e:	e0bc      	b.n	800590a <UART_SetConfig+0x5a6>
 8005790:	2304      	movs	r3, #4
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005796:	e0b8      	b.n	800590a <UART_SetConfig+0x5a6>
 8005798:	2308      	movs	r3, #8
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e0b4      	b.n	800590a <UART_SetConfig+0x5a6>
 80057a0:	2310      	movs	r3, #16
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e0b0      	b.n	800590a <UART_SetConfig+0x5a6>
 80057a8:	2320      	movs	r3, #32
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e0ac      	b.n	800590a <UART_SetConfig+0x5a6>
 80057b0:	2340      	movs	r3, #64	; 0x40
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e0a8      	b.n	800590a <UART_SetConfig+0x5a6>
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057be:	e0a4      	b.n	800590a <UART_SetConfig+0x5a6>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a8f      	ldr	r2, [pc, #572]	; (8005a04 <UART_SetConfig+0x6a0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d130      	bne.n	800582c <UART_SetConfig+0x4c8>
 80057ca:	4b8d      	ldr	r3, [pc, #564]	; (8005a00 <UART_SetConfig+0x69c>)
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	d826      	bhi.n	8005824 <UART_SetConfig+0x4c0>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <UART_SetConfig+0x478>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057f5 	.word	0x080057f5
 80057e0:	080057fd 	.word	0x080057fd
 80057e4:	08005805 	.word	0x08005805
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e086      	b.n	800590a <UART_SetConfig+0x5a6>
 80057fc:	2304      	movs	r3, #4
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e082      	b.n	800590a <UART_SetConfig+0x5a6>
 8005804:	2308      	movs	r3, #8
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e07e      	b.n	800590a <UART_SetConfig+0x5a6>
 800580c:	2310      	movs	r3, #16
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e07a      	b.n	800590a <UART_SetConfig+0x5a6>
 8005814:	2320      	movs	r3, #32
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581a:	e076      	b.n	800590a <UART_SetConfig+0x5a6>
 800581c:	2340      	movs	r3, #64	; 0x40
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005822:	e072      	b.n	800590a <UART_SetConfig+0x5a6>
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582a:	e06e      	b.n	800590a <UART_SetConfig+0x5a6>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a75      	ldr	r2, [pc, #468]	; (8005a08 <UART_SetConfig+0x6a4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d130      	bne.n	8005898 <UART_SetConfig+0x534>
 8005836:	4b72      	ldr	r3, [pc, #456]	; (8005a00 <UART_SetConfig+0x69c>)
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	2b05      	cmp	r3, #5
 8005840:	d826      	bhi.n	8005890 <UART_SetConfig+0x52c>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x4e4>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005861 	.word	0x08005861
 800584c:	08005869 	.word	0x08005869
 8005850:	08005871 	.word	0x08005871
 8005854:	08005879 	.word	0x08005879
 8005858:	08005881 	.word	0x08005881
 800585c:	08005889 	.word	0x08005889
 8005860:	2300      	movs	r3, #0
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e050      	b.n	800590a <UART_SetConfig+0x5a6>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e04c      	b.n	800590a <UART_SetConfig+0x5a6>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e048      	b.n	800590a <UART_SetConfig+0x5a6>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587e:	e044      	b.n	800590a <UART_SetConfig+0x5a6>
 8005880:	2320      	movs	r3, #32
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005886:	e040      	b.n	800590a <UART_SetConfig+0x5a6>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588e:	e03c      	b.n	800590a <UART_SetConfig+0x5a6>
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005896:	e038      	b.n	800590a <UART_SetConfig+0x5a6>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a5b      	ldr	r2, [pc, #364]	; (8005a0c <UART_SetConfig+0x6a8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d130      	bne.n	8005904 <UART_SetConfig+0x5a0>
 80058a2:	4b57      	ldr	r3, [pc, #348]	; (8005a00 <UART_SetConfig+0x69c>)
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d826      	bhi.n	80058fc <UART_SetConfig+0x598>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x550>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058cd 	.word	0x080058cd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	2302      	movs	r3, #2
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e01a      	b.n	800590a <UART_SetConfig+0x5a6>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e016      	b.n	800590a <UART_SetConfig+0x5a6>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e2:	e012      	b.n	800590a <UART_SetConfig+0x5a6>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ea:	e00e      	b.n	800590a <UART_SetConfig+0x5a6>
 80058ec:	2320      	movs	r3, #32
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f2:	e00a      	b.n	800590a <UART_SetConfig+0x5a6>
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fa:	e006      	b.n	800590a <UART_SetConfig+0x5a6>
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005902:	e002      	b.n	800590a <UART_SetConfig+0x5a6>
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3f      	ldr	r2, [pc, #252]	; (8005a0c <UART_SetConfig+0x6a8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	f040 80f8 	bne.w	8005b06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005916:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800591a:	2b20      	cmp	r3, #32
 800591c:	dc46      	bgt.n	80059ac <UART_SetConfig+0x648>
 800591e:	2b02      	cmp	r3, #2
 8005920:	f2c0 8082 	blt.w	8005a28 <UART_SetConfig+0x6c4>
 8005924:	3b02      	subs	r3, #2
 8005926:	2b1e      	cmp	r3, #30
 8005928:	d87e      	bhi.n	8005a28 <UART_SetConfig+0x6c4>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x5cc>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	080059b3 	.word	0x080059b3
 8005934:	08005a29 	.word	0x08005a29
 8005938:	080059bb 	.word	0x080059bb
 800593c:	08005a29 	.word	0x08005a29
 8005940:	08005a29 	.word	0x08005a29
 8005944:	08005a29 	.word	0x08005a29
 8005948:	080059cb 	.word	0x080059cb
 800594c:	08005a29 	.word	0x08005a29
 8005950:	08005a29 	.word	0x08005a29
 8005954:	08005a29 	.word	0x08005a29
 8005958:	08005a29 	.word	0x08005a29
 800595c:	08005a29 	.word	0x08005a29
 8005960:	08005a29 	.word	0x08005a29
 8005964:	08005a29 	.word	0x08005a29
 8005968:	080059db 	.word	0x080059db
 800596c:	08005a29 	.word	0x08005a29
 8005970:	08005a29 	.word	0x08005a29
 8005974:	08005a29 	.word	0x08005a29
 8005978:	08005a29 	.word	0x08005a29
 800597c:	08005a29 	.word	0x08005a29
 8005980:	08005a29 	.word	0x08005a29
 8005984:	08005a29 	.word	0x08005a29
 8005988:	08005a29 	.word	0x08005a29
 800598c:	08005a29 	.word	0x08005a29
 8005990:	08005a29 	.word	0x08005a29
 8005994:	08005a29 	.word	0x08005a29
 8005998:	08005a29 	.word	0x08005a29
 800599c:	08005a29 	.word	0x08005a29
 80059a0:	08005a29 	.word	0x08005a29
 80059a4:	08005a29 	.word	0x08005a29
 80059a8:	08005a1b 	.word	0x08005a1b
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d037      	beq.n	8005a20 <UART_SetConfig+0x6bc>
 80059b0:	e03a      	b.n	8005a28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059b2:	f7ff f865 	bl	8004a80 <HAL_RCCEx_GetD3PCLK1Freq>
 80059b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059b8:	e03c      	b.n	8005a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff f874 	bl	8004aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c8:	e034      	b.n	8005a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ca:	f107 0318 	add.w	r3, r7, #24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff f9c0 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059d8:	e02c      	b.n	8005a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059da:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <UART_SetConfig+0x69c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d016      	beq.n	8005a14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <UART_SetConfig+0x69c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	4a07      	ldr	r2, [pc, #28]	; (8005a10 <UART_SetConfig+0x6ac>)
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059f8:	e01c      	b.n	8005a34 <UART_SetConfig+0x6d0>
 80059fa:	bf00      	nop
 80059fc:	40011400 	.word	0x40011400
 8005a00:	58024400 	.word	0x58024400
 8005a04:	40007800 	.word	0x40007800
 8005a08:	40007c00 	.word	0x40007c00
 8005a0c:	58000c00 	.word	0x58000c00
 8005a10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005a14:	4b9d      	ldr	r3, [pc, #628]	; (8005c8c <UART_SetConfig+0x928>)
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a18:	e00c      	b.n	8005a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a1a:	4b9d      	ldr	r3, [pc, #628]	; (8005c90 <UART_SetConfig+0x92c>)
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a1e:	e009      	b.n	8005a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a26:	e005      	b.n	8005a34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 81de 	beq.w	8005df8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	4a94      	ldr	r2, [pc, #592]	; (8005c94 <UART_SetConfig+0x930>)
 8005a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a46:	461a      	mov	r2, r3
 8005a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d305      	bcc.n	8005a6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d903      	bls.n	8005a74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a72:	e1c1      	b.n	8005df8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a76:	2200      	movs	r2, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	60fa      	str	r2, [r7, #12]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	4a84      	ldr	r2, [pc, #528]	; (8005c94 <UART_SetConfig+0x930>)
 8005a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2200      	movs	r2, #0
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a96:	f7fa fc1f 	bl	80002d8 <__aeabi_uldivmod>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	020b      	lsls	r3, r1, #8
 8005aac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ab0:	0202      	lsls	r2, r0, #8
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	6849      	ldr	r1, [r1, #4]
 8005ab6:	0849      	lsrs	r1, r1, #1
 8005ab8:	2000      	movs	r0, #0
 8005aba:	460c      	mov	r4, r1
 8005abc:	4605      	mov	r5, r0
 8005abe:	eb12 0804 	adds.w	r8, r2, r4
 8005ac2:	eb43 0905 	adc.w	r9, r3, r5
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	469a      	mov	sl, r3
 8005ace:	4693      	mov	fp, r2
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	465b      	mov	r3, fp
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	f7fa fbfe 	bl	80002d8 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aea:	d308      	bcc.n	8005afe <UART_SetConfig+0x79a>
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af2:	d204      	bcs.n	8005afe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	e17c      	b.n	8005df8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b04:	e178      	b.n	8005df8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0e:	f040 80c5 	bne.w	8005c9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005b12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	dc48      	bgt.n	8005bac <UART_SetConfig+0x848>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	db7b      	blt.n	8005c16 <UART_SetConfig+0x8b2>
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d879      	bhi.n	8005c16 <UART_SetConfig+0x8b2>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0x7c4>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005bb3 	.word	0x08005bb3
 8005b2c:	08005bbb 	.word	0x08005bbb
 8005b30:	08005c17 	.word	0x08005c17
 8005b34:	08005c17 	.word	0x08005c17
 8005b38:	08005bc3 	.word	0x08005bc3
 8005b3c:	08005c17 	.word	0x08005c17
 8005b40:	08005c17 	.word	0x08005c17
 8005b44:	08005c17 	.word	0x08005c17
 8005b48:	08005bd3 	.word	0x08005bd3
 8005b4c:	08005c17 	.word	0x08005c17
 8005b50:	08005c17 	.word	0x08005c17
 8005b54:	08005c17 	.word	0x08005c17
 8005b58:	08005c17 	.word	0x08005c17
 8005b5c:	08005c17 	.word	0x08005c17
 8005b60:	08005c17 	.word	0x08005c17
 8005b64:	08005c17 	.word	0x08005c17
 8005b68:	08005be3 	.word	0x08005be3
 8005b6c:	08005c17 	.word	0x08005c17
 8005b70:	08005c17 	.word	0x08005c17
 8005b74:	08005c17 	.word	0x08005c17
 8005b78:	08005c17 	.word	0x08005c17
 8005b7c:	08005c17 	.word	0x08005c17
 8005b80:	08005c17 	.word	0x08005c17
 8005b84:	08005c17 	.word	0x08005c17
 8005b88:	08005c17 	.word	0x08005c17
 8005b8c:	08005c17 	.word	0x08005c17
 8005b90:	08005c17 	.word	0x08005c17
 8005b94:	08005c17 	.word	0x08005c17
 8005b98:	08005c17 	.word	0x08005c17
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005c17 	.word	0x08005c17
 8005ba4:	08005c17 	.word	0x08005c17
 8005ba8:	08005c09 	.word	0x08005c09
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d02e      	beq.n	8005c0e <UART_SetConfig+0x8aa>
 8005bb0:	e031      	b.n	8005c16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fd fd2f 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8005bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005bb8:	e033      	b.n	8005c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bba:	f7fd fd41 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8005bbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005bc0:	e02f      	b.n	8005c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe ff70 	bl	8004aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bd0:	e027      	b.n	8005c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bd2:	f107 0318 	add.w	r3, r7, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff f8bc 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be0:	e01f      	b.n	8005c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005be2:	4b2d      	ldr	r3, [pc, #180]	; (8005c98 <UART_SetConfig+0x934>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bee:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <UART_SetConfig+0x934>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	08db      	lsrs	r3, r3, #3
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	4a24      	ldr	r2, [pc, #144]	; (8005c8c <UART_SetConfig+0x928>)
 8005bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c00:	e00f      	b.n	8005c22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005c02:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <UART_SetConfig+0x928>)
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c06:	e00c      	b.n	8005c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c08:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <UART_SetConfig+0x92c>)
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c0c:	e009      	b.n	8005c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c14:	e005      	b.n	8005c22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80e7 	beq.w	8005df8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <UART_SetConfig+0x930>)
 8005c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c3c:	005a      	lsls	r2, r3, #1
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	441a      	add	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d916      	bls.n	8005c84 <UART_SetConfig+0x920>
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d212      	bcs.n	8005c84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c76:	4313      	orrs	r3, r2
 8005c78:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	e0b9      	b.n	8005df8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c8a:	e0b5      	b.n	8005df8 <UART_SetConfig+0xa94>
 8005c8c:	03d09000 	.word	0x03d09000
 8005c90:	003d0900 	.word	0x003d0900
 8005c94:	08006b04 	.word	0x08006b04
 8005c98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	dc49      	bgt.n	8005d38 <UART_SetConfig+0x9d4>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	db7c      	blt.n	8005da2 <UART_SetConfig+0xa3e>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d87a      	bhi.n	8005da2 <UART_SetConfig+0xa3e>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x950>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005d3f 	.word	0x08005d3f
 8005cb8:	08005d47 	.word	0x08005d47
 8005cbc:	08005da3 	.word	0x08005da3
 8005cc0:	08005da3 	.word	0x08005da3
 8005cc4:	08005d4f 	.word	0x08005d4f
 8005cc8:	08005da3 	.word	0x08005da3
 8005ccc:	08005da3 	.word	0x08005da3
 8005cd0:	08005da3 	.word	0x08005da3
 8005cd4:	08005d5f 	.word	0x08005d5f
 8005cd8:	08005da3 	.word	0x08005da3
 8005cdc:	08005da3 	.word	0x08005da3
 8005ce0:	08005da3 	.word	0x08005da3
 8005ce4:	08005da3 	.word	0x08005da3
 8005ce8:	08005da3 	.word	0x08005da3
 8005cec:	08005da3 	.word	0x08005da3
 8005cf0:	08005da3 	.word	0x08005da3
 8005cf4:	08005d6f 	.word	0x08005d6f
 8005cf8:	08005da3 	.word	0x08005da3
 8005cfc:	08005da3 	.word	0x08005da3
 8005d00:	08005da3 	.word	0x08005da3
 8005d04:	08005da3 	.word	0x08005da3
 8005d08:	08005da3 	.word	0x08005da3
 8005d0c:	08005da3 	.word	0x08005da3
 8005d10:	08005da3 	.word	0x08005da3
 8005d14:	08005da3 	.word	0x08005da3
 8005d18:	08005da3 	.word	0x08005da3
 8005d1c:	08005da3 	.word	0x08005da3
 8005d20:	08005da3 	.word	0x08005da3
 8005d24:	08005da3 	.word	0x08005da3
 8005d28:	08005da3 	.word	0x08005da3
 8005d2c:	08005da3 	.word	0x08005da3
 8005d30:	08005da3 	.word	0x08005da3
 8005d34:	08005d95 	.word	0x08005d95
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d02e      	beq.n	8005d9a <UART_SetConfig+0xa36>
 8005d3c:	e031      	b.n	8005da2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d3e:	f7fd fc69 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8005d42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d44:	e033      	b.n	8005dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d46:	f7fd fc7b 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8005d4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d4c:	e02f      	b.n	8005dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe feaa 	bl	8004aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d5c:	e027      	b.n	8005dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d5e:	f107 0318 	add.w	r3, r7, #24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fff6 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d6c:	e01f      	b.n	8005dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d6e:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <UART_SetConfig+0xac0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d7a:	4b2a      	ldr	r3, [pc, #168]	; (8005e24 <UART_SetConfig+0xac0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	08db      	lsrs	r3, r3, #3
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	4a28      	ldr	r2, [pc, #160]	; (8005e28 <UART_SetConfig+0xac4>)
 8005d86:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d8c:	e00f      	b.n	8005dae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d8e:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <UART_SetConfig+0xac4>)
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d92:	e00c      	b.n	8005dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <UART_SetConfig+0xac8>)
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d98:	e009      	b.n	8005dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da0:	e005      	b.n	8005dae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005dac:	bf00      	nop
    }

    if (pclk != 0U)
 8005dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d021      	beq.n	8005df8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <UART_SetConfig+0xacc>)
 8005dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	441a      	add	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	d909      	bls.n	8005df2 <UART_SetConfig+0xa8e>
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d205      	bcs.n	8005df2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60da      	str	r2, [r3, #12]
 8005df0:	e002      	b.n	8005df8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3748      	adds	r7, #72	; 0x48
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
 8005e28:	03d09000 	.word	0x03d09000
 8005e2c:	003d0900 	.word	0x003d0900
 8005e30:	08006b04 	.word	0x08006b04

08005e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01a      	beq.n	8005f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f32:	d10a      	bne.n	8005f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b098      	sub	sp, #96	; 0x60
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f88:	f7fb fa6e 	bl	8001468 <HAL_GetTick>
 8005f8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d12f      	bne.n	8005ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f88e 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d022      	beq.n	8005ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fca:	653b      	str	r3, [r7, #80]	; 0x50
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e063      	b.n	80060c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b04      	cmp	r3, #4
 8006008:	d149      	bne.n	800609e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006012:	2200      	movs	r2, #0
 8006014:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f857 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d03c      	beq.n	800609e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	623b      	str	r3, [r7, #32]
   return(result);
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006042:	633b      	str	r3, [r7, #48]	; 0x30
 8006044:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e6      	bne.n	8006024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	60fb      	str	r3, [r7, #12]
   return(result);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	64bb      	str	r3, [r7, #72]	; 0x48
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006076:	61fa      	str	r2, [r7, #28]
 8006078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	69b9      	ldr	r1, [r7, #24]
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	617b      	str	r3, [r7, #20]
   return(result);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e012      	b.n	80060c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3758      	adds	r7, #88	; 0x58
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060dc:	e049      	b.n	8006172 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d045      	beq.n	8006172 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fb f9bf 	bl	8001468 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <UART_WaitOnFlagUntilTimeout+0x30>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e048      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d031      	beq.n	8006172 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b08      	cmp	r3, #8
 800611a:	d110      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2208      	movs	r2, #8
 8006122:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f839 	bl	800619c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2208      	movs	r2, #8
 800612e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e029      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800614c:	d111      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f81f 	bl	800619c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e00f      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4013      	ands	r3, r2
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	429a      	cmp	r2, r3
 8006180:	bf0c      	ite	eq
 8006182:	2301      	moveq	r3, #1
 8006184:	2300      	movne	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	429a      	cmp	r2, r3
 800618e:	d0a6      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b095      	sub	sp, #84	; 0x54
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c2:	643b      	str	r3, [r7, #64]	; 0x40
 80061c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e6      	bne.n	80061a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3308      	adds	r3, #8
 80061dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <UART_EndRxTransfer+0xc8>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e5      	bne.n	80061d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d118      	bne.n	8006244 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f023 0310 	bic.w	r3, r3, #16
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6979      	ldr	r1, [r7, #20]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	613b      	str	r3, [r7, #16]
   return(result);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e6      	bne.n	8006212 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006258:	bf00      	nop
 800625a:	3754      	adds	r7, #84	; 0x54
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	effffffe 	.word	0xeffffffe

08006268 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_UARTEx_DisableFifoMode+0x16>
 800627a:	2302      	movs	r3, #2
 800627c:	e027      	b.n	80062ce <HAL_UARTEx_DisableFifoMode+0x66>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2224      	movs	r2, #36	; 0x24
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e02d      	b.n	800634e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2224      	movs	r2, #36	; 0x24
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f850 	bl	80063d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800636a:	2302      	movs	r3, #2
 800636c:	e02d      	b.n	80063ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2224      	movs	r2, #36	; 0x24
 800637a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f812 	bl	80063d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063f4:	e031      	b.n	800645a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063f6:	2310      	movs	r3, #16
 80063f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063fa:	2310      	movs	r3, #16
 80063fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	0e5b      	lsrs	r3, r3, #25
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	0f5b      	lsrs	r3, r3, #29
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	7b3a      	ldrb	r2, [r7, #12]
 8006422:	4911      	ldr	r1, [pc, #68]	; (8006468 <UARTEx_SetNbDataToProcess+0x94>)
 8006424:	5c8a      	ldrb	r2, [r1, r2]
 8006426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800642a:	7b3a      	ldrb	r2, [r7, #12]
 800642c:	490f      	ldr	r1, [pc, #60]	; (800646c <UARTEx_SetNbDataToProcess+0x98>)
 800642e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006430:	fb93 f3f2 	sdiv	r3, r3, r2
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	7b7a      	ldrb	r2, [r7, #13]
 8006440:	4909      	ldr	r1, [pc, #36]	; (8006468 <UARTEx_SetNbDataToProcess+0x94>)
 8006442:	5c8a      	ldrb	r2, [r1, r2]
 8006444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006448:	7b7a      	ldrb	r2, [r7, #13]
 800644a:	4908      	ldr	r1, [pc, #32]	; (800646c <UARTEx_SetNbDataToProcess+0x98>)
 800644c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800644e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	08006b1c 	.word	0x08006b1c
 800646c:	08006b24 	.word	0x08006b24

08006470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006470:	b084      	sub	sp, #16
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	f107 001c 	add.w	r0, r7, #28
 800647e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	2b01      	cmp	r3, #1
 8006486:	d120      	bne.n	80064ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	4b2a      	ldr	r3, [pc, #168]	; (8006544 <USB_CoreInit+0xd4>)
 800649a:	4013      	ands	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d105      	bne.n	80064be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 faac 	bl	8006a1c <USB_CoreReset>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]
 80064c8:	e01a      	b.n	8006500 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 faa0 	bl	8006a1c <USB_CoreReset>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
 80064f2:	e005      	b.n	8006500 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	2b01      	cmp	r3, #1
 8006504:	d116      	bne.n	8006534 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650a:	b29a      	uxth	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <USB_CoreInit+0xd8>)
 8006516:	4313      	orrs	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f043 0206 	orr.w	r2, r3, #6
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f043 0220 	orr.w	r2, r3, #32
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006540:	b004      	add	sp, #16
 8006542:	4770      	bx	lr
 8006544:	ffbdffbf 	.word	0xffbdffbf
 8006548:	03ee0000 	.word	0x03ee0000

0800654c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f023 0201 	bic.w	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	460b      	mov	r3, r1
 8006578:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d115      	bne.n	80065bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800659c:	2001      	movs	r0, #1
 800659e:	f7fa ff6f 	bl	8001480 <HAL_Delay>
      ms++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa29 	bl	8006a00 <USB_GetMode>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d01e      	beq.n	80065f2 <USB_SetCurrentMode+0x84>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b31      	cmp	r3, #49	; 0x31
 80065b8:	d9f0      	bls.n	800659c <USB_SetCurrentMode+0x2e>
 80065ba:	e01a      	b.n	80065f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d115      	bne.n	80065ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065ce:	2001      	movs	r0, #1
 80065d0:	f7fa ff56 	bl	8001480 <HAL_Delay>
      ms++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fa10 	bl	8006a00 <USB_GetMode>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <USB_SetCurrentMode+0x84>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b31      	cmp	r3, #49	; 0x31
 80065ea:	d9f0      	bls.n	80065ce <USB_SetCurrentMode+0x60>
 80065ec:	e001      	b.n	80065f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e005      	b.n	80065fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b32      	cmp	r3, #50	; 0x32
 80065f6:	d101      	bne.n	80065fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006608:	b084      	sub	sp, #16
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e009      	b.n	800663c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	3340      	adds	r3, #64	; 0x40
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	2200      	movs	r2, #0
 8006634:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	3301      	adds	r3, #1
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2b0e      	cmp	r3, #14
 8006640:	d9f2      	bls.n	8006628 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11c      	bne.n	8006682 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006656:	f043 0302 	orr.w	r3, r3, #2
 800665a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e005      	b.n	800668e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006694:	461a      	mov	r2, r3
 8006696:	2300      	movs	r3, #0
 8006698:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a0:	4619      	mov	r1, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	461a      	mov	r2, r3
 80066aa:	680b      	ldr	r3, [r1, #0]
 80066ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d10c      	bne.n	80066ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f965 	bl	800698c <USB_SetDevSpeed>
 80066c2:	e008      	b.n	80066d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066c4:	2101      	movs	r1, #1
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f960 	bl	800698c <USB_SetDevSpeed>
 80066cc:	e003      	b.n	80066d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066ce:	2103      	movs	r1, #3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f95b 	bl	800698c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066d6:	2110      	movs	r1, #16
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8f3 	bl	80068c4 <USB_FlushTxFifo>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f91f 	bl	800692c <USB_FlushRxFifo>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	461a      	mov	r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670a:	461a      	mov	r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006716:	461a      	mov	r2, r3
 8006718:	2300      	movs	r3, #0
 800671a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	e043      	b.n	80067aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d118      	bne.n	800676c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	461a      	mov	r2, r3
 800674e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	e013      	b.n	800677e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	461a      	mov	r2, r3
 8006764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	e008      	b.n	800677e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	461a      	mov	r2, r3
 800677a:	2300      	movs	r3, #0
 800677c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	461a      	mov	r2, r3
 800679e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	3301      	adds	r3, #1
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d3b7      	bcc.n	8006722 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b2:	2300      	movs	r3, #0
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	e043      	b.n	8006840 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ce:	d118      	bne.n	8006802 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e2:	461a      	mov	r2, r3
 80067e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e013      	b.n	8006814 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	461a      	mov	r2, r3
 80067fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	e008      	b.n	8006814 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680e:	461a      	mov	r2, r3
 8006810:	2300      	movs	r3, #0
 8006812:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	461a      	mov	r2, r3
 8006822:	2300      	movs	r3, #0
 8006824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006832:	461a      	mov	r2, r3
 8006834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006838:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3301      	adds	r3, #1
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	429a      	cmp	r2, r3
 8006846:	d3b7      	bcc.n	80067b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800685a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006868:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d105      	bne.n	800687c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f043 0210 	orr.w	r2, r3, #16
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <USB_DevInit+0x2b4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f043 0208 	orr.w	r2, r3, #8
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800689a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d105      	bne.n	80068ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <USB_DevInit+0x2b8>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068b8:	b004      	add	sp, #16
 80068ba:	4770      	bx	lr
 80068bc:	803c3800 	.word	0x803c3800
 80068c0:	40000004 	.word	0x40000004

080068c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a13      	ldr	r2, [pc, #76]	; (8006928 <USB_FlushTxFifo+0x64>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e01b      	b.n	800691c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	daf2      	bge.n	80068d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	019b      	lsls	r3, r3, #6
 80068f4:	f043 0220 	orr.w	r2, r3, #32
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a08      	ldr	r2, [pc, #32]	; (8006928 <USB_FlushTxFifo+0x64>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e006      	b.n	800691c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b20      	cmp	r3, #32
 8006918:	d0f0      	beq.n	80068fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	00030d40 	.word	0x00030d40

0800692c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a11      	ldr	r2, [pc, #68]	; (8006988 <USB_FlushRxFifo+0x5c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e018      	b.n	800697c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	daf2      	bge.n	8006938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2210      	movs	r2, #16
 800695a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a08      	ldr	r2, [pc, #32]	; (8006988 <USB_FlushRxFifo+0x5c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e006      	b.n	800697c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b10      	cmp	r3, #16
 8006978:	d0f0      	beq.n	800695c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	00030d40 	.word	0x00030d40

0800698c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069d8:	f023 0303 	bic.w	r3, r3, #3
 80069dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <USB_CoreReset+0x64>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e01b      	b.n	8006a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	daf2      	bge.n	8006a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f043 0201 	orr.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <USB_CoreReset+0x64>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d901      	bls.n	8006a64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e006      	b.n	8006a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d0f0      	beq.n	8006a52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	00030d40 	.word	0x00030d40

08006a84 <memset>:
 8006a84:	4402      	add	r2, r0
 8006a86:	4603      	mov	r3, r0
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d100      	bne.n	8006a8e <memset+0xa>
 8006a8c:	4770      	bx	lr
 8006a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a92:	e7f9      	b.n	8006a88 <memset+0x4>

08006a94 <__libc_init_array>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4d0d      	ldr	r5, [pc, #52]	; (8006acc <__libc_init_array+0x38>)
 8006a98:	4c0d      	ldr	r4, [pc, #52]	; (8006ad0 <__libc_init_array+0x3c>)
 8006a9a:	1b64      	subs	r4, r4, r5
 8006a9c:	10a4      	asrs	r4, r4, #2
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	d109      	bne.n	8006ab8 <__libc_init_array+0x24>
 8006aa4:	4d0b      	ldr	r5, [pc, #44]	; (8006ad4 <__libc_init_array+0x40>)
 8006aa6:	4c0c      	ldr	r4, [pc, #48]	; (8006ad8 <__libc_init_array+0x44>)
 8006aa8:	f000 f818 	bl	8006adc <_init>
 8006aac:	1b64      	subs	r4, r4, r5
 8006aae:	10a4      	asrs	r4, r4, #2
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	d105      	bne.n	8006ac2 <__libc_init_array+0x2e>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abc:	4798      	blx	r3
 8006abe:	3601      	adds	r6, #1
 8006ac0:	e7ee      	b.n	8006aa0 <__libc_init_array+0xc>
 8006ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac6:	4798      	blx	r3
 8006ac8:	3601      	adds	r6, #1
 8006aca:	e7f2      	b.n	8006ab2 <__libc_init_array+0x1e>
 8006acc:	08006b34 	.word	0x08006b34
 8006ad0:	08006b34 	.word	0x08006b34
 8006ad4:	08006b34 	.word	0x08006b34
 8006ad8:	08006b38 	.word	0x08006b38

08006adc <_init>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	bf00      	nop
 8006ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae2:	bc08      	pop	{r3}
 8006ae4:	469e      	mov	lr, r3
 8006ae6:	4770      	bx	lr

08006ae8 <_fini>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	bf00      	nop
 8006aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aee:	bc08      	pop	{r3}
 8006af0:	469e      	mov	lr, r3
 8006af2:	4770      	bx	lr
