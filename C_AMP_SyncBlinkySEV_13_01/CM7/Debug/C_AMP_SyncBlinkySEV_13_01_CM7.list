
C_AMP_SyncBlinkySEV_13_01_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000655c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800682c  0800682c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006834  08006834  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800683c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800684c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080068ac  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b0  240000d0  0800690c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000780  0800690c  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001850f  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000029e7  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001038  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c84  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a4a5  00000000  00000000  0003ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001565b  00000000  00000000  00077199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017fa85  00000000  00000000  0008c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000044e0  00000000  00000000  0020c27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a7  00000000  00000000  0021075c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080067dc 	.word	0x080067dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080067dc 	.word	0x080067dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <main+0xd4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fa57 	bl	8000bdc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc8d 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f853 	bl	80007dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <main+0xd4>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a25      	ldr	r2, [pc, #148]	; (80007d4 <main+0xd4>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <main+0xd4>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fc43 	bl	8001fe0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fc59 	bl	8002014 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <main+0xd4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fa29 	bl	8000bdc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f96f 	bl	8000a6c <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f8a3 	bl	80008d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f8ed 	bl	8000970 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f937 	bl	8000a08 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_HSEM_Take(HSEM_ID_1, 0);
 800079a:	2100      	movs	r1, #0
 800079c:	2001      	movs	r0, #1
 800079e:	f001 fbfd 	bl	8001f9c <HAL_HSEM_Take>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2101      	movs	r1, #1
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <main+0xd8>)
 80007a8:	f001 fbde 	bl	8001f68 <HAL_GPIO_WritePin>

	  __SEV();
 80007ac:	bf40      	sev

	  HAL_Delay(500);
 80007ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b2:	f000 fcdd 	bl	8001170 <HAL_Delay>
	  HAL_HSEM_Release(HSEM_ID_1,0);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2001      	movs	r0, #1
 80007ba:	f001 fc2b 	bl	8002014 <HAL_HSEM_Release>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	2101      	movs	r1, #1
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <main+0xd8>)
 80007c4:	f001 fbd0 	bl	8001f68 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f000 fcd0 	bl	8001170 <HAL_Delay>
	  HAL_HSEM_Take(HSEM_ID_1, 0);
 80007d0:	e7e3      	b.n	800079a <main+0x9a>
 80007d2:	bf00      	nop
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58020400 	.word	0x58020400

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	; 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	224c      	movs	r2, #76	; 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 ffca 	bl	8006784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 ffc4 	bl	8006784 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f001 fd65 	bl	80022cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <SystemClock_Config+0xf4>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <SystemClock_Config+0xf4>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <SystemClock_Config+0xf4>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <SystemClock_Config+0xf8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	4a2b      	ldr	r2, [pc, #172]	; (80008d4 <SystemClock_Config+0xf8>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <SystemClock_Config+0xf8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <SystemClock_Config+0xf8>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000848:	2301      	movs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800084c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	2302      	movs	r3, #2
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800085e:	2312      	movs	r3, #18
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086e:	230c      	movs	r3, #12
 8000870:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000872:	2302      	movs	r3, #2
 8000874:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000876:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fd8d 	bl	80023a0 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800088c:	f000 f9a6 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	233f      	movs	r3, #63	; 0x3f
 8000892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2303      	movs	r3, #3
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2101      	movs	r1, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f9cc 	bl	8002c54 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008c2:	f000 f98b 	bl	8000bdc <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3770      	adds	r7, #112	; 0x70
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58000400 	.word	0x58000400
 80008d4:	58024800 	.word	0x58024800

080008d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_ETH_Init+0x80>)
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <MX_ETH_Init+0x84>)
 80008e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_ETH_Init+0x88>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ETH_Init+0x88>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_ETH_Init+0x88>)
 80008f0:	22e1      	movs	r2, #225	; 0xe1
 80008f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_ETH_Init+0x88>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_ETH_Init+0x88>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_ETH_Init+0x88>)
 8000902:	2200      	movs	r2, #0
 8000904:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ETH_Init+0x80>)
 8000908:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_ETH_Init+0x88>)
 800090a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_ETH_Init+0x80>)
 800090e:	2201      	movs	r2, #1
 8000910:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_ETH_Init+0x80>)
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_ETH_Init+0x8c>)
 8000916:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_ETH_Init+0x80>)
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_ETH_Init+0x90>)
 800091c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_ETH_Init+0x80>)
 8000920:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000924:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_ETH_Init+0x80>)
 8000928:	f000 fd4a 	bl	80013c0 <HAL_ETH_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000932:	f000 f953 	bl	8000bdc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000936:	2238      	movs	r2, #56	; 0x38
 8000938:	2100      	movs	r1, #0
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_ETH_Init+0x94>)
 800093c:	f005 ff22 	bl	8006784 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_ETH_Init+0x94>)
 8000942:	2221      	movs	r2, #33	; 0x21
 8000944:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_ETH_Init+0x94>)
 8000948:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800094c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_ETH_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000124 	.word	0x24000124
 800095c:	40028000 	.word	0x40028000
 8000960:	24000774 	.word	0x24000774
 8000964:	24000070 	.word	0x24000070
 8000968:	24000010 	.word	0x24000010
 800096c:	240000ec 	.word	0x240000ec

08000970 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000976:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <MX_USART3_UART_Init+0x94>)
 8000978:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009ba:	f004 fb03 	bl	8004fc4 <HAL_UART_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 f90a 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009cc:	f005 fb05 	bl	8005fda <HAL_UARTEx_SetTxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009d6:	f000 f901 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009de:	f005 fb3a 	bl	8006056 <HAL_UARTEx_SetRxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f000 f8f8 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009ee:	f005 fabb 	bl	8005f68 <HAL_UARTEx_DisableFifoMode>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009f8:	f000 f8f0 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	240001d4 	.word	0x240001d4
 8000a04:	40004800 	.word	0x40004800

08000a08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	2209      	movs	r2, #9
 8000a16:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a50:	f001 faf4 	bl	800203c <HAL_PCD_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f000 f8bf 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000268 	.word	0x24000268
 8000a68:	40080000 	.word	0x40080000

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a4f      	ldr	r2, [pc, #316]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b4d      	ldr	r3, [pc, #308]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa0:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a48      	ldr	r2, [pc, #288]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a31      	ldr	r2, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b3c:	4823      	ldr	r0, [pc, #140]	; (8000bcc <MX_GPIO_Init+0x160>)
 8000b3e:	f001 fa13 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b48:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <MX_GPIO_Init+0x164>)
 8000b4a:	f001 fa0d 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <MX_GPIO_Init+0x168>)
 8000b64:	f001 f850 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b68:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <MX_GPIO_Init+0x160>)
 8000b82:	f001 f841 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_GPIO_Init+0x164>)
 8000ba0:	f001 f832 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_GPIO_Init+0x16c>)
 8000bba:	f001 f825 	bl	8001c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3730      	adds	r7, #48	; 0x30
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020400 	.word	0x58020400
 8000bd0:	58020c00 	.word	0x58020c00
 8000bd4:	58020800 	.word	0x58020800
 8000bd8:	58021800 	.word	0x58021800

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x30>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	58024400 	.word	0x58024400

08000c1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a59      	ldr	r2, [pc, #356]	; (8000da0 <HAL_ETH_MspInit+0x184>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	f040 80ab 	bne.w	8000d96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c46:	4a57      	ldr	r2, [pc, #348]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c64:	4a4f      	ldr	r2, [pc, #316]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c7c:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c82:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a39      	ldr	r2, [pc, #228]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	4a2a      	ldr	r2, [pc, #168]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2332      	movs	r3, #50	; 0x32
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481e      	ldr	r0, [pc, #120]	; (8000da8 <HAL_ETH_MspInit+0x18c>)
 8000d2e:	f000 ff6b 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d32:	2386      	movs	r3, #134	; 0x86
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d42:	230b      	movs	r3, #11
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4817      	ldr	r0, [pc, #92]	; (8000dac <HAL_ETH_MspInit+0x190>)
 8000d4e:	f000 ff5b 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d64:	230b      	movs	r3, #11
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4810      	ldr	r0, [pc, #64]	; (8000db0 <HAL_ETH_MspInit+0x194>)
 8000d70:	f000 ff4a 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d86:	230b      	movs	r3, #11
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HAL_ETH_MspInit+0x198>)
 8000d92:	f000 ff39 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	; 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40028000 	.word	0x40028000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020800 	.word	0x58020800
 8000dac:	58020000 	.word	0x58020000
 8000db0:	58020400 	.word	0x58020400
 8000db4:	58021800 	.word	0x58021800

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0ba      	sub	sp, #232	; 0xe8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	22c0      	movs	r2, #192	; 0xc0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 fcd3 	bl	8006784 <memset>
  if(huart->Instance==USART3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <HAL_UART_MspInit+0xc8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d146      	bne.n	8000e76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de8:	f04f 0202 	mov.w	r2, #2
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fab4 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e0a:	f7ff fee7 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0xcc>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e64:	2307      	movs	r3, #7
 8000e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e72:	f000 fec9 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	37e8      	adds	r7, #232	; 0xe8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40004800 	.word	0x40004800
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58020c00 	.word	0x58020c00

08000e8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ba      	sub	sp, #232	; 0xe8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	22c0      	movs	r2, #192	; 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fc69 	bl	8006784 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a38      	ldr	r2, [pc, #224]	; (8000f98 <HAL_PCD_MspInit+0x10c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d169      	bne.n	8000f90 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ebc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000edc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000ee2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 fa39 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f00:	f7ff fe6c 	bl	8000bdc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f04:	f001 fa3c 	bl	8002380 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_PCD_MspInit+0x110>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <HAL_PCD_MspInit+0x110>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_PCD_MspInit+0x110>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f26:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f40:	230a      	movs	r3, #10
 8000f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <HAL_PCD_MspInit+0x114>)
 8000f4e:	f000 fe5b 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <HAL_PCD_MspInit+0x114>)
 8000f6e:	f000 fe4b 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_PCD_MspInit+0x110>)
 8000f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f78:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_PCD_MspInit+0x110>)
 8000f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_PCD_MspInit+0x110>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	37e8      	adds	r7, #232	; 0xe8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40080000 	.word	0x40080000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020000 	.word	0x58020000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f89e 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ffc:	f7ff faea 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f005 fbb5 	bl	8006794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fb69 	bl	8000700 <main>
  bx  lr
 800102e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001034:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001038:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800103c:	0800683c 	.word	0x0800683c
  ldr r2, =_sbss
 8001040:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001044:	24000780 	.word	0x24000780

08001048 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC3_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f982 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001058:	f001 ffb2 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 800105c:	4602      	mov	r2, r0
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_Init+0x68>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	4913      	ldr	r1, [pc, #76]	; (80010b8 <HAL_Init+0x6c>)
 800106a:	5ccb      	ldrb	r3, [r1, r3]
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_Init+0x6c>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_Init+0x70>)
 800108e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_Init+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f814 	bl	80010c4 <HAL_InitTick>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e002      	b.n	80010ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fd9f 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58024400 	.word	0x58024400
 80010b8:	080067f4 	.word	0x080067f4
 80010bc:	24000004 	.word	0x24000004
 80010c0:	24000000 	.word	0x24000000

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e021      	b.n	800111c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_InitTick+0x64>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f959 	bl	80013a6 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f931 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x68>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2400000c 	.word	0x2400000c
 8001128:	24000000 	.word	0x24000000
 800112c:	24000008 	.word	0x24000008

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2400000c 	.word	0x2400000c
 8001154:	2400077c 	.word	0x2400077c

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2400077c 	.word	0x2400077c

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2400000c 	.word	0x2400000c

080011b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetREVID+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0c1b      	lsrs	r3, r3, #16
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	5c001000 	.word	0x5c001000

080011d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80011e0:	4904      	ldr	r1, [pc, #16]	; (80011f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	58000400 	.word	0x58000400

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <__NVIC_SetPriorityGrouping+0x40>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	4313      	orrs	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x40>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	05fa0000 	.word	0x05fa0000

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff8e 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff47 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb2 	bl	8001318 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0cf      	b.n	8001572 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d106      	bne.n	80013ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2223      	movs	r2, #35	; 0x23
 80013e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fc19 	bl	8000c1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_ETH_Init+0x1bc>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f0:	4a62      	ldr	r2, [pc, #392]	; (800157c <HAL_ETH_Init+0x1bc>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013fa:	4b60      	ldr	r3, [pc, #384]	; (800157c <HAL_ETH_Init+0x1bc>)
 80013fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7a1b      	ldrb	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d103      	bne.n	8001418 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fedd 	bl	80011d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001416:	e003      	b.n	8001420 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001418:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800141c:	f7ff fed8 	bl	80011d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_ETH_Init+0x1c0>)
 8001422:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800143a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff fe8c 	bl	8001158 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001442:	e011      	b.n	8001468 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001444:	f7ff fe88 	bl	8001158 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001452:	d909      	bls.n	8001468 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	22e0      	movs	r2, #224	; 0xe0
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e084      	b.n	8001572 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e4      	bne.n	8001444 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f886 	bl	800158c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001480:	f001 ff18 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 8001484:	4603      	mov	r3, r0
 8001486:	4a3f      	ldr	r2, [pc, #252]	; (8001584 <HAL_ETH_Init+0x1c4>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9a      	lsrs	r2, r3, #18
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3a01      	subs	r2, #1
 8001494:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fa71 	bl	8001980 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80014aa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	22e0      	movs	r2, #224	; 0xe0
 80014d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e049      	b.n	8001572 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_ETH_Init+0x1c8>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6952      	ldr	r2, [r2, #20]
 80014f2:	0051      	lsls	r1, r2, #1
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fad9 	bl	8001aba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fb1f 	bl	8001b4c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	3305      	adds	r3, #5
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	021a      	lsls	r2, r3, #8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	3304      	adds	r3, #4
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	3303      	adds	r3, #3
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	061a      	lsls	r2, r3, #24
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	3302      	adds	r3, #2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800154c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800155a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800155c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2210      	movs	r2, #16
 800156c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	58024400 	.word	0x58024400
 8001580:	58000400 	.word	0x58000400
 8001584:	431bde83 	.word	0x431bde83
 8001588:	ffff8001 	.word	0xffff8001

0800158c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800159c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015a6:	f001 fe85 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80015aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d908      	bls.n	80015c6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d804      	bhi.n	80015c6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e027      	b.n	8001616 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	4a18      	ldr	r2, [pc, #96]	; (800162c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d908      	bls.n	80015e0 <HAL_ETH_SetMDIOClockRange+0x54>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d204      	bcs.n	80015e0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e01a      	b.n	8001616 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d303      	bcc.n	80015f0 <HAL_ETH_SetMDIOClockRange+0x64>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d911      	bls.n	8001614 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d908      	bls.n	800160a <HAL_ETH_SetMDIOClockRange+0x7e>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_ETH_SetMDIOClockRange+0xac>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d804      	bhi.n	800160a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e005      	b.n	8001616 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	e000      	b.n	8001616 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001614:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	01312cff 	.word	0x01312cff
 800162c:	02160ebf 	.word	0x02160ebf
 8001630:	03938700 	.word	0x03938700
 8001634:	05f5e0ff 	.word	0x05f5e0ff
 8001638:	08f0d17f 	.word	0x08f0d17f

0800163c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800164e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	791b      	ldrb	r3, [r3, #4]
 8001654:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	7b1b      	ldrb	r3, [r3, #12]
 800165c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7b5b      	ldrb	r3, [r3, #13]
 8001664:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	7b9b      	ldrb	r3, [r3, #14]
 800166c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800166e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	7bdb      	ldrb	r3, [r3, #15]
 8001674:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001676:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	7c12      	ldrb	r2, [r2, #16]
 800167c:	2a00      	cmp	r2, #0
 800167e:	d102      	bne.n	8001686 <ETH_SetMACConfig+0x4a>
 8001680:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001684:	e000      	b.n	8001688 <ETH_SetMACConfig+0x4c>
 8001686:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001688:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	7c52      	ldrb	r2, [r2, #17]
 800168e:	2a00      	cmp	r2, #0
 8001690:	d102      	bne.n	8001698 <ETH_SetMACConfig+0x5c>
 8001692:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001696:	e000      	b.n	800169a <ETH_SetMACConfig+0x5e>
 8001698:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800169a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	7c9b      	ldrb	r3, [r3, #18]
 80016a0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016a2:	431a      	orrs	r2, r3
               macconf->Speed |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80016a8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80016ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	7f1b      	ldrb	r3, [r3, #28]
 80016b4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80016b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	7f5b      	ldrb	r3, [r3, #29]
 80016bc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	7f92      	ldrb	r2, [r2, #30]
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d102      	bne.n	80016ce <ETH_SetMACConfig+0x92>
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	e000      	b.n	80016d0 <ETH_SetMACConfig+0x94>
 80016ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	7fdb      	ldrb	r3, [r3, #31]
 80016d6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d102      	bne.n	80016ea <ETH_SetMACConfig+0xae>
 80016e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e8:	e000      	b.n	80016ec <ETH_SetMACConfig+0xb0>
 80016ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016ec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016fa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016fc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b56      	ldr	r3, [pc, #344]	; (8001868 <ETH_SetMACConfig+0x22c>)
 800170e:	4013      	ands	r3, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	68f9      	ldr	r1, [r7, #12]
 8001716:	430b      	orrs	r3, r1
 8001718:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001726:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001728:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001730:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800173a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800173c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001744:	2a00      	cmp	r2, #0
 8001746:	d102      	bne.n	800174e <ETH_SetMACConfig+0x112>
 8001748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800174c:	e000      	b.n	8001750 <ETH_SetMACConfig+0x114>
 800174e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001750:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <ETH_SetMACConfig+0x230>)
 8001762:	4013      	ands	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	430b      	orrs	r3, r1
 800176c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001774:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <ETH_SetMACConfig+0x234>)
 8001786:	4013      	ands	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	430b      	orrs	r3, r1
 8001790:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001798:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800179e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d101      	bne.n	80017ae <ETH_SetMACConfig+0x172>
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	e000      	b.n	80017b0 <ETH_SetMACConfig+0x174>
 80017ae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017b0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017c2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80017c6:	4013      	ands	r3, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	430b      	orrs	r3, r1
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017d8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017e0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	f023 0103 	bic.w	r1, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001806:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001822:	2a00      	cmp	r2, #0
 8001824:	d101      	bne.n	800182a <ETH_SetMACConfig+0x1ee>
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	e000      	b.n	800182c <ETH_SetMACConfig+0x1f0>
 800182a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800182c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001834:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001836:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800183e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001840:	4313      	orrs	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800184c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	430a      	orrs	r2, r1
 8001858:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	00048083 	.word	0x00048083
 800186c:	c0f88000 	.word	0xc0f88000
 8001870:	fffffef0 	.word	0xfffffef0

08001874 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <ETH_SetDMAConfig+0xf8>)
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	6811      	ldr	r1, [r2, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	430b      	orrs	r3, r1
 8001896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800189a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	791b      	ldrb	r3, [r3, #4]
 80018a0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7b1b      	ldrb	r3, [r3, #12]
 80018ac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <ETH_SetDMAConfig+0xfc>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	68f9      	ldr	r1, [r7, #12]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018cc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7b5b      	ldrb	r3, [r3, #13]
 80018d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <ETH_SetDMAConfig+0x100>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	430b      	orrs	r3, r1
 80018f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7d1b      	ldrb	r3, [r3, #20]
 8001904:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001906:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	7f5b      	ldrb	r3, [r3, #29]
 800190c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <ETH_SetDMAConfig+0x104>)
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	430b      	orrs	r3, r1
 800192a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800192e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	7f1b      	ldrb	r3, [r3, #28]
 8001936:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800193c:	4313      	orrs	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <ETH_SetDMAConfig+0x108>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	68f9      	ldr	r1, [r7, #12]
 8001956:	430b      	orrs	r3, r1
 8001958:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800195c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	ffff87fd 	.word	0xffff87fd
 8001970:	ffff2ffe 	.word	0xffff2ffe
 8001974:	fffec000 	.word	0xfffec000
 8001978:	ffc0efef 	.word	0xffc0efef
 800197c:	7fc0ffff 	.word	0x7fc0ffff

08001980 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0a4      	sub	sp, #144	; 0x90
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800198e:	2300      	movs	r3, #0
 8001990:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80019d8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80019dc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019fa:	2300      	movs	r3, #0
 80019fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a02:	2300      	movs	r3, #0
 8001a04:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a2a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a34:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fde6 	bl	800163c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a74:	2301      	movs	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001aa0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fee1 	bl	8001874 <ETH_SetDMAConfig>
}
 8001ab2:	bf00      	nop
 8001ab4:	3790      	adds	r7, #144	; 0x90
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e01d      	b.n	8001b04 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68d9      	ldr	r1, [r3, #12]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	3206      	adds	r2, #6
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d9de      	bls.n	8001ac8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e023      	b.n	8001ba2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6919      	ldr	r1, [r3, #16]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	3212      	adds	r2, #18
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d9d8      	bls.n	8001b5a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_GPIO_Init+0x234>)
 8001c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c1a:	e194      	b.n	8001f46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8186 	beq.w	8001f40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <HAL_GPIO_Init+0x44>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d017      	beq.n	8001cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d123      	bne.n	8001d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	69b9      	ldr	r1, [r7, #24]
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80e0 	beq.w	8001f40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_GPIO_Init+0x238>)
 8001d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d86:	4a2e      	ldr	r2, [pc, #184]	; (8001e40 <HAL_GPIO_Init+0x238>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_GPIO_Init+0x238>)
 8001d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9e:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <HAL_GPIO_Init+0x23c>)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <HAL_GPIO_Init+0x240>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d052      	beq.n	8001e70 <HAL_GPIO_Init+0x268>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_GPIO_Init+0x244>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d031      	beq.n	8001e36 <HAL_GPIO_Init+0x22e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_GPIO_Init+0x248>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x22a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <HAL_GPIO_Init+0x24c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x226>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_GPIO_Init+0x250>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x222>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_GPIO_Init+0x254>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x21e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x258>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x21a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_GPIO_Init+0x25c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x216>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_GPIO_Init+0x260>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_GPIO_Init+0x264>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x20e>
 8001e12:	2309      	movs	r3, #9
 8001e14:	e02d      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e16:	230a      	movs	r3, #10
 8001e18:	e02b      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	e029      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e027      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e22:	2306      	movs	r3, #6
 8001e24:	e025      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e26:	2305      	movs	r3, #5
 8001e28:	e023      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	e021      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e01f      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e01d      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01b      	b.n	8001e72 <HAL_GPIO_Init+0x26a>
 8001e3a:	bf00      	nop
 8001e3c:	58000080 	.word	0x58000080
 8001e40:	58024400 	.word	0x58024400
 8001e44:	58000400 	.word	0x58000400
 8001e48:	58020000 	.word	0x58020000
 8001e4c:	58020400 	.word	0x58020400
 8001e50:	58020800 	.word	0x58020800
 8001e54:	58020c00 	.word	0x58020c00
 8001e58:	58021000 	.word	0x58021000
 8001e5c:	58021400 	.word	0x58021400
 8001e60:	58021800 	.word	0x58021800
 8001e64:	58021c00 	.word	0x58021c00
 8001e68:	58022000 	.word	0x58022000
 8001e6c:	58022400 	.word	0x58022400
 8001e70:	2300      	movs	r3, #0
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	f002 0203 	and.w	r2, r2, #3
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4093      	lsls	r3, r2
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e82:	4938      	ldr	r1, [pc, #224]	; (8001f64 <HAL_GPIO_Init+0x35c>)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3301      	adds	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f47f ae63 	bne.w	8001c1c <HAL_GPIO_Init+0x14>
  }
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	3724      	adds	r7, #36	; 0x24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	58000400 	.word	0x58000400

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	041a      	lsls	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8001fa6:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <HAL_HSEM_Take+0x3c>)
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_HSEM_Take+0x40>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_HSEM_Take+0x3c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_HSEM_Take+0x40>)
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d101      	bne.n	8001fca <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	58026400 	.word	0x58026400
 8001fdc:	80000300 	.word	0x80000300

08001fe0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001fe8:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_HSEM_FastTake+0x2c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3320      	adds	r3, #32
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_HSEM_FastTake+0x30>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	58026400 	.word	0x58026400
 8002010:	80000300 	.word	0x80000300

08002014 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800201e:	4906      	ldr	r1, [pc, #24]	; (8002038 <HAL_HSEM_Release+0x24>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	58026400 	.word	0x58026400

0800203c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	b08f      	sub	sp, #60	; 0x3c
 8002040:	af0a      	add	r7, sp, #40	; 0x28
 8002042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e116      	b.n	800227c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7fe ff0f 	bl	8000e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2203      	movs	r2, #3
 8002072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f004 f8dd 	bl	800624c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	687e      	ldr	r6, [r7, #4]
 800209a:	466d      	mov	r5, sp
 800209c:	f106 0410 	add.w	r4, r6, #16
 80020a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b0:	1d33      	adds	r3, r6, #4
 80020b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f004 f85b 	bl	8006170 <USB_CoreInit>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d7      	b.n	800227c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f8cb 	bl	800626e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e04a      	b.n	8002174 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	333d      	adds	r3, #61	; 0x3d
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	333c      	adds	r3, #60	; 0x3c
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	b298      	uxth	r0, r3
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3356      	adds	r3, #86	; 0x56
 800211a:	4602      	mov	r2, r0
 800211c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3340      	adds	r3, #64	; 0x40
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3344      	adds	r3, #68	; 0x44
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3348      	adds	r3, #72	; 0x48
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	334c      	adds	r3, #76	; 0x4c
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	3301      	adds	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	d3af      	bcc.n	80020de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e044      	b.n	800220e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3b5      	bcc.n	8002184 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	687e      	ldr	r6, [r7, #4]
 8002220:	466d      	mov	r5, sp
 8002222:	f106 0410 	add.w	r4, r6, #16
 8002226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002232:	e885 0003 	stmia.w	r5, {r0, r1}
 8002236:	1d33      	adds	r3, r6, #4
 8002238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223a:	6838      	ldr	r0, [r7, #0]
 800223c:	f004 f864 	bl	8006308 <USB_DevInit>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e014      	b.n	800227c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2b01      	cmp	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f80a 	bl	8002284 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f004 fa22 	bl	80066be <USB_DevDisconnect>

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002284 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	10000003 	.word	0x10000003

080022cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_PWREx_ConfigSupply+0xb0>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d00a      	beq.n	80022f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_PWREx_ConfigSupply+0xb0>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e040      	b.n	8002374 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e03e      	b.n	8002374 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_PWREx_ConfigSupply+0xb0>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80022fe:	491f      	ldr	r1, [pc, #124]	; (800237c <HAL_PWREx_ConfigSupply+0xb0>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4313      	orrs	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002306:	f7fe ff27 	bl	8001158 <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800230c:	e009      	b.n	8002322 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800230e:	f7fe ff23 	bl	8001158 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800231c:	d901      	bls.n	8002322 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e028      	b.n	8002374 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_PWREx_ConfigSupply+0xb0>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232e:	d1ee      	bne.n	800230e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b1e      	cmp	r3, #30
 8002334:	d008      	beq.n	8002348 <HAL_PWREx_ConfigSupply+0x7c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b2e      	cmp	r3, #46	; 0x2e
 800233a:	d005      	beq.n	8002348 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b1d      	cmp	r3, #29
 8002340:	d002      	beq.n	8002348 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b2d      	cmp	r3, #45	; 0x2d
 8002346:	d114      	bne.n	8002372 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002348:	f7fe ff06 	bl	8001158 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800234e:	e009      	b.n	8002364 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002350:	f7fe ff02 	bl	8001158 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800235e:	d901      	bls.n	8002364 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_PWREx_ConfigSupply+0xb0>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d1ee      	bne.n	8002350 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	58024800 	.word	0x58024800

08002380 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	58024800 	.word	0x58024800

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f000 bc48 	b.w	8002c44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 8088 	beq.w	80024d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c2:	4b99      	ldr	r3, [pc, #612]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023cc:	4b96      	ldr	r3, [pc, #600]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d007      	beq.n	80023e8 <HAL_RCC_OscConfig+0x48>
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	2b18      	cmp	r3, #24
 80023dc:	d111      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d06d      	beq.n	80024d0 <HAL_RCC_OscConfig+0x130>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d169      	bne.n	80024d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f000 bc21 	b.w	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x7a>
 800240c:	4b86      	ldr	r3, [pc, #536]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a85      	ldr	r2, [pc, #532]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e02e      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x9c>
 8002422:	4b81      	ldr	r3, [pc, #516]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a80      	ldr	r2, [pc, #512]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b7e      	ldr	r3, [pc, #504]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7d      	ldr	r2, [pc, #500]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e01d      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0xc0>
 8002446:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b75      	ldr	r3, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a74      	ldr	r2, [pc, #464]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 8002460:	4b71      	ldr	r3, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a70      	ldr	r2, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6d      	ldr	r2, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fe6a 	bl	8001158 <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe fe66 	bl	8001158 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e3d4      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fe56 	bl	8001158 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe fe52 	bl	8001158 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e3c0      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024c2:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x110>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80ca 	beq.w	8002674 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e0:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ea:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_RCC_OscConfig+0x166>
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2b18      	cmp	r3, #24
 80024fa:	d156      	bne.n	80025aa <HAL_RCC_OscConfig+0x20a>
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d151      	bne.n	80025aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x17e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e392      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251e:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0219 	bic.w	r2, r3, #25
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	493f      	ldr	r1, [pc, #252]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fe12 	bl	8001158 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fe0e 	bl	8001158 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e37c      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254a:	4b37      	ldr	r3, [pc, #220]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	f7fe fe2f 	bl	80011b8 <HAL_GetREVID>
 800255a:	4603      	mov	r3, r0
 800255c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002560:	4293      	cmp	r3, r2
 8002562:	d817      	bhi.n	8002594 <HAL_RCC_OscConfig+0x1f4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d108      	bne.n	800257e <HAL_RCC_OscConfig+0x1de>
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002574:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	e07a      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	031b      	lsls	r3, r3, #12
 800258c:	4926      	ldr	r1, [pc, #152]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002592:	e06f      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	4921      	ldr	r1, [pc, #132]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a8:	e064      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d047      	beq.n	8002642 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0219 	bic.w	r2, r3, #25
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	491a      	ldr	r1, [pc, #104]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fdc8 	bl	8001158 <HAL_GetTick>
 80025c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025cc:	f7fe fdc4 	bl	8001158 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e332      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	f7fe fde5 	bl	80011b8 <HAL_GetREVID>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d819      	bhi.n	800262c <HAL_RCC_OscConfig+0x28c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d108      	bne.n	8002612 <HAL_RCC_OscConfig+0x272>
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 800260a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260e:	6053      	str	r3, [r2, #4]
 8002610:	e030      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	031b      	lsls	r3, r3, #12
 8002620:	4901      	ldr	r1, [pc, #4]	; (8002628 <HAL_RCC_OscConfig+0x288>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 8002626:	e025      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
 8002628:	58024400 	.word	0x58024400
 800262c:	4b9a      	ldr	r3, [pc, #616]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4997      	ldr	r1, [pc, #604]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	e018      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b95      	ldr	r3, [pc, #596]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a94      	ldr	r2, [pc, #592]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fd83 	bl	8001158 <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe fd7f 	bl	8001158 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e2ed      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002668:	4b8b      	ldr	r3, [pc, #556]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a9 	beq.w	80027d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b85      	ldr	r3, [pc, #532]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268c:	4b82      	ldr	r3, [pc, #520]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_OscConfig+0x308>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b18      	cmp	r3, #24
 800269c:	d13a      	bne.n	8002714 <HAL_RCC_OscConfig+0x374>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d135      	bne.n	8002714 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a8:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_OscConfig+0x320>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e2c1      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026c0:	f7fe fd7a 	bl	80011b8 <HAL_GetREVID>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d817      	bhi.n	80026fe <HAL_RCC_OscConfig+0x35e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0x348>
 80026d6:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026de:	4a6e      	ldr	r2, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e6:	e075      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e8:	4b6b      	ldr	r3, [pc, #428]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	4968      	ldr	r1, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026fc:	e06a      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026fe:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	4962      	ldr	r1, [pc, #392]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002712:	e05f      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d042      	beq.n	80027a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800271c:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fd16 	bl	8001158 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002730:	f7fe fd12 	bl	8001158 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e280      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002742:	4b55      	ldr	r3, [pc, #340]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274e:	f7fe fd33 	bl	80011b8 <HAL_GetREVID>
 8002752:	4603      	mov	r3, r0
 8002754:	f241 0203 	movw	r2, #4099	; 0x1003
 8002758:	4293      	cmp	r3, r2
 800275a:	d817      	bhi.n	800278c <HAL_RCC_OscConfig+0x3ec>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	2b20      	cmp	r3, #32
 8002762:	d108      	bne.n	8002776 <HAL_RCC_OscConfig+0x3d6>
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800276c:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002772:	6053      	str	r3, [r2, #4]
 8002774:	e02e      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
 8002776:	4b48      	ldr	r3, [pc, #288]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	069b      	lsls	r3, r3, #26
 8002784:	4944      	ldr	r1, [pc, #272]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
 800278a:	e023      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
 800278c:	4b42      	ldr	r3, [pc, #264]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	493f      	ldr	r1, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	4313      	orrs	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
 80027a0:	e018      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fcd3 	bl	8001158 <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027b6:	f7fe fccf 	bl	8001158 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e23d      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d036      	beq.n	800284e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d019      	beq.n	800281c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fcb0 	bl	8001158 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe fcac 	bl	8001158 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e21a      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x45c>
 800281a:	e018      	b.n	800284e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fc96 	bl	8001158 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe fc92 	bl	8001158 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e200      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d039      	beq.n	80028ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01c      	beq.n	800289c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800286c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800286e:	f7fe fc73 	bl	8001158 <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002876:	f7fe fc6f 	bl	8001158 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1dd      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x4d6>
 8002894:	e01b      	b.n	80028ce <HAL_RCC_OscConfig+0x52e>
 8002896:	bf00      	nop
 8002898:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800289c:	4b9b      	ldr	r3, [pc, #620]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a9a      	ldr	r2, [pc, #616]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80028a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a8:	f7fe fc56 	bl	8001158 <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b0:	f7fe fc52 	bl	8001158 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1c0      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c2:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8081 	beq.w	80029de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028dc:	4b8c      	ldr	r3, [pc, #560]	; (8002b10 <HAL_RCC_OscConfig+0x770>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8b      	ldr	r2, [pc, #556]	; (8002b10 <HAL_RCC_OscConfig+0x770>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fc36 	bl	8001158 <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe fc32 	bl	8001158 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1a0      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002902:	4b83      	ldr	r3, [pc, #524]	; (8002b10 <HAL_RCC_OscConfig+0x770>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x584>
 8002916:	4b7d      	ldr	r3, [pc, #500]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	4a7c      	ldr	r2, [pc, #496]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	; 0x70
 8002922:	e02d      	b.n	8002980 <HAL_RCC_OscConfig+0x5e0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10c      	bne.n	8002946 <HAL_RCC_OscConfig+0x5a6>
 800292c:	4b77      	ldr	r3, [pc, #476]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a76      	ldr	r2, [pc, #472]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
 8002938:	4b74      	ldr	r3, [pc, #464]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a73      	ldr	r2, [pc, #460]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x5e0>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x5c8>
 800294e:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a6e      	ldr	r2, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a6b      	ldr	r2, [pc, #428]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x5e0>
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a67      	ldr	r2, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b65      	ldr	r3, [pc, #404]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a64      	ldr	r2, [pc, #400]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fbe6 	bl	8001158 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe fbe2 	bl	8001158 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e14e      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a6:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x5f0>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fbd0 	bl	8001158 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fbcc 	bl	8001158 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e138      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 812d 	beq.w	8002c42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029f0:	2b18      	cmp	r3, #24
 80029f2:	f000 80bd 	beq.w	8002b70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	f040 809e 	bne.w	8002b3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a41      	ldr	r2, [pc, #260]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fba4 	bl	8001158 <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fba0 	bl	8001158 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e10e      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a26:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_RCC_OscConfig+0x774>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4931      	ldr	r1, [pc, #196]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	628b      	str	r3, [r1, #40]	; 0x28
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	3b01      	subs	r3, #1
 8002a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	025b      	lsls	r3, r3, #9
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	3b01      	subs	r3, #1
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a74:	3b01      	subs	r3, #1
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a7c:	4923      	ldr	r1, [pc, #140]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a9a:	00d2      	lsls	r2, r2, #3
 8002a9c:	491b      	ldr	r1, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f023 020c 	bic.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4917      	ldr	r1, [pc, #92]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f023 0202 	bic.w	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	4912      	ldr	r1, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe fb29 	bl	8001158 <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b08:	e011      	b.n	8002b2e <HAL_RCC_OscConfig+0x78e>
 8002b0a:	bf00      	nop
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	58024800 	.word	0x58024800
 8002b14:	fffffc0c 	.word	0xfffffc0c
 8002b18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fb1c 	bl	8001158 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e08a      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x77c>
 8002b3a:	e082      	b.n	8002c42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3c:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a42      	ldr	r2, [pc, #264]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fb06 	bl	8001158 <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fb02 	bl	8001158 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e070      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b62:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x7b0>
 8002b6e:	e068      	b.n	8002c42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b76:	4b35      	ldr	r3, [pc, #212]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d031      	beq.n	8002be8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0203 	and.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d12a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d122      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	0a5b      	lsrs	r3, r3, #9
 8002bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d111      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d108      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0e1b      	lsrs	r3, r3, #24
 8002bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e02b      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bf6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d01f      	beq.n	8002c42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c0e:	f7fe faa3 	bl	8001158 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c14:	bf00      	nop
 8002c16:	f7fe fa9f 	bl	8001158 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d0f9      	beq.n	8002c16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_OscConfig+0x8b0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c2e:	00d2      	lsls	r2, r2, #3
 8002c30:	4906      	ldr	r1, [pc, #24]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3730      	adds	r7, #48	; 0x30
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	ffff0007 	.word	0xffff0007

08002c54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e19c      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b8a      	ldr	r3, [pc, #552]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d910      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b87      	ldr	r3, [pc, #540]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 020f 	bic.w	r2, r3, #15
 8002c7e:	4985      	ldr	r1, [pc, #532]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b83      	ldr	r3, [pc, #524]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e184      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d908      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb4:	4b78      	ldr	r3, [pc, #480]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	4975      	ldr	r1, [pc, #468]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	4b70      	ldr	r3, [pc, #448]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d908      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	496a      	ldr	r1, [pc, #424]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	4b64      	ldr	r3, [pc, #400]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d908      	bls.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d10:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	495e      	ldr	r1, [pc, #376]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d908      	bls.n	8002d50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d3e:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4953      	ldr	r1, [pc, #332]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d908      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f023 020f 	bic.w	r2, r3, #15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4947      	ldr	r1, [pc, #284]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d055      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d8a:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4940      	ldr	r1, [pc, #256]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da4:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d121      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0f6      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d115      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ea      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0de      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d6      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f023 0207 	bic.w	r2, r3, #7
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4925      	ldr	r1, [pc, #148]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e06:	f7fe f9a7 	bl	8001158 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0e:	f7fe f9a3 	bl	8001158 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e0be      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e24:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d1eb      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d208      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	490e      	ldr	r1, [pc, #56]	; (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d214      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4906      	ldr	r1, [pc, #24]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e086      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
 8002e94:	52002000 	.word	0x52002000
 8002e98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d208      	bcs.n	8002eca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	4939      	ldr	r1, [pc, #228]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d208      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	492e      	ldr	r1, [pc, #184]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d208      	bcs.n	8002f26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4922      	ldr	r1, [pc, #136]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d208      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4917      	ldr	r1, [pc, #92]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f54:	f000 f834 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	4912      	ldr	r1, [pc, #72]	; (8002fb0 <HAL_RCC_ClockConfig+0x35c>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <HAL_RCC_ClockConfig+0x35c>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_RCC_ClockConfig+0x360>)
 8002f8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x364>)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x368>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe f894 	bl	80010c4 <HAL_InitTick>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	080067f4 	.word	0x080067f4
 8002fb4:	24000004 	.word	0x24000004
 8002fb8:	24000000 	.word	0x24000000
 8002fbc:	24000008 	.word	0x24000008

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4bb3      	ldr	r3, [pc, #716]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fce:	2b18      	cmp	r3, #24
 8002fd0:	f200 8155 	bhi.w	800327e <HAL_RCC_GetSysClockFreq+0x2be>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003041 	.word	0x08003041
 8002fe0:	0800327f 	.word	0x0800327f
 8002fe4:	0800327f 	.word	0x0800327f
 8002fe8:	0800327f 	.word	0x0800327f
 8002fec:	0800327f 	.word	0x0800327f
 8002ff0:	0800327f 	.word	0x0800327f
 8002ff4:	0800327f 	.word	0x0800327f
 8002ff8:	0800327f 	.word	0x0800327f
 8002ffc:	08003067 	.word	0x08003067
 8003000:	0800327f 	.word	0x0800327f
 8003004:	0800327f 	.word	0x0800327f
 8003008:	0800327f 	.word	0x0800327f
 800300c:	0800327f 	.word	0x0800327f
 8003010:	0800327f 	.word	0x0800327f
 8003014:	0800327f 	.word	0x0800327f
 8003018:	0800327f 	.word	0x0800327f
 800301c:	0800306d 	.word	0x0800306d
 8003020:	0800327f 	.word	0x0800327f
 8003024:	0800327f 	.word	0x0800327f
 8003028:	0800327f 	.word	0x0800327f
 800302c:	0800327f 	.word	0x0800327f
 8003030:	0800327f 	.word	0x0800327f
 8003034:	0800327f 	.word	0x0800327f
 8003038:	0800327f 	.word	0x0800327f
 800303c:	08003073 	.word	0x08003073
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003040:	4b94      	ldr	r3, [pc, #592]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800304c:	4b91      	ldr	r3, [pc, #580]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	4a90      	ldr	r2, [pc, #576]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800305e:	e111      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003060:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003062:	61bb      	str	r3, [r7, #24]
      break;
 8003064:	e10e      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003066:	4b8d      	ldr	r3, [pc, #564]	; (800329c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003068:	61bb      	str	r3, [r7, #24]
      break;
 800306a:	e10b      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800306e:	61bb      	str	r3, [r7, #24]
      break;
 8003070:	e108      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800307c:	4b85      	ldr	r3, [pc, #532]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003086:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003088:	4b82      	ldr	r3, [pc, #520]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003092:	4b80      	ldr	r3, [pc, #512]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	08db      	lsrs	r3, r3, #3
 8003098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80e1 	beq.w	8003278 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	f000 8083 	beq.w	80031c4 <HAL_RCC_GetSysClockFreq+0x204>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	f200 80a1 	bhi.w	8003208 <HAL_RCC_GetSysClockFreq+0x248>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x114>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d056      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030d2:	e099      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d4:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02d      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030e0:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	4a6b      	ldr	r2, [pc, #428]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311a:	ed97 6a02 	vldr	s12, [r7, #8]
 800311e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800312e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800313a:	e087      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800314a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314e:	4b51      	ldr	r3, [pc, #324]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003162:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800316e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800317e:	e065      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c2:	e043      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d6:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003206:	e021      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322a:	ed97 6a02 	vldr	s12, [r7, #8]
 800322e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800324a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	0a5b      	lsrs	r3, r3, #9
 8003252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003256:	3301      	adds	r3, #1
 8003258:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003264:	edd7 6a07 	vldr	s13, [r7, #28]
 8003268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003270:	ee17 3a90 	vmov	r3, s15
 8003274:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003276:	e005      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61bb      	str	r3, [r7, #24]
      break;
 800327c:	e002      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003280:	61bb      	str	r3, [r7, #24]
      break;
 8003282:	bf00      	nop
  }

  return sysclockfreq;
 8003284:	69bb      	ldr	r3, [r7, #24]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	58024400 	.word	0x58024400
 8003298:	03d09000 	.word	0x03d09000
 800329c:	003d0900 	.word	0x003d0900
 80032a0:	007a1200 	.word	0x007a1200
 80032a4:	46000000 	.word	0x46000000
 80032a8:	4c742400 	.word	0x4c742400
 80032ac:	4a742400 	.word	0x4a742400
 80032b0:	4af42400 	.word	0x4af42400

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032ba:	f7ff fe81 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 80032be:	4602      	mov	r2, r0
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_RCC_GetHCLKFreq+0x50>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	490f      	ldr	r1, [pc, #60]	; (8003308 <HAL_RCC_GetHCLKFreq+0x54>)
 80032cc:	5ccb      	ldrb	r3, [r1, r3]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_RCC_GetHCLKFreq+0x50>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_RCC_GetHCLKFreq+0x54>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_RCC_GetHCLKFreq+0x58>)
 80032f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_RCC_GetHCLKFreq+0x58>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	58024400 	.word	0x58024400
 8003308:	080067f4 	.word	0x080067f4
 800330c:	24000004 	.word	0x24000004
 8003310:	24000000 	.word	0x24000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003318:	f7ff ffcc 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4904      	ldr	r1, [pc, #16]	; (800333c <HAL_RCC_GetPCLK1Freq+0x28>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	58024400 	.word	0x58024400
 800333c:	080067f4 	.word	0x080067f4

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003344:	f7ff ffb6 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4904      	ldr	r1, [pc, #16]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	58024400 	.word	0x58024400
 8003368:	080067f4 	.word	0x080067f4

0800336c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800336c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003370:	b0ca      	sub	sp, #296	; 0x128
 8003372:	af00      	add	r7, sp, #0
 8003374:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003378:	2300      	movs	r3, #0
 800337a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800337e:	2300      	movs	r3, #0
 8003380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003390:	2500      	movs	r5, #0
 8003392:	ea54 0305 	orrs.w	r3, r4, r5
 8003396:	d049      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033a2:	d02f      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033a8:	d828      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ae:	d01a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b4:	d822      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033be:	d007      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033c0:	e01c      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c2:	4bb8      	ldr	r3, [pc, #736]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	4ab7      	ldr	r2, [pc, #732]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ce:	e01a      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d4:	3308      	adds	r3, #8
 80033d6:	2102      	movs	r1, #2
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fc8f 	bl	8004cfc <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033e4:	e00f      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ea:	3328      	adds	r3, #40	; 0x28
 80033ec:	2102      	movs	r1, #2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fd36 	bl	8004e60 <RCCEx_PLL3_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033fa:	e004      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800340e:	4ba5      	ldr	r3, [pc, #660]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341c:	4aa1      	ldr	r2, [pc, #644]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341e:	430b      	orrs	r3, r1
 8003420:	6513      	str	r3, [r2, #80]	; 0x50
 8003422:	e003      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003438:	f04f 0900 	mov.w	r9, #0
 800343c:	ea58 0309 	orrs.w	r3, r8, r9
 8003440:	d047      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	2b04      	cmp	r3, #4
 800344a:	d82a      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003469 	.word	0x08003469
 8003458:	08003477 	.word	0x08003477
 800345c:	0800348d 	.word	0x0800348d
 8003460:	080034ab 	.word	0x080034ab
 8003464:	080034ab 	.word	0x080034ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003468:	4b8e      	ldr	r3, [pc, #568]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4a8d      	ldr	r2, [pc, #564]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003474:	e01a      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	3308      	adds	r3, #8
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f001 fc3c 	bl	8004cfc <RCCEx_PLL2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800348a:	e00f      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003490:	3328      	adds	r3, #40	; 0x28
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fce3 	bl	8004e60 <RCCEx_PLL3_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a0:	e004      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b4:	4b7b      	ldr	r3, [pc, #492]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	f023 0107 	bic.w	r1, r3, #7
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	4a78      	ldr	r2, [pc, #480]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6513      	str	r3, [r2, #80]	; 0x50
 80034c8:	e003      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80034de:	f04f 0b00 	mov.w	fp, #0
 80034e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80034e6:	d04c      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d030      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f8:	d829      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034fa:	2bc0      	cmp	r3, #192	; 0xc0
 80034fc:	d02d      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003500:	d825      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d018      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003506:	2b80      	cmp	r3, #128	; 0x80
 8003508:	d821      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d007      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003512:	e01c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003514:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4a62      	ldr	r2, [pc, #392]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003520:	e01c      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003526:	3308      	adds	r3, #8
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fbe6 	bl	8004cfc <RCCEx_PLL2_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003536:	e011      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353c:	3328      	adds	r3, #40	; 0x28
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fc8d 	bl	8004e60 <RCCEx_PLL3_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800354c:	e006      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003554:	e002      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800355a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003564:	4b4f      	ldr	r3, [pc, #316]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	4a4c      	ldr	r2, [pc, #304]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6513      	str	r3, [r2, #80]	; 0x50
 8003578:	e003      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800357e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800358e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003598:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800359c:	460b      	mov	r3, r1
 800359e:	4313      	orrs	r3, r2
 80035a0:	d053      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ae:	d035      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b4:	d82e      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035ba:	d031      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035c0:	d828      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d01a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035cc:	d822      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d6:	d007      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035d8:	e01c      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035da:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a31      	ldr	r2, [pc, #196]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e6:	e01c      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ec:	3308      	adds	r3, #8
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fb83 	bl	8004cfc <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035fc:	e011      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003602:	3328      	adds	r3, #40	; 0x28
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fc2a 	bl	8004e60 <RCCEx_PLL3_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003612:	e006      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800361a:	e002      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363c:	430b      	orrs	r3, r1
 800363e:	6593      	str	r3, [r2, #88]	; 0x58
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003656:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003660:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003664:	460b      	mov	r3, r1
 8003666:	4313      	orrs	r3, r2
 8003668:	d056      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003676:	d038      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367c:	d831      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800367e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003682:	d034      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003688:	d82b      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800368a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368e:	d01d      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003694:	d825      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800369a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036a0:	e01f      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036a2:	bf00      	nop
 80036a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4ba2      	ldr	r3, [pc, #648]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	4aa1      	ldr	r2, [pc, #644]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b4:	e01c      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ba:	3308      	adds	r3, #8
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fb1c 	bl	8004cfc <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	3328      	adds	r3, #40	; 0x28
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fbc3 	bl	8004e60 <RCCEx_PLL3_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036f8:	4b8e      	ldr	r3, [pc, #568]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003704:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003708:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6593      	str	r3, [r2, #88]	; 0x58
 800370e:	e003      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800372e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003732:	460b      	mov	r3, r1
 8003734:	4313      	orrs	r3, r2
 8003736:	d03a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d01f      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003742:	2b30      	cmp	r3, #48	; 0x30
 8003744:	d819      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003746:	2b20      	cmp	r3, #32
 8003748:	d00c      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800374a:	2b20      	cmp	r3, #32
 800374c:	d815      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d019      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003752:	2b10      	cmp	r3, #16
 8003754:	d111      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	4a76      	ldr	r2, [pc, #472]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003762:	e011      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003768:	3308      	adds	r3, #8
 800376a:	2102      	movs	r1, #2
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fac5 	bl	8004cfc <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003778:	e006      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003780:	e002      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003794:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	4a65      	ldr	r2, [pc, #404]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80037ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80037c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d051      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d8:	d035      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037de:	d82e      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037e4:	d031      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037ea:	d828      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f0:	d01a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	d822      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d007      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003802:	e01c      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003804:	4b4b      	ldr	r3, [pc, #300]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	4a4a      	ldr	r2, [pc, #296]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003810:	e01c      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003816:	3308      	adds	r3, #8
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fa6e 	bl	8004cfc <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003826:	e011      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382c:	3328      	adds	r3, #40	; 0x28
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f001 fb15 	bl	8004e60 <RCCEx_PLL3_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003844:	e002      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800384a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800384c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003854:	4b37      	ldr	r3, [pc, #220]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	4a34      	ldr	r2, [pc, #208]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003864:	430b      	orrs	r3, r1
 8003866:	6513      	str	r3, [r2, #80]	; 0x50
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800387e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003888:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800388c:	460b      	mov	r3, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	d056      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	d033      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800389e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a2:	d82c      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a8:	d02f      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ae:	d826      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b4:	d02b      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ba:	d820      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c0:	d012      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c6:	d81a      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d022      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d0:	d115      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d6:	3308      	adds	r3, #8
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 fa0e 	bl	8004cfc <RCCEx_PLL2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038e6:	e015      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ec:	3328      	adds	r3, #40	; 0x28
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fab5 	bl	8004e60 <RCCEx_PLL3_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038fc:	e00a      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003906:	bf00      	nop
 8003908:	e004      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10d      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003920:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392a:	4a02      	ldr	r2, [pc, #8]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392c:	430b      	orrs	r3, r1
 800392e:	6513      	str	r3, [r2, #80]	; 0x50
 8003930:	e006      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800393c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800394c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003956:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d055      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396c:	d033      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800396e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003972:	d82c      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d02f      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d826      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003984:	d02b      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003986:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800398a:	d820      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800398c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003990:	d012      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003996:	d81a      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d022      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800399c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a0:	d115      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a6:	3308      	adds	r3, #8
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 f9a6 	bl	8004cfc <RCCEx_PLL2_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039b6:	e015      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039bc:	3328      	adds	r3, #40	; 0x28
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fa4d 	bl	8004e60 <RCCEx_PLL3_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039cc:	e00a      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d4:	e006      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039d6:	bf00      	nop
 80039d8:	e004      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039ec:	4ba3      	ldr	r3, [pc, #652]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039fc:	4a9f      	ldr	r2, [pc, #636]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	6593      	str	r3, [r2, #88]	; 0x58
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d037      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a36:	d00e      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a3c:	d816      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a46:	d111      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4b8c      	ldr	r3, [pc, #560]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a8b      	ldr	r2, [pc, #556]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a54:	e00f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f94c 	bl	8004cfc <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a7b      	ldr	r2, [pc, #492]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	6513      	str	r3, [r2, #80]	; 0x50
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ab2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	d039      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d81c      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b09 	.word	0x08003b09
 8003ad0:	08003add 	.word	0x08003add
 8003ad4:	08003aeb 	.word	0x08003aeb
 8003ad8:	08003b09 	.word	0x08003b09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	4a66      	ldr	r2, [pc, #408]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ae8:	e00f      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2102      	movs	r1, #2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 f902 	bl	8004cfc <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003afe:	e004      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b12:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	f023 0103 	bic.w	r1, r3, #3
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	4a56      	ldr	r2, [pc, #344]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b26:	e003      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f000 809f 	beq.w	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b52:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b5e:	f7fd fafb 	bl	8001158 <HAL_GetTick>
 8003b62:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b66:	e00b      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fd faf6 	bl	8001158 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d903      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7e:	e005      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b80:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ed      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d179      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ba0:	4053      	eors	r3, r2
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d015      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003baa:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb6:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	4a30      	ldr	r2, [pc, #192]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bce:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be2:	d118      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd fab8 	bl	8001158 <HAL_GetTick>
 8003be8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bec:	e00d      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd fab3 	bl	8001158 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bf8:	1ad2      	subs	r2, r2, r3
 8003bfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d903      	bls.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003c08:	e005      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0eb      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d129      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2e:	d10e      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c40:	091a      	lsrs	r2, r3, #4
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6113      	str	r3, [r2, #16]
 8003c4c:	e005      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c58:	6113      	str	r3, [r2, #16]
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c70:	e00e      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003c7a:	e009      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	58024800 	.word	0x58024800
 8003c84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f002 0301 	and.w	r3, r2, #1
 8003c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ca6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f000 8089 	beq.w	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb8:	2b28      	cmp	r3, #40	; 0x28
 8003cba:	d86b      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003d9d 	.word	0x08003d9d
 8003cc8:	08003d95 	.word	0x08003d95
 8003ccc:	08003d95 	.word	0x08003d95
 8003cd0:	08003d95 	.word	0x08003d95
 8003cd4:	08003d95 	.word	0x08003d95
 8003cd8:	08003d95 	.word	0x08003d95
 8003cdc:	08003d95 	.word	0x08003d95
 8003ce0:	08003d95 	.word	0x08003d95
 8003ce4:	08003d69 	.word	0x08003d69
 8003ce8:	08003d95 	.word	0x08003d95
 8003cec:	08003d95 	.word	0x08003d95
 8003cf0:	08003d95 	.word	0x08003d95
 8003cf4:	08003d95 	.word	0x08003d95
 8003cf8:	08003d95 	.word	0x08003d95
 8003cfc:	08003d95 	.word	0x08003d95
 8003d00:	08003d95 	.word	0x08003d95
 8003d04:	08003d7f 	.word	0x08003d7f
 8003d08:	08003d95 	.word	0x08003d95
 8003d0c:	08003d95 	.word	0x08003d95
 8003d10:	08003d95 	.word	0x08003d95
 8003d14:	08003d95 	.word	0x08003d95
 8003d18:	08003d95 	.word	0x08003d95
 8003d1c:	08003d95 	.word	0x08003d95
 8003d20:	08003d95 	.word	0x08003d95
 8003d24:	08003d9d 	.word	0x08003d9d
 8003d28:	08003d95 	.word	0x08003d95
 8003d2c:	08003d95 	.word	0x08003d95
 8003d30:	08003d95 	.word	0x08003d95
 8003d34:	08003d95 	.word	0x08003d95
 8003d38:	08003d95 	.word	0x08003d95
 8003d3c:	08003d95 	.word	0x08003d95
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d9d 	.word	0x08003d9d
 8003d48:	08003d95 	.word	0x08003d95
 8003d4c:	08003d95 	.word	0x08003d95
 8003d50:	08003d95 	.word	0x08003d95
 8003d54:	08003d95 	.word	0x08003d95
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d95 	.word	0x08003d95
 8003d60:	08003d95 	.word	0x08003d95
 8003d64:	08003d9d 	.word	0x08003d9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 ffc3 	bl	8004cfc <RCCEx_PLL2_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d7c:	e00f      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d82:	3328      	adds	r3, #40	; 0x28
 8003d84:	2101      	movs	r1, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f86a 	bl	8004e60 <RCCEx_PLL3_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d92:	e004      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003da6:	4bbf      	ldr	r3, [pc, #764]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db4:	4abb      	ldr	r2, [pc, #748]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db6:	430b      	orrs	r3, r1
 8003db8:	6553      	str	r3, [r2, #84]	; 0x54
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	f002 0302 	and.w	r3, r2, #2
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003dda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d041      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d824      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e0d 	.word	0x08003e0d
 8003dfc:	08003e23 	.word	0x08003e23
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	3308      	adds	r3, #8
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 ff71 	bl	8004cfc <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e20:	e00f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e26:	3328      	adds	r3, #40	; 0x28
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 f818 	bl	8004e60 <RCCEx_PLL3_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e4a:	4b96      	ldr	r3, [pc, #600]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f023 0107 	bic.w	r1, r3, #7
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e58:	4a92      	ldr	r2, [pc, #584]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	6553      	str	r3, [r2, #84]	; 0x54
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f002 0304 	and.w	r3, r2, #4
 8003e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d044      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d825      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ee9 	.word	0x08003ee9
 8003ea0:	08003eb5 	.word	0x08003eb5
 8003ea4:	08003ecb 	.word	0x08003ecb
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ee9 	.word	0x08003ee9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb8:	3308      	adds	r3, #8
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ff1d 	bl	8004cfc <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ec8:	e00f      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ece:	3328      	adds	r3, #40	; 0x28
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 ffc4 	bl	8004e60 <RCCEx_PLL3_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ede:	e004      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ee6:	e000      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef2:	4b6c      	ldr	r3, [pc, #432]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	f023 0107 	bic.w	r1, r3, #7
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	4a68      	ldr	r2, [pc, #416]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6593      	str	r3, [r2, #88]	; 0x58
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f002 0320 	and.w	r3, r2, #32
 8003f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f22:	2300      	movs	r3, #0
 8003f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	d055      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3e:	d033      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f44:	d82c      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d02f      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d826      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f56:	d02b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f5c:	d820      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f62:	d012      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f68:	d81a      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d022      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f72:	d115      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f78:	3308      	adds	r3, #8
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 febd 	bl	8004cfc <RCCEx_PLL2_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f88:	e015      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8e:	3328      	adds	r3, #40	; 0x28
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ff64 	bl	8004e60 <RCCEx_PLL3_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fa6:	e006      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6553      	str	r3, [r2, #84]	; 0x54
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ff4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d058      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800400a:	d033      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800400c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004010:	d82c      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d02f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d826      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800401e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004022:	d02b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004028:	d820      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d012      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004034:	d81a      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d022      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d115      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004044:	3308      	adds	r3, #8
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fe57 	bl	8004cfc <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004054:	e015      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405a:	3328      	adds	r3, #40	; 0x28
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fefe 	bl	8004e60 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10e      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004096:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6593      	str	r3, [r2, #88]	; 0x58
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80040bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040ca:	460b      	mov	r3, r1
 80040cc:	4313      	orrs	r3, r2
 80040ce:	d055      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040dc:	d033      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040e2:	d82c      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d02f      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ee:	d826      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f4:	d02b      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80040f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040fa:	d820      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004100:	d012      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004106:	d81a      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d022      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004110:	d115      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004116:	3308      	adds	r3, #8
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fdee 	bl	8004cfc <RCCEx_PLL2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004126:	e015      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412c:	3328      	adds	r3, #40	; 0x28
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fe95 	bl	8004e60 <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800413c:	e00a      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004144:	e006      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004146:	bf00      	nop
 8004148:	e004      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800415c:	4ba1      	ldr	r3, [pc, #644]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004168:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800416c:	4a9d      	ldr	r2, [pc, #628]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416e:	430b      	orrs	r3, r1
 8004170:	6593      	str	r3, [r2, #88]	; 0x58
 8004172:	e003      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f002 0308 	and.w	r3, r2, #8
 8004188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004192:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d01e      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	3328      	adds	r3, #40	; 0x28
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fe54 	bl	8004e60 <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041c4:	4b87      	ldr	r3, [pc, #540]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d4:	4a83      	ldr	r2, [pc, #524]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f002 0310 	and.w	r3, r2, #16
 80041e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80041f4:	460b      	mov	r3, r1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	d01e      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004206:	d10c      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800420c:	3328      	adds	r3, #40	; 0x28
 800420e:	2102      	movs	r1, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fe25 	bl	8004e60 <RCCEx_PLL3_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004222:	4b70      	ldr	r3, [pc, #448]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004232:	4a6c      	ldr	r2, [pc, #432]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004234:	430b      	orrs	r3, r1
 8004236:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800424e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d03e      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004264:	d022      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800426a:	d81b      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004274:	d00b      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004276:	e015      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427c:	3308      	adds	r3, #8
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fd3b 	bl	8004cfc <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800428c:	e00f      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	3328      	adds	r3, #40	; 0x28
 8004294:	2102      	movs	r1, #2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fde2 	bl	8004e60 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042a2:	e004      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042c6:	4a47      	ldr	r2, [pc, #284]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6593      	str	r3, [r2, #88]	; 0x58
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80042e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e4:	2300      	movs	r3, #0
 80042e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d03b      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042fe:	d01f      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004300:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004304:	d818      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430a:	d003      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800430c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004310:	d007      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004312:	e011      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004314:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4a32      	ldr	r2, [pc, #200]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004320:	e00f      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004326:	3328      	adds	r3, #40	; 0x28
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fd98 	bl	8004e60 <RCCEx_PLL3_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434a:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6553      	str	r3, [r2, #84]	; 0x54
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004376:	673b      	str	r3, [r7, #112]	; 0x70
 8004378:	2300      	movs	r3, #0
 800437a:	677b      	str	r3, [r7, #116]	; 0x74
 800437c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d034      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d007      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004396:	e011      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004398:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043a4:	e00e      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043aa:	3308      	adds	r3, #8
 80043ac:	2102      	movs	r1, #2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fca4 	bl	8004cfc <RCCEx_PLL2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043ba:	e003      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10d      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	4a02      	ldr	r2, [pc, #8]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043e0:	e006      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043e2:	bf00      	nop
 80043e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80043fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043fe:	2300      	movs	r3, #0
 8004400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004402:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004406:	460b      	mov	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	d00c      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004410:	3328      	adds	r3, #40	; 0x28
 8004412:	2102      	movs	r1, #2
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fd23 	bl	8004e60 <RCCEx_PLL3_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004432:	663b      	str	r3, [r7, #96]	; 0x60
 8004434:	2300      	movs	r3, #0
 8004436:	667b      	str	r3, [r7, #100]	; 0x64
 8004438:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d038      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444e:	d018      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004454:	d811      	bhi.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445a:	d014      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d80b      	bhi.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d011      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d106      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446c:	4bc3      	ldr	r3, [pc, #780]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	4ac2      	ldr	r2, [pc, #776]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004478:	e008      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004480:	e004      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004482:	bf00      	nop
 8004484:	e002      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800448a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004494:	4bb9      	ldr	r3, [pc, #740]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a4:	4ab5      	ldr	r2, [pc, #724]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6553      	str	r3, [r2, #84]	; 0x54
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c2:	2300      	movs	r3, #0
 80044c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044d0:	4baa      	ldr	r3, [pc, #680]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044de:	4aa7      	ldr	r2, [pc, #668]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044f0:	653b      	str	r3, [r7, #80]	; 0x50
 80044f2:	2300      	movs	r3, #0
 80044f4:	657b      	str	r3, [r7, #84]	; 0x54
 80044f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80044fa:	460b      	mov	r3, r1
 80044fc:	4313      	orrs	r3, r2
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004500:	4b9e      	ldr	r3, [pc, #632]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004510:	4a9a      	ldr	r2, [pc, #616]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004512:	430b      	orrs	r3, r1
 8004514:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
 8004524:	2300      	movs	r3, #0
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004528:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800452c:	460b      	mov	r3, r1
 800452e:	4313      	orrs	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004532:	4b92      	ldr	r3, [pc, #584]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004540:	4a8e      	ldr	r2, [pc, #568]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004542:	430b      	orrs	r3, r1
 8004544:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004552:	643b      	str	r3, [r7, #64]	; 0x40
 8004554:	2300      	movs	r3, #0
 8004556:	647b      	str	r3, [r7, #68]	; 0x44
 8004558:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800455c:	460b      	mov	r3, r1
 800455e:	4313      	orrs	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004562:	4b86      	ldr	r3, [pc, #536]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	4a85      	ldr	r2, [pc, #532]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800456c:	6113      	str	r3, [r2, #16]
 800456e:	4b83      	ldr	r3, [pc, #524]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004570:	6919      	ldr	r1, [r3, #16]
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800457a:	4a80      	ldr	r2, [pc, #512]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457c:	430b      	orrs	r3, r1
 800457e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
 800458e:	2300      	movs	r3, #0
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004592:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800459c:	4b77      	ldr	r3, [pc, #476]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	4a74      	ldr	r2, [pc, #464]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80045bc:	633b      	str	r3, [r7, #48]	; 0x30
 80045be:	2300      	movs	r3, #0
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
 80045c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045cc:	4b6b      	ldr	r3, [pc, #428]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045dc:	4a67      	ldr	r2, [pc, #412]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	2100      	movs	r1, #0
 80045ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d011      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	3308      	adds	r3, #8
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb78 	bl	8004cfc <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800461e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	2100      	movs	r1, #0
 800462c:	6239      	str	r1, [r7, #32]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
 8004634:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d011      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004642:	3308      	adds	r3, #8
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fb58 	bl	8004cfc <RCCEx_PLL2_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800465e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	2100      	movs	r1, #0
 800466c:	61b9      	str	r1, [r7, #24]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004682:	3308      	adds	r3, #8
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fb38 	bl	8004cfc <RCCEx_PLL2_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	2100      	movs	r1, #0
 80046ac:	6139      	str	r1, [r7, #16]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046b8:	460b      	mov	r3, r1
 80046ba:	4313      	orrs	r3, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	3328      	adds	r3, #40	; 0x28
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fbca 	bl	8004e60 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	2100      	movs	r1, #0
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d011      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004702:	3328      	adds	r3, #40	; 0x28
 8004704:	2101      	movs	r1, #1
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fbaa 	bl	8004e60 <RCCEx_PLL3_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800471e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	2100      	movs	r1, #0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d011      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	3328      	adds	r3, #40	; 0x28
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb8a 	bl	8004e60 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004762:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004776:	46bd      	mov	sp, r7
 8004778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477c:	58024400 	.word	0x58024400

08004780 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004784:	f7fe fd96 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	58024400 	.word	0x58024400
 80047a8:	080067f4 	.word	0x080067f4

080047ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	; 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047b4:	4ba1      	ldr	r3, [pc, #644]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047be:	4b9f      	ldr	r3, [pc, #636]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	0b1b      	lsrs	r3, r3, #12
 80047c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047ca:	4b9c      	ldr	r3, [pc, #624]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047d6:	4b99      	ldr	r3, [pc, #612]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	08db      	lsrs	r3, r3, #3
 80047dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8111 	beq.w	8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	f000 8083 	beq.w	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b02      	cmp	r3, #2
 8004806:	f200 80a1 	bhi.w	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d056      	beq.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004816:	e099      	b.n	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004818:	4b88      	ldr	r3, [pc, #544]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02d      	beq.n	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004824:	4b85      	ldr	r3, [pc, #532]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	4a84      	ldr	r2, [pc, #528]	; (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b7b      	ldr	r3, [pc, #492]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800487e:	e087      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c2:	e065      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004906:	e043      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491a:	4b48      	ldr	r3, [pc, #288]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492a:	ed97 6a03 	vldr	s12, [r7, #12]
 800492e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494a:	e021      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800495a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495e:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004990:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	0a5b      	lsrs	r3, r3, #9
 8004996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b6:	ee17 2a90 	vmov	r2, s15
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049be:	4b1f      	ldr	r3, [pc, #124]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e4:	ee17 2a90 	vmov	r2, s15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049ec:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	0e1b      	lsrs	r3, r3, #24
 80049f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a12:	ee17 2a90 	vmov	r2, s15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a1a:	e008      	b.n	8004a2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
}
 8004a2e:	bf00      	nop
 8004a30:	3724      	adds	r7, #36	; 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	03d09000 	.word	0x03d09000
 8004a44:	46000000 	.word	0x46000000
 8004a48:	4c742400 	.word	0x4c742400
 8004a4c:	4a742400 	.word	0x4a742400
 8004a50:	4af42400 	.word	0x4af42400

08004a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a5c:	4ba1      	ldr	r3, [pc, #644]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a66:	4b9f      	ldr	r3, [pc, #636]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	0d1b      	lsrs	r3, r3, #20
 8004a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a72:	4b9c      	ldr	r3, [pc, #624]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a7e:	4b99      	ldr	r3, [pc, #612]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8111 	beq.w	8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	f000 8083 	beq.w	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	f200 80a1 	bhi.w	8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d056      	beq.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004abe:	e099      	b.n	8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac0:	4b88      	ldr	r3, [pc, #544]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02d      	beq.n	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004acc:	4b85      	ldr	r3, [pc, #532]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	4a84      	ldr	r2, [pc, #528]	; (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b7b      	ldr	r3, [pc, #492]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b26:	e087      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	e065      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b59      	ldr	r3, [pc, #356]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bae:	e043      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b48      	ldr	r3, [pc, #288]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf2:	e021      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c38:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5e:	ee17 2a90 	vmov	r2, s15
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c66:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8c:	ee17 2a90 	vmov	r2, s15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	bf00      	nop
 8004cd8:	3724      	adds	r7, #36	; 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	03d09000 	.word	0x03d09000
 8004cec:	46000000 	.word	0x46000000
 8004cf0:	4c742400 	.word	0x4c742400
 8004cf4:	4a742400 	.word	0x4a742400
 8004cf8:	4af42400 	.word	0x4af42400

08004cfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d0a:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d101      	bne.n	8004d1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e099      	b.n	8004e4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d1a:	4b4f      	ldr	r3, [pc, #316]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4e      	ldr	r2, [pc, #312]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fc fa17 	bl	8001158 <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2e:	f7fc fa13 	bl	8001158 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e086      	b.n	8004e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d40:	4b45      	ldr	r3, [pc, #276]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d4c:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	031b      	lsls	r3, r3, #12
 8004d5a:	493f      	ldr	r1, [pc, #252]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	025b      	lsls	r3, r3, #9
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d90:	4931      	ldr	r1, [pc, #196]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d96:	4b30      	ldr	r3, [pc, #192]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	492d      	ldr	r1, [pc, #180]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	f023 0220 	bic.w	r2, r3, #32
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	4928      	ldr	r1, [pc, #160]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <RCCEx_PLL2_Config+0x160>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	69d2      	ldr	r2, [r2, #28]
 8004dd2:	00d2      	lsls	r2, r2, #3
 8004dd4:	4920      	ldr	r1, [pc, #128]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dda:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004de0:	f043 0310 	orr.w	r3, r3, #16
 8004de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dec:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004df8:	e00f      	b.n	8004e1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d106      	bne.n	8004e0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e00:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e0c:	e005      	b.n	8004e1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e0e:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fc f997 	bl	8001158 <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e2c:	e008      	b.n	8004e40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e2e:	f7fc f993 	bl	8001158 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	ffff0007 	.word	0xffff0007

08004e60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e6e:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d101      	bne.n	8004e7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e099      	b.n	8004fb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e7e:	4b4f      	ldr	r3, [pc, #316]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a4e      	ldr	r2, [pc, #312]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc f965 	bl	8001158 <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e92:	f7fc f961 	bl	8001158 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e086      	b.n	8004fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ea4:	4b45      	ldr	r3, [pc, #276]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f0      	bne.n	8004e92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004eb0:	4b42      	ldr	r3, [pc, #264]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	051b      	lsls	r3, r3, #20
 8004ebe:	493f      	ldr	r1, [pc, #252]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	025b      	lsls	r3, r3, #9
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ef4:	4931      	ldr	r1, [pc, #196]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004efa:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	492d      	ldr	r1, [pc, #180]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	4928      	ldr	r1, [pc, #160]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	4a26      	ldr	r2, [pc, #152]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <RCCEx_PLL3_Config+0x160>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	69d2      	ldr	r2, [r2, #28]
 8004f36:	00d2      	lsls	r2, r2, #3
 8004f38:	4920      	ldr	r1, [pc, #128]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f5c:	e00f      	b.n	8004f7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d106      	bne.n	8004f72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f70:	e005      	b.n	8004f7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc f8e5 	bl	8001158 <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f90:	e008      	b.n	8004fa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f92:	f7fc f8e1 	bl	8001158 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	ffff0007 	.word	0xffff0007

08004fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e042      	b.n	800505c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fb fee5 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2224      	movs	r2, #36	; 0x24
 8004ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f82c 	bl	8005064 <UART_SetConfig>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e022      	b.n	800505c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fd88 	bl	8005b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fe0f 	bl	8005c78 <UART_CheckIdleState>
 800505a:	4603      	mov	r3, r0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b092      	sub	sp, #72	; 0x48
 800506a:	af00      	add	r7, sp, #0
 800506c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	431a      	orrs	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4313      	orrs	r3, r2
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4bbe      	ldr	r3, [pc, #760]	; (800538c <UART_SetConfig+0x328>)
 8005094:	4013      	ands	r3, r2
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800509c:	430b      	orrs	r3, r1
 800509e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4ab3      	ldr	r2, [pc, #716]	; (8005390 <UART_SetConfig+0x32c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050cc:	4313      	orrs	r3, r2
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	4baf      	ldr	r3, [pc, #700]	; (8005394 <UART_SetConfig+0x330>)
 80050d8:	4013      	ands	r3, r2
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	f023 010f 	bic.w	r1, r3, #15
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4aa6      	ldr	r2, [pc, #664]	; (8005398 <UART_SetConfig+0x334>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d177      	bne.n	80051f4 <UART_SetConfig+0x190>
 8005104:	4ba5      	ldr	r3, [pc, #660]	; (800539c <UART_SetConfig+0x338>)
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510c:	2b28      	cmp	r3, #40	; 0x28
 800510e:	d86d      	bhi.n	80051ec <UART_SetConfig+0x188>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <UART_SetConfig+0xb4>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	080051bd 	.word	0x080051bd
 800511c:	080051ed 	.word	0x080051ed
 8005120:	080051ed 	.word	0x080051ed
 8005124:	080051ed 	.word	0x080051ed
 8005128:	080051ed 	.word	0x080051ed
 800512c:	080051ed 	.word	0x080051ed
 8005130:	080051ed 	.word	0x080051ed
 8005134:	080051ed 	.word	0x080051ed
 8005138:	080051c5 	.word	0x080051c5
 800513c:	080051ed 	.word	0x080051ed
 8005140:	080051ed 	.word	0x080051ed
 8005144:	080051ed 	.word	0x080051ed
 8005148:	080051ed 	.word	0x080051ed
 800514c:	080051ed 	.word	0x080051ed
 8005150:	080051ed 	.word	0x080051ed
 8005154:	080051ed 	.word	0x080051ed
 8005158:	080051cd 	.word	0x080051cd
 800515c:	080051ed 	.word	0x080051ed
 8005160:	080051ed 	.word	0x080051ed
 8005164:	080051ed 	.word	0x080051ed
 8005168:	080051ed 	.word	0x080051ed
 800516c:	080051ed 	.word	0x080051ed
 8005170:	080051ed 	.word	0x080051ed
 8005174:	080051ed 	.word	0x080051ed
 8005178:	080051d5 	.word	0x080051d5
 800517c:	080051ed 	.word	0x080051ed
 8005180:	080051ed 	.word	0x080051ed
 8005184:	080051ed 	.word	0x080051ed
 8005188:	080051ed 	.word	0x080051ed
 800518c:	080051ed 	.word	0x080051ed
 8005190:	080051ed 	.word	0x080051ed
 8005194:	080051ed 	.word	0x080051ed
 8005198:	080051dd 	.word	0x080051dd
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080051ed 	.word	0x080051ed
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	080051ed 	.word	0x080051ed
 80051ac:	080051ed 	.word	0x080051ed
 80051b0:	080051ed 	.word	0x080051ed
 80051b4:	080051ed 	.word	0x080051ed
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e222      	b.n	800560a <UART_SetConfig+0x5a6>
 80051c4:	2304      	movs	r3, #4
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e21e      	b.n	800560a <UART_SetConfig+0x5a6>
 80051cc:	2308      	movs	r3, #8
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e21a      	b.n	800560a <UART_SetConfig+0x5a6>
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e216      	b.n	800560a <UART_SetConfig+0x5a6>
 80051dc:	2320      	movs	r3, #32
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e212      	b.n	800560a <UART_SetConfig+0x5a6>
 80051e4:	2340      	movs	r3, #64	; 0x40
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e20e      	b.n	800560a <UART_SetConfig+0x5a6>
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e20a      	b.n	800560a <UART_SetConfig+0x5a6>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a69      	ldr	r2, [pc, #420]	; (80053a0 <UART_SetConfig+0x33c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d130      	bne.n	8005260 <UART_SetConfig+0x1fc>
 80051fe:	4b67      	ldr	r3, [pc, #412]	; (800539c <UART_SetConfig+0x338>)
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b05      	cmp	r3, #5
 8005208:	d826      	bhi.n	8005258 <UART_SetConfig+0x1f4>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x1ac>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005229 	.word	0x08005229
 8005214:	08005231 	.word	0x08005231
 8005218:	08005239 	.word	0x08005239
 800521c:	08005241 	.word	0x08005241
 8005220:	08005249 	.word	0x08005249
 8005224:	08005251 	.word	0x08005251
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e1ec      	b.n	800560a <UART_SetConfig+0x5a6>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e1e8      	b.n	800560a <UART_SetConfig+0x5a6>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e1e4      	b.n	800560a <UART_SetConfig+0x5a6>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e1e0      	b.n	800560a <UART_SetConfig+0x5a6>
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e1dc      	b.n	800560a <UART_SetConfig+0x5a6>
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e1d8      	b.n	800560a <UART_SetConfig+0x5a6>
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e1d4      	b.n	800560a <UART_SetConfig+0x5a6>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a4f      	ldr	r2, [pc, #316]	; (80053a4 <UART_SetConfig+0x340>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d130      	bne.n	80052cc <UART_SetConfig+0x268>
 800526a:	4b4c      	ldr	r3, [pc, #304]	; (800539c <UART_SetConfig+0x338>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b05      	cmp	r3, #5
 8005274:	d826      	bhi.n	80052c4 <UART_SetConfig+0x260>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x218>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e1b6      	b.n	800560a <UART_SetConfig+0x5a6>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e1b2      	b.n	800560a <UART_SetConfig+0x5a6>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e1ae      	b.n	800560a <UART_SetConfig+0x5a6>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e1aa      	b.n	800560a <UART_SetConfig+0x5a6>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e1a6      	b.n	800560a <UART_SetConfig+0x5a6>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e1a2      	b.n	800560a <UART_SetConfig+0x5a6>
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e19e      	b.n	800560a <UART_SetConfig+0x5a6>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a35      	ldr	r2, [pc, #212]	; (80053a8 <UART_SetConfig+0x344>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d130      	bne.n	8005338 <UART_SetConfig+0x2d4>
 80052d6:	4b31      	ldr	r3, [pc, #196]	; (800539c <UART_SetConfig+0x338>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d826      	bhi.n	8005330 <UART_SetConfig+0x2cc>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x284>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e180      	b.n	800560a <UART_SetConfig+0x5a6>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e17c      	b.n	800560a <UART_SetConfig+0x5a6>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e178      	b.n	800560a <UART_SetConfig+0x5a6>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e174      	b.n	800560a <UART_SetConfig+0x5a6>
 8005320:	2320      	movs	r3, #32
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e170      	b.n	800560a <UART_SetConfig+0x5a6>
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532e:	e16c      	b.n	800560a <UART_SetConfig+0x5a6>
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e168      	b.n	800560a <UART_SetConfig+0x5a6>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <UART_SetConfig+0x348>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d142      	bne.n	80053c8 <UART_SetConfig+0x364>
 8005342:	4b16      	ldr	r3, [pc, #88]	; (800539c <UART_SetConfig+0x338>)
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b05      	cmp	r3, #5
 800534c:	d838      	bhi.n	80053c0 <UART_SetConfig+0x35c>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <UART_SetConfig+0x2f0>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005375 	.word	0x08005375
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005385 	.word	0x08005385
 8005364:	080053b1 	.word	0x080053b1
 8005368:	080053b9 	.word	0x080053b9
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e14a      	b.n	800560a <UART_SetConfig+0x5a6>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e146      	b.n	800560a <UART_SetConfig+0x5a6>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e142      	b.n	800560a <UART_SetConfig+0x5a6>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e13e      	b.n	800560a <UART_SetConfig+0x5a6>
 800538c:	cfff69f3 	.word	0xcfff69f3
 8005390:	58000c00 	.word	0x58000c00
 8005394:	11fff4ff 	.word	0x11fff4ff
 8005398:	40011000 	.word	0x40011000
 800539c:	58024400 	.word	0x58024400
 80053a0:	40004400 	.word	0x40004400
 80053a4:	40004800 	.word	0x40004800
 80053a8:	40004c00 	.word	0x40004c00
 80053ac:	40005000 	.word	0x40005000
 80053b0:	2320      	movs	r3, #32
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b6:	e128      	b.n	800560a <UART_SetConfig+0x5a6>
 80053b8:	2340      	movs	r3, #64	; 0x40
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053be:	e124      	b.n	800560a <UART_SetConfig+0x5a6>
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c6:	e120      	b.n	800560a <UART_SetConfig+0x5a6>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4acb      	ldr	r2, [pc, #812]	; (80056fc <UART_SetConfig+0x698>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d176      	bne.n	80054c0 <UART_SetConfig+0x45c>
 80053d2:	4bcb      	ldr	r3, [pc, #812]	; (8005700 <UART_SetConfig+0x69c>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053da:	2b28      	cmp	r3, #40	; 0x28
 80053dc:	d86c      	bhi.n	80054b8 <UART_SetConfig+0x454>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x380>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005489 	.word	0x08005489
 80053e8:	080054b9 	.word	0x080054b9
 80053ec:	080054b9 	.word	0x080054b9
 80053f0:	080054b9 	.word	0x080054b9
 80053f4:	080054b9 	.word	0x080054b9
 80053f8:	080054b9 	.word	0x080054b9
 80053fc:	080054b9 	.word	0x080054b9
 8005400:	080054b9 	.word	0x080054b9
 8005404:	08005491 	.word	0x08005491
 8005408:	080054b9 	.word	0x080054b9
 800540c:	080054b9 	.word	0x080054b9
 8005410:	080054b9 	.word	0x080054b9
 8005414:	080054b9 	.word	0x080054b9
 8005418:	080054b9 	.word	0x080054b9
 800541c:	080054b9 	.word	0x080054b9
 8005420:	080054b9 	.word	0x080054b9
 8005424:	08005499 	.word	0x08005499
 8005428:	080054b9 	.word	0x080054b9
 800542c:	080054b9 	.word	0x080054b9
 8005430:	080054b9 	.word	0x080054b9
 8005434:	080054b9 	.word	0x080054b9
 8005438:	080054b9 	.word	0x080054b9
 800543c:	080054b9 	.word	0x080054b9
 8005440:	080054b9 	.word	0x080054b9
 8005444:	080054a1 	.word	0x080054a1
 8005448:	080054b9 	.word	0x080054b9
 800544c:	080054b9 	.word	0x080054b9
 8005450:	080054b9 	.word	0x080054b9
 8005454:	080054b9 	.word	0x080054b9
 8005458:	080054b9 	.word	0x080054b9
 800545c:	080054b9 	.word	0x080054b9
 8005460:	080054b9 	.word	0x080054b9
 8005464:	080054a9 	.word	0x080054a9
 8005468:	080054b9 	.word	0x080054b9
 800546c:	080054b9 	.word	0x080054b9
 8005470:	080054b9 	.word	0x080054b9
 8005474:	080054b9 	.word	0x080054b9
 8005478:	080054b9 	.word	0x080054b9
 800547c:	080054b9 	.word	0x080054b9
 8005480:	080054b9 	.word	0x080054b9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548e:	e0bc      	b.n	800560a <UART_SetConfig+0x5a6>
 8005490:	2304      	movs	r3, #4
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e0b8      	b.n	800560a <UART_SetConfig+0x5a6>
 8005498:	2308      	movs	r3, #8
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e0b4      	b.n	800560a <UART_SetConfig+0x5a6>
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e0b0      	b.n	800560a <UART_SetConfig+0x5a6>
 80054a8:	2320      	movs	r3, #32
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e0ac      	b.n	800560a <UART_SetConfig+0x5a6>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e0a8      	b.n	800560a <UART_SetConfig+0x5a6>
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e0a4      	b.n	800560a <UART_SetConfig+0x5a6>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a8f      	ldr	r2, [pc, #572]	; (8005704 <UART_SetConfig+0x6a0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d130      	bne.n	800552c <UART_SetConfig+0x4c8>
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <UART_SetConfig+0x69c>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d826      	bhi.n	8005524 <UART_SetConfig+0x4c0>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x478>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fd 	.word	0x080054fd
 80054e4:	08005505 	.word	0x08005505
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005515 	.word	0x08005515
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fa:	e086      	b.n	800560a <UART_SetConfig+0x5a6>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e082      	b.n	800560a <UART_SetConfig+0x5a6>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550a:	e07e      	b.n	800560a <UART_SetConfig+0x5a6>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e07a      	b.n	800560a <UART_SetConfig+0x5a6>
 8005514:	2320      	movs	r3, #32
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e076      	b.n	800560a <UART_SetConfig+0x5a6>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e072      	b.n	800560a <UART_SetConfig+0x5a6>
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e06e      	b.n	800560a <UART_SetConfig+0x5a6>
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a75      	ldr	r2, [pc, #468]	; (8005708 <UART_SetConfig+0x6a4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d130      	bne.n	8005598 <UART_SetConfig+0x534>
 8005536:	4b72      	ldr	r3, [pc, #456]	; (8005700 <UART_SetConfig+0x69c>)
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b05      	cmp	r3, #5
 8005540:	d826      	bhi.n	8005590 <UART_SetConfig+0x52c>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x4e4>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005561 	.word	0x08005561
 800554c:	08005569 	.word	0x08005569
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e050      	b.n	800560a <UART_SetConfig+0x5a6>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e04c      	b.n	800560a <UART_SetConfig+0x5a6>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e048      	b.n	800560a <UART_SetConfig+0x5a6>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e044      	b.n	800560a <UART_SetConfig+0x5a6>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e040      	b.n	800560a <UART_SetConfig+0x5a6>
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e03c      	b.n	800560a <UART_SetConfig+0x5a6>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e038      	b.n	800560a <UART_SetConfig+0x5a6>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5b      	ldr	r2, [pc, #364]	; (800570c <UART_SetConfig+0x6a8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d130      	bne.n	8005604 <UART_SetConfig+0x5a0>
 80055a2:	4b57      	ldr	r3, [pc, #348]	; (8005700 <UART_SetConfig+0x69c>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d826      	bhi.n	80055fc <UART_SetConfig+0x598>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x550>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055dd 	.word	0x080055dd
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	2302      	movs	r3, #2
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d2:	e01a      	b.n	800560a <UART_SetConfig+0x5a6>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e016      	b.n	800560a <UART_SetConfig+0x5a6>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e012      	b.n	800560a <UART_SetConfig+0x5a6>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e00e      	b.n	800560a <UART_SetConfig+0x5a6>
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e00a      	b.n	800560a <UART_SetConfig+0x5a6>
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e006      	b.n	800560a <UART_SetConfig+0x5a6>
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e002      	b.n	800560a <UART_SetConfig+0x5a6>
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a3f      	ldr	r2, [pc, #252]	; (800570c <UART_SetConfig+0x6a8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	f040 80f8 	bne.w	8005806 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005616:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800561a:	2b20      	cmp	r3, #32
 800561c:	dc46      	bgt.n	80056ac <UART_SetConfig+0x648>
 800561e:	2b02      	cmp	r3, #2
 8005620:	f2c0 8082 	blt.w	8005728 <UART_SetConfig+0x6c4>
 8005624:	3b02      	subs	r3, #2
 8005626:	2b1e      	cmp	r3, #30
 8005628:	d87e      	bhi.n	8005728 <UART_SetConfig+0x6c4>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x5cc>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	080056b3 	.word	0x080056b3
 8005634:	08005729 	.word	0x08005729
 8005638:	080056bb 	.word	0x080056bb
 800563c:	08005729 	.word	0x08005729
 8005640:	08005729 	.word	0x08005729
 8005644:	08005729 	.word	0x08005729
 8005648:	080056cb 	.word	0x080056cb
 800564c:	08005729 	.word	0x08005729
 8005650:	08005729 	.word	0x08005729
 8005654:	08005729 	.word	0x08005729
 8005658:	08005729 	.word	0x08005729
 800565c:	08005729 	.word	0x08005729
 8005660:	08005729 	.word	0x08005729
 8005664:	08005729 	.word	0x08005729
 8005668:	080056db 	.word	0x080056db
 800566c:	08005729 	.word	0x08005729
 8005670:	08005729 	.word	0x08005729
 8005674:	08005729 	.word	0x08005729
 8005678:	08005729 	.word	0x08005729
 800567c:	08005729 	.word	0x08005729
 8005680:	08005729 	.word	0x08005729
 8005684:	08005729 	.word	0x08005729
 8005688:	08005729 	.word	0x08005729
 800568c:	08005729 	.word	0x08005729
 8005690:	08005729 	.word	0x08005729
 8005694:	08005729 	.word	0x08005729
 8005698:	08005729 	.word	0x08005729
 800569c:	08005729 	.word	0x08005729
 80056a0:	08005729 	.word	0x08005729
 80056a4:	08005729 	.word	0x08005729
 80056a8:	0800571b 	.word	0x0800571b
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d037      	beq.n	8005720 <UART_SetConfig+0x6bc>
 80056b0:	e03a      	b.n	8005728 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056b2:	f7ff f865 	bl	8004780 <HAL_RCCEx_GetD3PCLK1Freq>
 80056b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056b8:	e03c      	b.n	8005734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f874 	bl	80047ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c8:	e034      	b.n	8005734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ca:	f107 0318 	add.w	r3, r7, #24
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff f9c0 	bl	8004a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d8:	e02c      	b.n	8005734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <UART_SetConfig+0x69c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <UART_SetConfig+0x69c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	08db      	lsrs	r3, r3, #3
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	4a07      	ldr	r2, [pc, #28]	; (8005710 <UART_SetConfig+0x6ac>)
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056f8:	e01c      	b.n	8005734 <UART_SetConfig+0x6d0>
 80056fa:	bf00      	nop
 80056fc:	40011400 	.word	0x40011400
 8005700:	58024400 	.word	0x58024400
 8005704:	40007800 	.word	0x40007800
 8005708:	40007c00 	.word	0x40007c00
 800570c:	58000c00 	.word	0x58000c00
 8005710:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005714:	4b9d      	ldr	r3, [pc, #628]	; (800598c <UART_SetConfig+0x928>)
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005718:	e00c      	b.n	8005734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800571a:	4b9d      	ldr	r3, [pc, #628]	; (8005990 <UART_SetConfig+0x92c>)
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800571e:	e009      	b.n	8005734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005726:	e005      	b.n	8005734 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005732:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 81de 	beq.w	8005af8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	4a94      	ldr	r2, [pc, #592]	; (8005994 <UART_SetConfig+0x930>)
 8005742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005746:	461a      	mov	r2, r3
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	fbb3 f3f2 	udiv	r3, r3, r2
 800574e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575c:	429a      	cmp	r2, r3
 800575e:	d305      	bcc.n	800576c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005768:	429a      	cmp	r2, r3
 800576a:	d903      	bls.n	8005774 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005772:	e1c1      	b.n	8005af8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005776:	2200      	movs	r2, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	60fa      	str	r2, [r7, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	4a84      	ldr	r2, [pc, #528]	; (8005994 <UART_SetConfig+0x930>)
 8005782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005786:	b29b      	uxth	r3, r3
 8005788:	2200      	movs	r2, #0
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005796:	f7fa fd9f 	bl	80002d8 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	020b      	lsls	r3, r1, #8
 80057ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057b0:	0202      	lsls	r2, r0, #8
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	6849      	ldr	r1, [r1, #4]
 80057b6:	0849      	lsrs	r1, r1, #1
 80057b8:	2000      	movs	r0, #0
 80057ba:	460c      	mov	r4, r1
 80057bc:	4605      	mov	r5, r0
 80057be:	eb12 0804 	adds.w	r8, r2, r4
 80057c2:	eb43 0905 	adc.w	r9, r3, r5
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	469a      	mov	sl, r3
 80057ce:	4693      	mov	fp, r2
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fa fd7e 	bl	80002d8 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ea:	d308      	bcc.n	80057fe <UART_SetConfig+0x79a>
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f2:	d204      	bcs.n	80057fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057fa:	60da      	str	r2, [r3, #12]
 80057fc:	e17c      	b.n	8005af8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005804:	e178      	b.n	8005af8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580e:	f040 80c5 	bne.w	800599c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005812:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005816:	2b20      	cmp	r3, #32
 8005818:	dc48      	bgt.n	80058ac <UART_SetConfig+0x848>
 800581a:	2b00      	cmp	r3, #0
 800581c:	db7b      	blt.n	8005916 <UART_SetConfig+0x8b2>
 800581e:	2b20      	cmp	r3, #32
 8005820:	d879      	bhi.n	8005916 <UART_SetConfig+0x8b2>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x7c4>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	080058b3 	.word	0x080058b3
 800582c:	080058bb 	.word	0x080058bb
 8005830:	08005917 	.word	0x08005917
 8005834:	08005917 	.word	0x08005917
 8005838:	080058c3 	.word	0x080058c3
 800583c:	08005917 	.word	0x08005917
 8005840:	08005917 	.word	0x08005917
 8005844:	08005917 	.word	0x08005917
 8005848:	080058d3 	.word	0x080058d3
 800584c:	08005917 	.word	0x08005917
 8005850:	08005917 	.word	0x08005917
 8005854:	08005917 	.word	0x08005917
 8005858:	08005917 	.word	0x08005917
 800585c:	08005917 	.word	0x08005917
 8005860:	08005917 	.word	0x08005917
 8005864:	08005917 	.word	0x08005917
 8005868:	080058e3 	.word	0x080058e3
 800586c:	08005917 	.word	0x08005917
 8005870:	08005917 	.word	0x08005917
 8005874:	08005917 	.word	0x08005917
 8005878:	08005917 	.word	0x08005917
 800587c:	08005917 	.word	0x08005917
 8005880:	08005917 	.word	0x08005917
 8005884:	08005917 	.word	0x08005917
 8005888:	08005917 	.word	0x08005917
 800588c:	08005917 	.word	0x08005917
 8005890:	08005917 	.word	0x08005917
 8005894:	08005917 	.word	0x08005917
 8005898:	08005917 	.word	0x08005917
 800589c:	08005917 	.word	0x08005917
 80058a0:	08005917 	.word	0x08005917
 80058a4:	08005917 	.word	0x08005917
 80058a8:	08005909 	.word	0x08005909
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d02e      	beq.n	800590e <UART_SetConfig+0x8aa>
 80058b0:	e031      	b.n	8005916 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b2:	f7fd fd2f 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80058b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058b8:	e033      	b.n	8005922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ba:	f7fd fd41 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 80058be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058c0:	e02f      	b.n	8005922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe ff70 	bl	80047ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d0:	e027      	b.n	8005922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058d2:	f107 0318 	add.w	r3, r7, #24
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff f8bc 	bl	8004a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e0:	e01f      	b.n	8005922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058e2:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <UART_SetConfig+0x934>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ee:	4b2a      	ldr	r3, [pc, #168]	; (8005998 <UART_SetConfig+0x934>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	4a24      	ldr	r2, [pc, #144]	; (800598c <UART_SetConfig+0x928>)
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005900:	e00f      	b.n	8005922 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005902:	4b22      	ldr	r3, [pc, #136]	; (800598c <UART_SetConfig+0x928>)
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005906:	e00c      	b.n	8005922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005908:	4b21      	ldr	r3, [pc, #132]	; (8005990 <UART_SetConfig+0x92c>)
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800590c:	e009      	b.n	8005922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005914:	e005      	b.n	8005922 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80e7 	beq.w	8005af8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	4a19      	ldr	r2, [pc, #100]	; (8005994 <UART_SetConfig+0x930>)
 8005930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005934:	461a      	mov	r2, r3
 8005936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005938:	fbb3 f3f2 	udiv	r3, r3, r2
 800593c:	005a      	lsls	r2, r3, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	441a      	add	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	2b0f      	cmp	r3, #15
 8005954:	d916      	bls.n	8005984 <UART_SetConfig+0x920>
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d212      	bcs.n	8005984 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	b29b      	uxth	r3, r3
 8005962:	f023 030f 	bic.w	r3, r3, #15
 8005966:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	b29a      	uxth	r2, r3
 8005974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005976:	4313      	orrs	r3, r2
 8005978:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e0b9      	b.n	8005af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800598a:	e0b5      	b.n	8005af8 <UART_SetConfig+0xa94>
 800598c:	03d09000 	.word	0x03d09000
 8005990:	003d0900 	.word	0x003d0900
 8005994:	08006804 	.word	0x08006804
 8005998:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800599c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	dc49      	bgt.n	8005a38 <UART_SetConfig+0x9d4>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db7c      	blt.n	8005aa2 <UART_SetConfig+0xa3e>
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d87a      	bhi.n	8005aa2 <UART_SetConfig+0xa3e>
 80059ac:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0x950>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	08005a3f 	.word	0x08005a3f
 80059b8:	08005a47 	.word	0x08005a47
 80059bc:	08005aa3 	.word	0x08005aa3
 80059c0:	08005aa3 	.word	0x08005aa3
 80059c4:	08005a4f 	.word	0x08005a4f
 80059c8:	08005aa3 	.word	0x08005aa3
 80059cc:	08005aa3 	.word	0x08005aa3
 80059d0:	08005aa3 	.word	0x08005aa3
 80059d4:	08005a5f 	.word	0x08005a5f
 80059d8:	08005aa3 	.word	0x08005aa3
 80059dc:	08005aa3 	.word	0x08005aa3
 80059e0:	08005aa3 	.word	0x08005aa3
 80059e4:	08005aa3 	.word	0x08005aa3
 80059e8:	08005aa3 	.word	0x08005aa3
 80059ec:	08005aa3 	.word	0x08005aa3
 80059f0:	08005aa3 	.word	0x08005aa3
 80059f4:	08005a6f 	.word	0x08005a6f
 80059f8:	08005aa3 	.word	0x08005aa3
 80059fc:	08005aa3 	.word	0x08005aa3
 8005a00:	08005aa3 	.word	0x08005aa3
 8005a04:	08005aa3 	.word	0x08005aa3
 8005a08:	08005aa3 	.word	0x08005aa3
 8005a0c:	08005aa3 	.word	0x08005aa3
 8005a10:	08005aa3 	.word	0x08005aa3
 8005a14:	08005aa3 	.word	0x08005aa3
 8005a18:	08005aa3 	.word	0x08005aa3
 8005a1c:	08005aa3 	.word	0x08005aa3
 8005a20:	08005aa3 	.word	0x08005aa3
 8005a24:	08005aa3 	.word	0x08005aa3
 8005a28:	08005aa3 	.word	0x08005aa3
 8005a2c:	08005aa3 	.word	0x08005aa3
 8005a30:	08005aa3 	.word	0x08005aa3
 8005a34:	08005a95 	.word	0x08005a95
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d02e      	beq.n	8005a9a <UART_SetConfig+0xa36>
 8005a3c:	e031      	b.n	8005aa2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3e:	f7fd fc69 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005a42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a44:	e033      	b.n	8005aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a46:	f7fd fc7b 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8005a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a4c:	e02f      	b.n	8005aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe feaa 	bl	80047ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a5c:	e027      	b.n	8005aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a5e:	f107 0318 	add.w	r3, r7, #24
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fff6 	bl	8004a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a6c:	e01f      	b.n	8005aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a6e:	4b2d      	ldr	r3, [pc, #180]	; (8005b24 <UART_SetConfig+0xac0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a7a:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <UART_SetConfig+0xac0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	08db      	lsrs	r3, r3, #3
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	4a28      	ldr	r2, [pc, #160]	; (8005b28 <UART_SetConfig+0xac4>)
 8005a86:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a8c:	e00f      	b.n	8005aae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a8e:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <UART_SetConfig+0xac4>)
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a92:	e00c      	b.n	8005aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a94:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <UART_SetConfig+0xac8>)
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a98:	e009      	b.n	8005aae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aa0:	e005      	b.n	8005aae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005aac:	bf00      	nop
    }

    if (pclk != 0U)
 8005aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d021      	beq.n	8005af8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <UART_SetConfig+0xacc>)
 8005aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	441a      	add	r2, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	2b0f      	cmp	r3, #15
 8005adc:	d909      	bls.n	8005af2 <UART_SetConfig+0xa8e>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae4:	d205      	bcs.n	8005af2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	e002      	b.n	8005af8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3748      	adds	r7, #72	; 0x48
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
 8005b28:	03d09000 	.word	0x03d09000
 8005b2c:	003d0900 	.word	0x003d0900
 8005b30:	08006804 	.word	0x08006804

08005b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01a      	beq.n	8005c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c32:	d10a      	bne.n	8005c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b098      	sub	sp, #96	; 0x60
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c88:	f7fb fa66 	bl	8001158 <HAL_GetTick>
 8005c8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d12f      	bne.n	8005cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f88e 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d022      	beq.n	8005cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e063      	b.n	8005dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d149      	bne.n	8005d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d12:	2200      	movs	r2, #0
 8005d14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f857 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03c      	beq.n	8005d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	623b      	str	r3, [r7, #32]
   return(result);
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
 8005d44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d76:	61fa      	str	r2, [r7, #28]
 8005d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	69b9      	ldr	r1, [r7, #24]
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	617b      	str	r3, [r7, #20]
   return(result);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e012      	b.n	8005dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3758      	adds	r7, #88	; 0x58
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	e049      	b.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d045      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de6:	f7fb f9b7 	bl	8001158 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e048      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d031      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d110      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2208      	movs	r2, #8
 8005e22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f839 	bl	8005e9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e029      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d111      	bne.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f81f 	bl	8005e9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e00f      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d0a6      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b095      	sub	sp, #84	; 0x54
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e6      	bne.n	8005ea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <UART_EndRxTransfer+0xc8>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e5      	bne.n	8005ed6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d118      	bne.n	8005f44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6979      	ldr	r1, [r7, #20]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e6      	bne.n	8005f12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f58:	bf00      	nop
 8005f5a:	3754      	adds	r7, #84	; 0x54
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	effffffe 	.word	0xeffffffe

08005f68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_UARTEx_DisableFifoMode+0x16>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e027      	b.n	8005fce <HAL_UARTEx_DisableFifoMode+0x66>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2224      	movs	r2, #36	; 0x24
 8005f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0201 	bic.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e02d      	b.n	800604e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2224      	movs	r2, #36	; 0x24
 8005ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f850 	bl	80060d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800606a:	2302      	movs	r3, #2
 800606c:	e02d      	b.n	80060ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2224      	movs	r2, #36	; 0x24
 800607a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f812 	bl	80060d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d108      	bne.n	80060f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060f4:	e031      	b.n	800615a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060f6:	2310      	movs	r3, #16
 80060f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060fa:	2310      	movs	r3, #16
 80060fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	0e5b      	lsrs	r3, r3, #25
 8006106:	b2db      	uxtb	r3, r3
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	0f5b      	lsrs	r3, r3, #29
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	7b3a      	ldrb	r2, [r7, #12]
 8006122:	4911      	ldr	r1, [pc, #68]	; (8006168 <UARTEx_SetNbDataToProcess+0x94>)
 8006124:	5c8a      	ldrb	r2, [r1, r2]
 8006126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800612a:	7b3a      	ldrb	r2, [r7, #12]
 800612c:	490f      	ldr	r1, [pc, #60]	; (800616c <UARTEx_SetNbDataToProcess+0x98>)
 800612e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006130:	fb93 f3f2 	sdiv	r3, r3, r2
 8006134:	b29a      	uxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	7b7a      	ldrb	r2, [r7, #13]
 8006140:	4909      	ldr	r1, [pc, #36]	; (8006168 <UARTEx_SetNbDataToProcess+0x94>)
 8006142:	5c8a      	ldrb	r2, [r1, r2]
 8006144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006148:	7b7a      	ldrb	r2, [r7, #13]
 800614a:	4908      	ldr	r1, [pc, #32]	; (800616c <UARTEx_SetNbDataToProcess+0x98>)
 800614c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800614e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006152:	b29a      	uxth	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	0800681c 	.word	0x0800681c
 800616c:	08006824 	.word	0x08006824

08006170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006170:	b084      	sub	sp, #16
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	f107 001c 	add.w	r0, r7, #28
 800617e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2b01      	cmp	r3, #1
 8006186:	d120      	bne.n	80061ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <USB_CoreInit+0xd4>)
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 faac 	bl	800671c <USB_CoreReset>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	e01a      	b.n	8006200 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 faa0 	bl	800671c <USB_CoreReset>
 80061dc:	4603      	mov	r3, r0
 80061de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
 80061f2:	e005      	b.n	8006200 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	2b01      	cmp	r3, #1
 8006204:	d116      	bne.n	8006234 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620a:	b29a      	uxth	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <USB_CoreInit+0xd8>)
 8006216:	4313      	orrs	r3, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f043 0206 	orr.w	r2, r3, #6
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f043 0220 	orr.w	r2, r3, #32
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006240:	b004      	add	sp, #16
 8006242:	4770      	bx	lr
 8006244:	ffbdffbf 	.word	0xffbdffbf
 8006248:	03ee0000 	.word	0x03ee0000

0800624c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f023 0201 	bic.w	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d115      	bne.n	80062bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800629c:	2001      	movs	r0, #1
 800629e:	f7fa ff67 	bl	8001170 <HAL_Delay>
      ms++;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3301      	adds	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa29 	bl	8006700 <USB_GetMode>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d01e      	beq.n	80062f2 <USB_SetCurrentMode+0x84>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b31      	cmp	r3, #49	; 0x31
 80062b8:	d9f0      	bls.n	800629c <USB_SetCurrentMode+0x2e>
 80062ba:	e01a      	b.n	80062f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d115      	bne.n	80062ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062ce:	2001      	movs	r0, #1
 80062d0:	f7fa ff4e 	bl	8001170 <HAL_Delay>
      ms++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa10 	bl	8006700 <USB_GetMode>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <USB_SetCurrentMode+0x84>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b31      	cmp	r3, #49	; 0x31
 80062ea:	d9f0      	bls.n	80062ce <USB_SetCurrentMode+0x60>
 80062ec:	e001      	b.n	80062f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e005      	b.n	80062fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b32      	cmp	r3, #50	; 0x32
 80062f6:	d101      	bne.n	80062fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006308:	b084      	sub	sp, #16
 800630a:	b580      	push	{r7, lr}
 800630c:	b086      	sub	sp, #24
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	e009      	b.n	800633c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3340      	adds	r3, #64	; 0x40
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	3301      	adds	r3, #1
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b0e      	cmp	r3, #14
 8006340:	d9f2      	bls.n	8006328 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11c      	bne.n	8006382 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006356:	f043 0302 	orr.w	r3, r3, #2
 800635a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e005      	b.n	800638e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a0:	4619      	mov	r1, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a8:	461a      	mov	r2, r3
 80063aa:	680b      	ldr	r3, [r1, #0]
 80063ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d10c      	bne.n	80063ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063ba:	2100      	movs	r1, #0
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f965 	bl	800668c <USB_SetDevSpeed>
 80063c2:	e008      	b.n	80063d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063c4:	2101      	movs	r1, #1
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f960 	bl	800668c <USB_SetDevSpeed>
 80063cc:	e003      	b.n	80063d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063ce:	2103      	movs	r1, #3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f95b 	bl	800668c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063d6:	2110      	movs	r1, #16
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f8f3 	bl	80065c4 <USB_FlushTxFifo>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f91f 	bl	800662c <USB_FlushRxFifo>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	461a      	mov	r2, r3
 800640c:	2300      	movs	r3, #0
 800640e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	461a      	mov	r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800641c:	2300      	movs	r3, #0
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	e043      	b.n	80064aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006438:	d118      	bne.n	800646c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644c:	461a      	mov	r2, r3
 800644e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	e013      	b.n	800647e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006462:	461a      	mov	r2, r3
 8006464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	e008      	b.n	800647e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006478:	461a      	mov	r2, r3
 800647a:	2300      	movs	r3, #0
 800647c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	461a      	mov	r2, r3
 800648c:	2300      	movs	r3, #0
 800648e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	461a      	mov	r2, r3
 800649e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	3301      	adds	r3, #1
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3b7      	bcc.n	8006422 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	e043      	b.n	8006540 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ce:	d118      	bne.n	8006502 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	461a      	mov	r2, r3
 80064e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e013      	b.n	8006514 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f8:	461a      	mov	r2, r3
 80064fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	e008      	b.n	8006514 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006532:	461a      	mov	r2, r3
 8006534:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006538:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3301      	adds	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	d3b7      	bcc.n	80064b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800655a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006568:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f043 0210 	orr.w	r2, r3, #16
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699a      	ldr	r2, [r3, #24]
 8006580:	4b0e      	ldr	r3, [pc, #56]	; (80065bc <USB_DevInit+0x2b4>)
 8006582:	4313      	orrs	r3, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f043 0208 	orr.w	r2, r3, #8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800659a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d105      	bne.n	80065ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <USB_DevInit+0x2b8>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b8:	b004      	add	sp, #16
 80065ba:	4770      	bx	lr
 80065bc:	803c3800 	.word	0x803c3800
 80065c0:	40000004 	.word	0x40000004

080065c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4a13      	ldr	r2, [pc, #76]	; (8006628 <USB_FlushTxFifo+0x64>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e01b      	b.n	800661c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	daf2      	bge.n	80065d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	019b      	lsls	r3, r3, #6
 80065f4:	f043 0220 	orr.w	r2, r3, #32
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4a08      	ldr	r2, [pc, #32]	; (8006628 <USB_FlushTxFifo+0x64>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e006      	b.n	800661c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b20      	cmp	r3, #32
 8006618:	d0f0      	beq.n	80065fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	00030d40 	.word	0x00030d40

0800662c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a11      	ldr	r2, [pc, #68]	; (8006688 <USB_FlushRxFifo+0x5c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e018      	b.n	800667c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	daf2      	bge.n	8006638 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2210      	movs	r2, #16
 800665a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4a08      	ldr	r2, [pc, #32]	; (8006688 <USB_FlushRxFifo+0x5c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d901      	bls.n	800666e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e006      	b.n	800667c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b10      	cmp	r3, #16
 8006678:	d0f0      	beq.n	800665c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	00030d40 	.word	0x00030d40

0800668c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ac:	4313      	orrs	r3, r2
 80066ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066d8:	f023 0303 	bic.w	r3, r3, #3
 80066dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ec:	f043 0302 	orr.w	r3, r3, #2
 80066f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0301 	and.w	r3, r3, #1
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a13      	ldr	r2, [pc, #76]	; (8006780 <USB_CoreReset+0x64>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e01b      	b.n	8006772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	daf2      	bge.n	8006728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f043 0201 	orr.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <USB_CoreReset+0x64>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d901      	bls.n	8006764 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e006      	b.n	8006772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d0f0      	beq.n	8006752 <USB_CoreReset+0x36>

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	00030d40 	.word	0x00030d40

08006784 <memset>:
 8006784:	4402      	add	r2, r0
 8006786:	4603      	mov	r3, r0
 8006788:	4293      	cmp	r3, r2
 800678a:	d100      	bne.n	800678e <memset+0xa>
 800678c:	4770      	bx	lr
 800678e:	f803 1b01 	strb.w	r1, [r3], #1
 8006792:	e7f9      	b.n	8006788 <memset+0x4>

08006794 <__libc_init_array>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4d0d      	ldr	r5, [pc, #52]	; (80067cc <__libc_init_array+0x38>)
 8006798:	4c0d      	ldr	r4, [pc, #52]	; (80067d0 <__libc_init_array+0x3c>)
 800679a:	1b64      	subs	r4, r4, r5
 800679c:	10a4      	asrs	r4, r4, #2
 800679e:	2600      	movs	r6, #0
 80067a0:	42a6      	cmp	r6, r4
 80067a2:	d109      	bne.n	80067b8 <__libc_init_array+0x24>
 80067a4:	4d0b      	ldr	r5, [pc, #44]	; (80067d4 <__libc_init_array+0x40>)
 80067a6:	4c0c      	ldr	r4, [pc, #48]	; (80067d8 <__libc_init_array+0x44>)
 80067a8:	f000 f818 	bl	80067dc <_init>
 80067ac:	1b64      	subs	r4, r4, r5
 80067ae:	10a4      	asrs	r4, r4, #2
 80067b0:	2600      	movs	r6, #0
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	d105      	bne.n	80067c2 <__libc_init_array+0x2e>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067bc:	4798      	blx	r3
 80067be:	3601      	adds	r6, #1
 80067c0:	e7ee      	b.n	80067a0 <__libc_init_array+0xc>
 80067c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c6:	4798      	blx	r3
 80067c8:	3601      	adds	r6, #1
 80067ca:	e7f2      	b.n	80067b2 <__libc_init_array+0x1e>
 80067cc:	08006834 	.word	0x08006834
 80067d0:	08006834 	.word	0x08006834
 80067d4:	08006834 	.word	0x08006834
 80067d8:	08006838 	.word	0x08006838

080067dc <_init>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr

080067e8 <_fini>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr
